/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertsInitParameters struct {

	// (String)
	Name *string `json:"name,omitempty" tf:"name"`

	// (String)
	Period *string `json:"period,omitempty" tf:"period"`

	// (Number)
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold"`
}

type AlertsObservation struct {

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// (Number)
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type AlertsParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name"`

	// (String)
	// +kubebuilder:validation:Optional
	Period *string `json:"period" tf:"period"`

	// (Number)
	// +kubebuilder:validation:Optional
	Threshold *float64 `json:"threshold" tf:"threshold"`
}

type CheckAlertsInitParameters struct {

	// (Set of Object) List of alerts for the check. (see below for nested schema)
	// List of alerts for the check.
	Alerts []AlertsInitParameters `json:"alerts,omitempty" tf:"alerts,omitempty"`

	// (Number) The ID of the check to manage alerts for.
	// The ID of the check to manage alerts for.
	CheckID *float64 `json:"checkId,omitempty" tf:"check_id,omitempty"`
}

type CheckAlertsObservation struct {

	// (Set of Object) List of alerts for the check. (see below for nested schema)
	// List of alerts for the check.
	Alerts []AlertsObservation `json:"alerts,omitempty" tf:"alerts,omitempty"`

	// (Number) The ID of the check to manage alerts for.
	// The ID of the check to manage alerts for.
	CheckID *float64 `json:"checkId,omitempty" tf:"check_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CheckAlertsParameters struct {

	// (Set of Object) List of alerts for the check. (see below for nested schema)
	// List of alerts for the check.
	// +kubebuilder:validation:Optional
	Alerts []AlertsParameters `json:"alerts,omitempty" tf:"alerts,omitempty"`

	// (Number) The ID of the check to manage alerts for.
	// The ID of the check to manage alerts for.
	// +kubebuilder:validation:Optional
	CheckID *float64 `json:"checkId,omitempty" tf:"check_id,omitempty"`
}

// CheckAlertsSpec defines the desired state of CheckAlerts
type CheckAlertsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CheckAlertsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CheckAlertsInitParameters `json:"initProvider,omitempty"`
}

// CheckAlertsStatus defines the observed state of CheckAlerts.
type CheckAlertsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CheckAlertsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CheckAlerts is the Schema for the CheckAlertss API. Manages alerts for a check in Grafana Synthetic Monitoring. Official documentation https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/configure-alerts/configure-per-check-alerts/
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type CheckAlerts struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.alerts) || (has(self.initProvider) && has(self.initProvider.alerts))",message="spec.forProvider.alerts is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.checkId) || (has(self.initProvider) && has(self.initProvider.checkId))",message="spec.forProvider.checkId is a required parameter"
	Spec   CheckAlertsSpec   `json:"spec"`
	Status CheckAlertsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CheckAlertsList contains a list of CheckAlertss
type CheckAlertsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CheckAlerts `json:"items"`
}

// Repository type metadata.
var (
	CheckAlerts_Kind             = "CheckAlerts"
	CheckAlerts_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CheckAlerts_Kind}.String()
	CheckAlerts_KindAPIVersion   = CheckAlerts_Kind + "." + CRDGroupVersion.String()
	CheckAlerts_GroupVersionKind = CRDGroupVersion.WithKind(CheckAlerts_Kind)
)

func init() {
	SchemeBuilder.Register(&CheckAlerts{}, &CheckAlertsList{})
}
