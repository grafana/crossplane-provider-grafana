/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BasicAuthObservation struct {
}

type BasicAuthParameters struct {

	// Basic auth password.
	// +kubebuilder:validation:Required
	Password *string `json:"password" tf:"password,omitempty"`

	// Basic auth username.
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type CheckObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The tenant ID of the check.
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type CheckParameters struct {

	// Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/monitor-public-endpoints/synthetic-monitoring-alerting/). Defaults to `none`.
	// +kubebuilder:validation:Optional
	AlertSensitivity *string `json:"alertSensitivity,omitempty" tf:"alert_sensitivity,omitempty"`

	// Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.
	// +kubebuilder:validation:Optional
	BasicMetricsOnly *bool `json:"basicMetricsOnly,omitempty" tf:"basic_metrics_only,omitempty"`

	// Whether to enable the check. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// How often the check runs in milliseconds (the value is not truly a "frequency" but a "period"). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.
	// +kubebuilder:validation:Optional
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// Name used for job label.
	// +kubebuilder:validation:Required
	Job *string `json:"job" tf:"job,omitempty"`

	// Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// List of probe location IDs where this target will be checked from.
	// +kubebuilder:validation:Required
	Probes []*float64 `json:"probes" tf:"probes,omitempty"`

	// Check settings. Should contain exactly one nested block.
	// +kubebuilder:validation:Required
	Settings []SettingsParameters `json:"settings" tf:"settings,omitempty"`

	// Hostname to ping.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type DNSObservation struct {
}

type DNSParameters struct {

	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Port to target. Defaults to `53`.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// `TCP` or `UDP`. Defaults to `UDP`.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`. Defaults to `A`.
	// +kubebuilder:validation:Optional
	RecordType *string `json:"recordType,omitempty" tf:"record_type,omitempty"`

	// DNS server address to target. Defaults to `8.8.8.8`.
	// +kubebuilder:validation:Optional
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// Source IP address.
	// +kubebuilder:validation:Optional
	SourceIPAddress *string `json:"sourceIpAddress,omitempty" tf:"source_ip_address,omitempty"`

	// List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.
	// +kubebuilder:validation:Optional
	ValidRCodes []*string `json:"validRCodes,omitempty" tf:"valid_r_codes,omitempty"`

	// Validate additional matches.
	// +kubebuilder:validation:Optional
	ValidateAdditionalRrs []ValidateAdditionalRrsParameters `json:"validateAdditionalRrs,omitempty" tf:"validate_additional_rrs,omitempty"`

	// Validate response answer.
	// +kubebuilder:validation:Optional
	ValidateAnswerRrs []ValidateAnswerRrsParameters `json:"validateAnswerRrs,omitempty" tf:"validate_answer_rrs,omitempty"`

	// Validate response authority.
	// +kubebuilder:validation:Optional
	ValidateAuthorityRrs []ValidateAuthorityRrsParameters `json:"validateAuthorityRrs,omitempty" tf:"validate_authority_rrs,omitempty"`
}

type FailIfHeaderMatchesRegexpObservation struct {
}

type FailIfHeaderMatchesRegexpParameters struct {

	// Allow header to be missing from responses. Defaults to `false`.
	// +kubebuilder:validation:Optional
	AllowMissing *bool `json:"allowMissing,omitempty" tf:"allow_missing,omitempty"`

	// Header name.
	// +kubebuilder:validation:Required
	Header *string `json:"header" tf:"header,omitempty"`

	// Regex that header value should match.
	// +kubebuilder:validation:Required
	Regexp *string `json:"regexp" tf:"regexp,omitempty"`
}

type FailIfHeaderNotMatchesRegexpObservation struct {
}

type FailIfHeaderNotMatchesRegexpParameters struct {

	// Allow header to be missing from responses. Defaults to `false`.
	// +kubebuilder:validation:Optional
	AllowMissing *bool `json:"allowMissing,omitempty" tf:"allow_missing,omitempty"`

	// Header name.
	// +kubebuilder:validation:Required
	Header *string `json:"header" tf:"header,omitempty"`

	// Regex that header value should match.
	// +kubebuilder:validation:Required
	Regexp *string `json:"regexp" tf:"regexp,omitempty"`
}

type HTTPObservation struct {
}

type HTTPParameters struct {

	// Basic auth settings.
	// +kubebuilder:validation:Optional
	BasicAuth []BasicAuthParameters `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`

	// Token for use with bearer authorization header.
	// +kubebuilder:validation:Optional
	BearerToken *string `json:"bearerToken,omitempty" tf:"bearer_token,omitempty"`

	// The body of the HTTP request used in probe.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// The name of the query parameter used to prevent the server from using a cached response. Each probe will assign a random value to this parameter each time a request is made.
	// +kubebuilder:validation:Optional
	CacheBustingQueryParamName *string `json:"cacheBustingQueryParamName,omitempty" tf:"cache_busting_query_param_name,omitempty"`

	// List of regexes. If any match the response body, the check will fail.
	// +kubebuilder:validation:Optional
	FailIfBodyMatchesRegexp []*string `json:"failIfBodyMatchesRegexp,omitempty" tf:"fail_if_body_matches_regexp,omitempty"`

	// List of regexes. If any do not match the response body, the check will fail.
	// +kubebuilder:validation:Optional
	FailIfBodyNotMatchesRegexp []*string `json:"failIfBodyNotMatchesRegexp,omitempty" tf:"fail_if_body_not_matches_regexp,omitempty"`

	// Check fails if headers match.
	// +kubebuilder:validation:Optional
	FailIfHeaderMatchesRegexp []FailIfHeaderMatchesRegexpParameters `json:"failIfHeaderMatchesRegexp,omitempty" tf:"fail_if_header_matches_regexp,omitempty"`

	// Check fails if headers do not match.
	// +kubebuilder:validation:Optional
	FailIfHeaderNotMatchesRegexp []FailIfHeaderNotMatchesRegexpParameters `json:"failIfHeaderNotMatchesRegexp,omitempty" tf:"fail_if_header_not_matches_regexp,omitempty"`

	// Fail if SSL is not present. Defaults to `false`.
	// +kubebuilder:validation:Optional
	FailIfNotSSL *bool `json:"failIfNotSsl,omitempty" tf:"fail_if_not_ssl,omitempty"`

	// Fail if SSL is present. Defaults to `false`.
	// +kubebuilder:validation:Optional
	FailIfSSL *bool `json:"failIfSsl,omitempty" tf:"fail_if_ssl,omitempty"`

	// The HTTP headers set for the probe.
	// +kubebuilder:validation:Optional
	Headers []*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Request method. One of `GET`, `CONNECT`, `DELETE`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `TRACE` Defaults to `GET`.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Do not follow redirects. Defaults to `false`.
	// +kubebuilder:validation:Optional
	NoFollowRedirects *bool `json:"noFollowRedirects,omitempty" tf:"no_follow_redirects,omitempty"`

	// Proxy URL.
	// +kubebuilder:validation:Optional
	ProxyURL *string `json:"proxyUrl,omitempty" tf:"proxy_url,omitempty"`

	// TLS config.
	// +kubebuilder:validation:Optional
	TLSConfig []TLSConfigParameters `json:"tlsConfig,omitempty" tf:"tls_config,omitempty"`

	// List of valid HTTP versions. Options include `HTTP/1.0`, `HTTP/1.1`, `HTTP/2`
	// +kubebuilder:validation:Optional
	ValidHTTPVersions []*string `json:"validHttpVersions,omitempty" tf:"valid_http_versions,omitempty"`

	// Accepted status codes. If unset, defaults to 2xx.
	// +kubebuilder:validation:Optional
	ValidStatusCodes []*float64 `json:"validStatusCodes,omitempty" tf:"valid_status_codes,omitempty"`
}

type PingObservation struct {
}

type PingParameters struct {

	// Set the DF-bit in the IP-header. Only works with ipV4. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DontFragment *bool `json:"dontFragment,omitempty" tf:"dont_fragment,omitempty"`

	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Payload size. Defaults to `0`.
	// +kubebuilder:validation:Optional
	PayloadSize *float64 `json:"payloadSize,omitempty" tf:"payload_size,omitempty"`

	// Source IP address.
	// +kubebuilder:validation:Optional
	SourceIPAddress *string `json:"sourceIpAddress,omitempty" tf:"source_ip_address,omitempty"`
}

type QueryResponseObservation struct {
}

type QueryResponseParameters struct {

	// Response to expect.
	// +kubebuilder:validation:Required
	Expect *string `json:"expect" tf:"expect,omitempty"`

	// Data to send.
	// +kubebuilder:validation:Required
	Send *string `json:"send" tf:"send,omitempty"`

	// Upgrade TCP connection to TLS. Defaults to `false`.
	// +kubebuilder:validation:Optional
	StartTLS *bool `json:"startTls,omitempty" tf:"start_tls,omitempty"`
}

type SettingsObservation struct {
}

type SettingsParameters struct {

	// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
	// +kubebuilder:validation:Optional
	DNS []DNSParameters `json:"dns,omitempty" tf:"dns,omitempty"`

	// Settings for HTTP check. The target must be a URL (http or https).
	// +kubebuilder:validation:Optional
	HTTP []HTTPParameters `json:"http,omitempty" tf:"http,omitempty"`

	// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
	// +kubebuilder:validation:Optional
	Ping []PingParameters `json:"ping,omitempty" tf:"ping,omitempty"`

	// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	// +kubebuilder:validation:Optional
	TCP []TCPParameters `json:"tcp,omitempty" tf:"tcp,omitempty"`

	// Settings for traceroute check. The target must be a valid hostname or IP address
	// +kubebuilder:validation:Optional
	Traceroute []TracerouteParameters `json:"traceroute,omitempty" tf:"traceroute,omitempty"`
}

type TCPObservation struct {
}

type TCPParameters struct {

	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The query sent in the TCP probe and the expected associated response.
	// +kubebuilder:validation:Optional
	QueryResponse []QueryResponseParameters `json:"queryResponse,omitempty" tf:"query_response,omitempty"`

	// Source IP address.
	// +kubebuilder:validation:Optional
	SourceIPAddress *string `json:"sourceIpAddress,omitempty" tf:"source_ip_address,omitempty"`

	// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
	// +kubebuilder:validation:Optional
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// TLS config.
	// +kubebuilder:validation:Optional
	TLSConfig []TCPTLSConfigParameters `json:"tlsConfig,omitempty" tf:"tls_config,omitempty"`
}

type TCPTLSConfigObservation struct {
}

type TCPTLSConfigParameters struct {

	// CA certificate in PEM format.
	// +kubebuilder:validation:Optional
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// Client certificate in PEM format.
	// +kubebuilder:validation:Optional
	ClientCert *string `json:"clientCert,omitempty" tf:"client_cert,omitempty"`

	// Client key in PEM format.
	// +kubebuilder:validation:Optional
	ClientKeySecretRef *v1.SecretKeySelector `json:"clientKeySecretRef,omitempty" tf:"-"`

	// Disable target certificate validation. Defaults to `false`.
	// +kubebuilder:validation:Optional
	InsecureSkipVerify *bool `json:"insecureSkipVerify,omitempty" tf:"insecure_skip_verify,omitempty"`

	// Used to verify the hostname for the targets.
	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type TLSConfigObservation struct {
}

type TLSConfigParameters struct {

	// CA certificate in PEM format.
	// +kubebuilder:validation:Optional
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// Client certificate in PEM format.
	// +kubebuilder:validation:Optional
	ClientCert *string `json:"clientCert,omitempty" tf:"client_cert,omitempty"`

	// Client key in PEM format.
	// +kubebuilder:validation:Optional
	ClientKeySecretRef *v1.SecretKeySelector `json:"clientKeySecretRef,omitempty" tf:"-"`

	// Disable target certificate validation. Defaults to `false`.
	// +kubebuilder:validation:Optional
	InsecureSkipVerify *bool `json:"insecureSkipVerify,omitempty" tf:"insecure_skip_verify,omitempty"`

	// Used to verify the hostname for the targets.
	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type TracerouteObservation struct {
}

type TracerouteParameters struct {

	// Maximum TTL for the trace Defaults to `64`.
	// +kubebuilder:validation:Optional
	MaxHops *float64 `json:"maxHops,omitempty" tf:"max_hops,omitempty"`

	// Maximum number of hosts to travers that give no response Defaults to `15`.
	// +kubebuilder:validation:Optional
	MaxUnknownHops *float64 `json:"maxUnknownHops,omitempty" tf:"max_unknown_hops,omitempty"`

	// Reverse lookup hostnames from IP addresses Defaults to `true`.
	// +kubebuilder:validation:Optional
	PtrLookup *bool `json:"ptrLookup,omitempty" tf:"ptr_lookup,omitempty"`
}

type ValidateAdditionalRrsObservation struct {
}

type ValidateAdditionalRrsParameters struct {

	// Fail if value matches regex.
	// +kubebuilder:validation:Optional
	FailIfMatchesRegexp []*string `json:"failIfMatchesRegexp,omitempty" tf:"fail_if_matches_regexp,omitempty"`

	// Fail if value does not match regex.
	// +kubebuilder:validation:Optional
	FailIfNotMatchesRegexp []*string `json:"failIfNotMatchesRegexp,omitempty" tf:"fail_if_not_matches_regexp,omitempty"`
}

type ValidateAnswerRrsObservation struct {
}

type ValidateAnswerRrsParameters struct {

	// Fail if value matches regex.
	// +kubebuilder:validation:Optional
	FailIfMatchesRegexp []*string `json:"failIfMatchesRegexp,omitempty" tf:"fail_if_matches_regexp,omitempty"`

	// Fail if value does not match regex.
	// +kubebuilder:validation:Optional
	FailIfNotMatchesRegexp []*string `json:"failIfNotMatchesRegexp,omitempty" tf:"fail_if_not_matches_regexp,omitempty"`
}

type ValidateAuthorityRrsObservation struct {
}

type ValidateAuthorityRrsParameters struct {

	// Fail if value matches regex.
	// +kubebuilder:validation:Optional
	FailIfMatchesRegexp []*string `json:"failIfMatchesRegexp,omitempty" tf:"fail_if_matches_regexp,omitempty"`

	// Fail if value does not match regex.
	// +kubebuilder:validation:Optional
	FailIfNotMatchesRegexp []*string `json:"failIfNotMatchesRegexp,omitempty" tf:"fail_if_not_matches_regexp,omitempty"`
}

// CheckSpec defines the desired state of Check
type CheckSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CheckParameters `json:"forProvider"`
}

// CheckStatus defines the observed state of Check.
type CheckStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CheckObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Check is the Schema for the Checks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type Check struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CheckSpec   `json:"spec"`
	Status            CheckStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CheckList contains a list of Checks
type CheckList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Check `json:"items"`
}

// Repository type metadata.
var (
	Check_Kind             = "Check"
	Check_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Check_Kind}.String()
	Check_KindAPIVersion   = Check_Kind + "." + CRDGroupVersion.String()
	Check_GroupVersionKind = CRDGroupVersion.WithKind(Check_Kind)
)

func init() {
	SchemeBuilder.Register(&Check{}, &CheckList{})
}
