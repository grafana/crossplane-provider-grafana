/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceAccountPermissionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceAccountPermissionParameters struct {

	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	// +crossplane:generate:reference:type=github.com/grafana/crossplane-provider-grafana/apis/oss/v1alpha1.Organization
	// +crossplane:generate:reference:refFieldName=OrganizationRef
	// +crossplane:generate:reference:selectorFieldName=OrganizationSelector
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Reference to a Organization in oss to populate orgId.
	// +kubebuilder:validation:Optional
	OrganizationRef *v1.Reference `json:"organizationRef,omitempty" tf:"-"`

	// Selector for a Organization in oss to populate orgId.
	// +kubebuilder:validation:Optional
	OrganizationSelector *v1.Selector `json:"organizationSelector,omitempty" tf:"-"`

	// The permission items to add/update. Items that are omitted from the list will be removed.
	// +kubebuilder:validation:Required
	Permissions []ServiceAccountPermissionPermissionsParameters `json:"permissions" tf:"permissions,omitempty"`

	// The id of the service account.
	// +crossplane:generate:reference:type=github.com/grafana/crossplane-provider-grafana/apis/oss/v1alpha1.ServiceAccount
	// +crossplane:generate:reference:refFieldName=ServiceAccountRef
	// +crossplane:generate:reference:selectorFieldName=ServiceAccountSelector
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Reference to a ServiceAccount in oss to populate serviceAccountId.
	// +kubebuilder:validation:Optional
	ServiceAccountRef *v1.Reference `json:"serviceAccountRef,omitempty" tf:"-"`

	// Selector for a ServiceAccount in oss to populate serviceAccountId.
	// +kubebuilder:validation:Optional
	ServiceAccountSelector *v1.Selector `json:"serviceAccountSelector,omitempty" tf:"-"`
}

type ServiceAccountPermissionPermissionsObservation struct {
}

type ServiceAccountPermissionPermissionsParameters struct {

	// Permission to associate with item. Must be `Edit` or `Admin`.
	// +kubebuilder:validation:Required
	Permission *string `json:"permission" tf:"permission,omitempty"`

	// ID of the team to manage permissions for. Specify either this or `user_id`. Defaults to `0`.
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// ID of the user or service account to manage permissions for. Specify either this or `team_id`. Defaults to `0`.
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

// ServiceAccountPermissionSpec defines the desired state of ServiceAccountPermission
type ServiceAccountPermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceAccountPermissionParameters `json:"forProvider"`
}

// ServiceAccountPermissionStatus defines the observed state of ServiceAccountPermission.
type ServiceAccountPermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceAccountPermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAccountPermission is the Schema for the ServiceAccountPermissions API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type ServiceAccountPermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceAccountPermissionSpec   `json:"spec"`
	Status            ServiceAccountPermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAccountPermissionList contains a list of ServiceAccountPermissions
type ServiceAccountPermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceAccountPermission `json:"items"`
}

// Repository type metadata.
var (
	ServiceAccountPermission_Kind             = "ServiceAccountPermission"
	ServiceAccountPermission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceAccountPermission_Kind}.String()
	ServiceAccountPermission_KindAPIVersion   = ServiceAccountPermission_Kind + "." + CRDGroupVersion.String()
	ServiceAccountPermission_GroupVersionKind = CRDGroupVersion.WithKind(ServiceAccountPermission_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceAccountPermission{}, &ServiceAccountPermissionList{})
}
