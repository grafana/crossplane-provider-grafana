/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	grafana "github.com/grafana/crossplane-provider-grafana/config/grafana"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Annotation.
func (mg *Annotation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DashboardUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.ForProvider.DashboardRef,
		Selector:     mg.Spec.ForProvider.DashboardSelector,
		To: reference.To{
			List:    &DashboardList{},
			Managed: &Dashboard{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DashboardUID")
	}
	mg.Spec.ForProvider.DashboardUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DashboardRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DashboardUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.InitProvider.DashboardRef,
		Selector:     mg.Spec.InitProvider.DashboardSelector,
		To: reference.To{
			List:    &DashboardList{},
			Managed: &Dashboard{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DashboardUID")
	}
	mg.Spec.InitProvider.DashboardUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DashboardRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Dashboard.
func (mg *Dashboard) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Folder),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.ForProvider.FolderRef,
		Selector:     mg.Spec.ForProvider.FolderSelector,
		To: reference.To{
			List:    &FolderList{},
			Managed: &Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Folder")
	}
	mg.Spec.ForProvider.Folder = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Folder),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.InitProvider.FolderRef,
		Selector:     mg.Spec.InitProvider.FolderSelector,
		To: reference.To{
			List:    &FolderList{},
			Managed: &Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Folder")
	}
	mg.Spec.InitProvider.Folder = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DashboardPermission.
func (mg *DashboardPermission) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DashboardUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.ForProvider.DashboardRef,
		Selector:     mg.Spec.ForProvider.DashboardSelector,
		To: reference.To{
			List:    &DashboardList{},
			Managed: &Dashboard{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DashboardUID")
	}
	mg.Spec.ForProvider.DashboardUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DashboardRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Permissions[i3].TeamID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Permissions[i3].TeamRef,
			Selector:     mg.Spec.ForProvider.Permissions[i3].TeamSelector,
			To: reference.To{
				List:    &TeamList{},
				Managed: &Team{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Permissions[i3].TeamID")
		}
		mg.Spec.ForProvider.Permissions[i3].TeamID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Permissions[i3].TeamRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Permissions[i3].UserID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Permissions[i3].UserRef,
			Selector:     mg.Spec.ForProvider.Permissions[i3].UserSelector,
			To: reference.To{
				List:    &UserList{},
				Managed: &User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Permissions[i3].UserID")
		}
		mg.Spec.ForProvider.Permissions[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Permissions[i3].UserRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DashboardUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.InitProvider.DashboardRef,
		Selector:     mg.Spec.InitProvider.DashboardSelector,
		To: reference.To{
			List:    &DashboardList{},
			Managed: &Dashboard{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DashboardUID")
	}
	mg.Spec.InitProvider.DashboardUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DashboardRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Permissions[i3].TeamID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Permissions[i3].TeamRef,
			Selector:     mg.Spec.InitProvider.Permissions[i3].TeamSelector,
			To: reference.To{
				List:    &TeamList{},
				Managed: &Team{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Permissions[i3].TeamID")
		}
		mg.Spec.InitProvider.Permissions[i3].TeamID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Permissions[i3].TeamRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Permissions[i3].UserID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Permissions[i3].UserRef,
			Selector:     mg.Spec.InitProvider.Permissions[i3].UserSelector,
			To: reference.To{
				List:    &UserList{},
				Managed: &User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Permissions[i3].UserID")
		}
		mg.Spec.InitProvider.Permissions[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Permissions[i3].UserRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DashboardPublic.
func (mg *DashboardPublic) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DashboardUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.ForProvider.DashboardRef,
		Selector:     mg.Spec.ForProvider.DashboardSelector,
		To: reference.To{
			List:    &DashboardList{},
			Managed: &Dashboard{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DashboardUID")
	}
	mg.Spec.ForProvider.DashboardUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DashboardRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DashboardUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.InitProvider.DashboardRef,
		Selector:     mg.Spec.InitProvider.DashboardSelector,
		To: reference.To{
			List:    &DashboardList{},
			Managed: &Dashboard{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DashboardUID")
	}
	mg.Spec.InitProvider.DashboardUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DashboardRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSource.
func (mg *DataSource) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Folder.
func (mg *Folder) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ParentFolderUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.ForProvider.FolderRef,
		Selector:     mg.Spec.ForProvider.FolderSelector,
		To: reference.To{
			List:    &FolderList{},
			Managed: &Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ParentFolderUID")
	}
	mg.Spec.ForProvider.ParentFolderUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ParentFolderUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.InitProvider.FolderRef,
		Selector:     mg.Spec.InitProvider.FolderSelector,
		To: reference.To{
			List:    &FolderList{},
			Managed: &Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ParentFolderUID")
	}
	mg.Spec.InitProvider.ParentFolderUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FolderPermission.
func (mg *FolderPermission) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.ForProvider.FolderRef,
		Selector:     mg.Spec.ForProvider.FolderSelector,
		To: reference.To{
			List:    &FolderList{},
			Managed: &Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderUID")
	}
	mg.Spec.ForProvider.FolderUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Permissions[i3].TeamID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Permissions[i3].TeamRef,
			Selector:     mg.Spec.ForProvider.Permissions[i3].TeamSelector,
			To: reference.To{
				List:    &TeamList{},
				Managed: &Team{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Permissions[i3].TeamID")
		}
		mg.Spec.ForProvider.Permissions[i3].TeamID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Permissions[i3].TeamRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Permissions[i3].UserID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Permissions[i3].UserRef,
			Selector:     mg.Spec.ForProvider.Permissions[i3].UserSelector,
			To: reference.To{
				List:    &UserList{},
				Managed: &User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Permissions[i3].UserID")
		}
		mg.Spec.ForProvider.Permissions[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Permissions[i3].UserRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FolderUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.InitProvider.FolderRef,
		Selector:     mg.Spec.InitProvider.FolderSelector,
		To: reference.To{
			List:    &FolderList{},
			Managed: &Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FolderUID")
	}
	mg.Spec.InitProvider.FolderUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Permissions[i3].TeamID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Permissions[i3].TeamRef,
			Selector:     mg.Spec.InitProvider.Permissions[i3].TeamSelector,
			To: reference.To{
				List:    &TeamList{},
				Managed: &Team{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Permissions[i3].TeamID")
		}
		mg.Spec.InitProvider.Permissions[i3].TeamID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Permissions[i3].TeamRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Permissions[i3].UserID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Permissions[i3].UserRef,
			Selector:     mg.Spec.InitProvider.Permissions[i3].UserSelector,
			To: reference.To{
				List:    &UserList{},
				Managed: &User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Permissions[i3].UserID")
		}
		mg.Spec.InitProvider.Permissions[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Permissions[i3].UserRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LibraryPanel.
func (mg *LibraryPanel) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.ForProvider.FolderRef,
		Selector:     mg.Spec.ForProvider.FolderSelector,
		To: reference.To{
			List:    &FolderList{},
			Managed: &Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderUID")
	}
	mg.Spec.ForProvider.FolderUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FolderUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.InitProvider.FolderRef,
		Selector:     mg.Spec.InitProvider.FolderSelector,
		To: reference.To{
			List:    &FolderList{},
			Managed: &Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FolderUID")
	}
	mg.Spec.InitProvider.FolderUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this OrganizationPreferences.
func (mg *OrganizationPreferences) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Playlist.
func (mg *Playlist) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServiceAccount.
func (mg *ServiceAccount) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServiceAccountPermission.
func (mg *ServiceAccountPermission) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Permissions[i3].TeamID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Permissions[i3].TeamRef,
			Selector:     mg.Spec.ForProvider.Permissions[i3].TeamSelector,
			To: reference.To{
				List:    &TeamList{},
				Managed: &Team{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Permissions[i3].TeamID")
		}
		mg.Spec.ForProvider.Permissions[i3].TeamID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Permissions[i3].TeamRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Permissions[i3].UserID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Permissions[i3].UserRef,
			Selector:     mg.Spec.ForProvider.Permissions[i3].UserSelector,
			To: reference.To{
				List:    &UserList{},
				Managed: &User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Permissions[i3].UserID")
		}
		mg.Spec.ForProvider.Permissions[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Permissions[i3].UserRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceAccountRef,
		Selector:     mg.Spec.ForProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &ServiceAccountList{},
			Managed: &ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceAccountID")
	}
	mg.Spec.ForProvider.ServiceAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceAccountRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Permissions[i3].TeamID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Permissions[i3].TeamRef,
			Selector:     mg.Spec.InitProvider.Permissions[i3].TeamSelector,
			To: reference.To{
				List:    &TeamList{},
				Managed: &Team{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Permissions[i3].TeamID")
		}
		mg.Spec.InitProvider.Permissions[i3].TeamID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Permissions[i3].TeamRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Permissions[i3].UserID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Permissions[i3].UserRef,
			Selector:     mg.Spec.InitProvider.Permissions[i3].UserSelector,
			To: reference.To{
				List:    &UserList{},
				Managed: &User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Permissions[i3].UserID")
		}
		mg.Spec.InitProvider.Permissions[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Permissions[i3].UserRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServiceAccountRef,
		Selector:     mg.Spec.InitProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &ServiceAccountList{},
			Managed: &ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceAccountID")
	}
	mg.Spec.InitProvider.ServiceAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceAccountRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServiceAccountToken.
func (mg *ServiceAccountToken) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceAccountRef,
		Selector:     mg.Spec.ForProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &ServiceAccountList{},
			Managed: &ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceAccountID")
	}
	mg.Spec.ForProvider.ServiceAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceAccountRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServiceAccountRef,
		Selector:     mg.Spec.InitProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &ServiceAccountList{},
			Managed: &ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceAccountID")
	}
	mg.Spec.InitProvider.ServiceAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceAccountRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Team.
func (mg *Team) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Members),
		Extract:       grafana.FieldExtractor("email"),
		References:    mg.Spec.ForProvider.MemberRefs,
		Selector:      mg.Spec.ForProvider.MemberSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Members")
	}
	mg.Spec.ForProvider.Members = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.MemberRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Members),
		Extract:       grafana.FieldExtractor("email"),
		References:    mg.Spec.InitProvider.MemberRefs,
		Selector:      mg.Spec.InitProvider.MemberSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Members")
	}
	mg.Spec.InitProvider.Members = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.MemberRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}
