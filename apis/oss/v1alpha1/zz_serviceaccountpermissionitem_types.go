/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceAccountPermissionItemInitParameters struct {

	// (String) The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
	// The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
	// +crossplane:generate:reference:type=github.com/grafana/crossplane-provider-grafana/apis/oss/v1alpha1.Organization
	// +crossplane:generate:reference:refFieldName=OrganizationRef
	// +crossplane:generate:reference:selectorFieldName=OrganizationSelector
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Reference to a Organization in oss to populate orgId.
	// +kubebuilder:validation:Optional
	OrganizationRef *v1.Reference `json:"organizationRef,omitempty" tf:"-"`

	// Selector for a Organization in oss to populate orgId.
	// +kubebuilder:validation:Optional
	OrganizationSelector *v1.Selector `json:"organizationSelector,omitempty" tf:"-"`

	// (String) the permission to be assigned
	// the permission to be assigned
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// (String) The ID of the service account.
	// The ID of the service account.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// (String) the team onto which the permission is to be assigned
	// the team onto which the permission is to be assigned
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// (String) the user or service account onto which the permission is to be assigned
	// the user or service account onto which the permission is to be assigned
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ServiceAccountPermissionItemObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
	// The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) the permission to be assigned
	// the permission to be assigned
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// (String) The ID of the service account.
	// The ID of the service account.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// (String) the team onto which the permission is to be assigned
	// the team onto which the permission is to be assigned
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// (String) the user or service account onto which the permission is to be assigned
	// the user or service account onto which the permission is to be assigned
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ServiceAccountPermissionItemParameters struct {

	// (String) The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
	// The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
	// +crossplane:generate:reference:type=github.com/grafana/crossplane-provider-grafana/apis/oss/v1alpha1.Organization
	// +crossplane:generate:reference:refFieldName=OrganizationRef
	// +crossplane:generate:reference:selectorFieldName=OrganizationSelector
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Reference to a Organization in oss to populate orgId.
	// +kubebuilder:validation:Optional
	OrganizationRef *v1.Reference `json:"organizationRef,omitempty" tf:"-"`

	// Selector for a Organization in oss to populate orgId.
	// +kubebuilder:validation:Optional
	OrganizationSelector *v1.Selector `json:"organizationSelector,omitempty" tf:"-"`

	// (String) the permission to be assigned
	// the permission to be assigned
	// +kubebuilder:validation:Optional
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// (String) The ID of the service account.
	// The ID of the service account.
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// (String) the team onto which the permission is to be assigned
	// the team onto which the permission is to be assigned
	// +kubebuilder:validation:Optional
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// (String) the user or service account onto which the permission is to be assigned
	// the user or service account onto which the permission is to be assigned
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

// ServiceAccountPermissionItemSpec defines the desired state of ServiceAccountPermissionItem
type ServiceAccountPermissionItemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceAccountPermissionItemParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceAccountPermissionItemInitParameters `json:"initProvider,omitempty"`
}

// ServiceAccountPermissionItemStatus defines the observed state of ServiceAccountPermissionItem.
type ServiceAccountPermissionItemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceAccountPermissionItemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceAccountPermissionItem is the Schema for the ServiceAccountPermissionItems API. Manages a single permission item for a service account. Conflicts with the "grafana_service_account_permission" resource which manages the entire set of permissions for a service account. Official documentation https://grafana.com/docs/grafana/latest/administration/service-accounts/#manage-users-and-teams-permissions-for-a-service-account-in-grafana
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type ServiceAccountPermissionItem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permission) || (has(self.initProvider) && has(self.initProvider.permission))",message="spec.forProvider.permission is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceAccountId) || (has(self.initProvider) && has(self.initProvider.serviceAccountId))",message="spec.forProvider.serviceAccountId is a required parameter"
	Spec   ServiceAccountPermissionItemSpec   `json:"spec"`
	Status ServiceAccountPermissionItemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAccountPermissionItemList contains a list of ServiceAccountPermissionItems
type ServiceAccountPermissionItemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceAccountPermissionItem `json:"items"`
}

// Repository type metadata.
var (
	ServiceAccountPermissionItem_Kind             = "ServiceAccountPermissionItem"
	ServiceAccountPermissionItem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceAccountPermissionItem_Kind}.String()
	ServiceAccountPermissionItem_KindAPIVersion   = ServiceAccountPermissionItem_Kind + "." + CRDGroupVersion.String()
	ServiceAccountPermissionItem_GroupVersionKind = CRDGroupVersion.WithKind(ServiceAccountPermissionItem_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceAccountPermissionItem{}, &ServiceAccountPermissionItemList{})
}
