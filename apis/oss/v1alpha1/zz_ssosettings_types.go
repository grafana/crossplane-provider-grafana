/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigInitParameters struct {

	// (Block List, Min: 1) The LDAP servers configuration. (see below for nested schema)
	// The LDAP servers configuration.
	Servers []ServersInitParameters `json:"servers,omitempty" tf:"servers,omitempty"`
}

type ConfigObservation struct {

	// (Block List, Min: 1) The LDAP servers configuration. (see below for nested schema)
	// The LDAP servers configuration.
	Servers []ServersObservation `json:"servers,omitempty" tf:"servers,omitempty"`
}

type ConfigParameters struct {

	// (Block List, Min: 1) The LDAP servers configuration. (see below for nested schema)
	// The LDAP servers configuration.
	// +kubebuilder:validation:Optional
	Servers []ServersParameters `json:"servers" tf:"servers,omitempty"`
}

type GroupMappingsInitParameters struct {

	// (Boolean) If set to true, it makes the user of group_dn Grafana server admin.
	// If set to true, it makes the user of group_dn Grafana server admin.
	GrafanaAdmin *bool `json:"grafanaAdmin,omitempty" tf:"grafana_admin,omitempty"`

	// (String) LDAP distinguished name (DN) of LDAP group. If you want to match all (or no LDAP groups) then you can use wildcard ("*").
	// LDAP distinguished name (DN) of LDAP group. If you want to match all (or no LDAP groups) then you can use wildcard ("*").
	GroupDn *string `json:"groupDn,omitempty" tf:"group_dn,omitempty"`

	// (Number) The Grafana organization database id.
	// The Grafana organization database id.
	OrgID *float64 `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) Assign users of group_dn the organization role Admin, Editor, or Viewer.
	// Assign users of group_dn the organization role Admin, Editor, or Viewer.
	OrgRole *string `json:"orgRole,omitempty" tf:"org_role,omitempty"`
}

type GroupMappingsObservation struct {

	// (Boolean) If set to true, it makes the user of group_dn Grafana server admin.
	// If set to true, it makes the user of group_dn Grafana server admin.
	GrafanaAdmin *bool `json:"grafanaAdmin,omitempty" tf:"grafana_admin,omitempty"`

	// (String) LDAP distinguished name (DN) of LDAP group. If you want to match all (or no LDAP groups) then you can use wildcard ("*").
	// LDAP distinguished name (DN) of LDAP group. If you want to match all (or no LDAP groups) then you can use wildcard ("*").
	GroupDn *string `json:"groupDn,omitempty" tf:"group_dn,omitempty"`

	// (Number) The Grafana organization database id.
	// The Grafana organization database id.
	OrgID *float64 `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) Assign users of group_dn the organization role Admin, Editor, or Viewer.
	// Assign users of group_dn the organization role Admin, Editor, or Viewer.
	OrgRole *string `json:"orgRole,omitempty" tf:"org_role,omitempty"`
}

type GroupMappingsParameters struct {

	// (Boolean) If set to true, it makes the user of group_dn Grafana server admin.
	// If set to true, it makes the user of group_dn Grafana server admin.
	// +kubebuilder:validation:Optional
	GrafanaAdmin *bool `json:"grafanaAdmin,omitempty" tf:"grafana_admin,omitempty"`

	// (String) LDAP distinguished name (DN) of LDAP group. If you want to match all (or no LDAP groups) then you can use wildcard ("*").
	// LDAP distinguished name (DN) of LDAP group. If you want to match all (or no LDAP groups) then you can use wildcard ("*").
	// +kubebuilder:validation:Optional
	GroupDn *string `json:"groupDn" tf:"group_dn,omitempty"`

	// (Number) The Grafana organization database id.
	// The Grafana organization database id.
	// +kubebuilder:validation:Optional
	OrgID *float64 `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) Assign users of group_dn the organization role Admin, Editor, or Viewer.
	// Assign users of group_dn the organization role Admin, Editor, or Viewer.
	// +kubebuilder:validation:Optional
	OrgRole *string `json:"orgRole" tf:"org_role,omitempty"`
}

type LdapSettingsInitParameters struct {

	// (Boolean) Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	// Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// (Block List, Min: 1, Max: 1) The LDAP configuration. (see below for nested schema)
	// The LDAP configuration.
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// (Boolean) Define whether this configuration is enabled for LDAP. Defaults to true.
	// Define whether this configuration is enabled for LDAP. Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from LDAP.
	// Prevent synchronizing users’ organization roles from LDAP.
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`
}

type LdapSettingsObservation struct {

	// (Boolean) Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	// Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// (Block List, Min: 1, Max: 1) The LDAP configuration. (see below for nested schema)
	// The LDAP configuration.
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// (Boolean) Define whether this configuration is enabled for LDAP. Defaults to true.
	// Define whether this configuration is enabled for LDAP. Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from LDAP.
	// Prevent synchronizing users’ organization roles from LDAP.
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`
}

type LdapSettingsParameters struct {

	// (Boolean) Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	// Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	// +kubebuilder:validation:Optional
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// (Block List, Min: 1, Max: 1) The LDAP configuration. (see below for nested schema)
	// The LDAP configuration.
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config" tf:"config,omitempty"`

	// (Boolean) Define whether this configuration is enabled for LDAP. Defaults to true.
	// Define whether this configuration is enabled for LDAP. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from LDAP.
	// Prevent synchronizing users’ organization roles from LDAP.
	// +kubebuilder:validation:Optional
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`
}

type Oauth2SettingsInitParameters struct {

	// (String) The user information endpoint of your OAuth2 provider. Required for okta and generic_oauth providers.
	// The user information endpoint of your OAuth2 provider. Required for okta and generic_oauth providers.
	APIURL *string `json:"apiUrl,omitempty" tf:"api_url,omitempty"`

	// (Boolean) If enabled, it will automatically sync the Grafana server administrator role.
	// If enabled, it will automatically sync the Grafana server administrator role.
	AllowAssignGrafanaAdmin *bool `json:"allowAssignGrafanaAdmin,omitempty" tf:"allow_assign_grafana_admin,omitempty"`

	// (Boolean) Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	// If not enabled, only existing Grafana users can log in using OAuth.
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// or space-separated domains. The user should belong to at least one domain to log in.
	// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
	AllowedDomains *string `json:"allowedDomains,omitempty" tf:"allowed_domains,omitempty"`

	// or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	AllowedGroups *string `json:"allowedGroups,omitempty" tf:"allowed_groups,omitempty"`

	// or space-separated organizations. The user should be a member of at least one organization to log in.
	// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
	AllowedOrganizations *string `json:"allowedOrganizations,omitempty" tf:"allowed_organizations,omitempty"`

	// (String) It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	// It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	AuthStyle *string `json:"authStyle,omitempty" tf:"auth_style,omitempty"`

	// (String) The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// (Boolean) Log in automatically, skipping the login screen.
	// Log in automatically, skipping the login screen.
	AutoLogin *bool `json:"autoLogin,omitempty" tf:"auto_login,omitempty"`

	// (String) The client Id of your OAuth2 app.
	// The client Id of your OAuth2 app.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String, Sensitive) The client secret of your OAuth2 app.
	// The client secret of your OAuth2 app.
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// (Map of String) Custom fields to configure for OAuth2 such as the force_use_graph_api field.
	// Custom fields to configure for OAuth2 such as the [force_use_graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
	// +mapType=granular
	Custom map[string]*string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (Boolean) Define allowed groups.
	// Define allowed groups.
	DefineAllowedGroups *bool `json:"defineAllowedGroups,omitempty" tf:"define_allowed_groups,omitempty"`

	// (Boolean) Define allowed teams ids.
	// Define allowed teams ids.
	DefineAllowedTeamsIds *bool `json:"defineAllowedTeamsIds,omitempty" tf:"define_allowed_teams_ids,omitempty"`

	// (String) Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	EmailAttributeName *string `json:"emailAttributeName,omitempty" tf:"email_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	EmailAttributePath *string `json:"emailAttributePath,omitempty" tf:"email_attribute_path,omitempty"`

	// (Boolean) If enabled, no scopes will be sent to the OAuth2 provider.
	// If enabled, no scopes will be sent to the OAuth2 provider.
	EmptyScopes *bool `json:"emptyScopes,omitempty" tf:"empty_scopes,omitempty"`

	// (Boolean) Define whether this configuration is enabled for LDAP. Defaults to true.
	// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	// JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	GroupsAttributePath *string `json:"groupsAttributePath,omitempty" tf:"groups_attribute_path,omitempty"`

	// (String) The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	IDTokenAttributeName *string `json:"idTokenAttributeName,omitempty" tf:"id_token_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	LoginAttributePath *string `json:"loginAttributePath,omitempty" tf:"login_attribute_path,omitempty"`

	// (String) Helpful if you use more than one identity providers or SSO protocols.
	// Helpful if you use more than one identity providers or SSO protocols.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	NameAttributePath *string `json:"nameAttributePath,omitempty" tf:"name_attribute_path,omitempty"`

	// (String) JMESPath expression to use for the organization mapping lookup from the user ID token. The extracted list will be used for the organization mapping (to match "Organization" in the "org_mapping"). Only applicable to Generic OAuth and Okta.
	// JMESPath expression to use for the organization mapping lookup from the user ID token. The extracted list will be used for the organization mapping (to match "Organization" in the "org_mapping"). Only applicable to Generic OAuth and Okta.
	OrgAttributePath *string `json:"orgAttributePath,omitempty" tf:"org_attribute_path,omitempty"`

	// or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
	// List of comma- or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
	OrgMapping *string `json:"orgMapping,omitempty" tf:"org_mapping,omitempty"`

	// (String) JMESPath expression to use for Grafana role lookup.
	// JMESPath expression to use for Grafana role lookup.
	RoleAttributePath *string `json:"roleAttributePath,omitempty" tf:"role_attribute_path,omitempty"`

	// (Boolean) If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	RoleAttributeStrict *bool `json:"roleAttributeStrict,omitempty" tf:"role_attribute_strict,omitempty"`

	// or space-separated OAuth2 scopes.
	// List of comma- or space-separated OAuth2 scopes.
	Scopes *string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) The URL to redirect the user to after signing out from Grafana.
	// The URL to redirect the user to after signing out from Grafana.
	SignoutRedirectURL *string `json:"signoutRedirectUrl,omitempty" tf:"signout_redirect_url,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from LDAP.
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`

	// (String) The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	TLSClientCA *string `json:"tlsClientCa,omitempty" tf:"tls_client_ca,omitempty"`

	// (String) The path to the certificate. Is not applicable on Grafana Cloud.
	// The path to the certificate. Is not applicable on Grafana Cloud.
	TLSClientCert *string `json:"tlsClientCert,omitempty" tf:"tls_client_cert,omitempty"`

	// (String) The path to the key. Is not applicable on Grafana Cloud.
	// The path to the key. Is not applicable on Grafana Cloud.
	TLSClientKey *string `json:"tlsClientKey,omitempty" tf:"tls_client_key,omitempty"`

	// in-the-middle attacks.
	// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
	TLSSkipVerifyInsecure *bool `json:"tlsSkipVerifyInsecure,omitempty" tf:"tls_skip_verify_insecure,omitempty"`

	// (String) String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	TeamIds *string `json:"teamIds,omitempty" tf:"team_ids,omitempty"`

	// (String) The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	TeamIdsAttributePath *string `json:"teamIdsAttributePath,omitempty" tf:"team_ids_attribute_path,omitempty"`

	// (String) The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	TeamsURL *string `json:"teamsUrl,omitempty" tf:"teams_url,omitempty"`

	// (String) The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`

	// (Boolean) If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	UsePkce *bool `json:"usePkce,omitempty" tf:"use_pkce,omitempty"`

	// (Boolean) If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	UseRefreshToken *bool `json:"useRefreshToken,omitempty" tf:"use_refresh_token,omitempty"`
}

type Oauth2SettingsObservation struct {

	// (String) The user information endpoint of your OAuth2 provider. Required for okta and generic_oauth providers.
	// The user information endpoint of your OAuth2 provider. Required for okta and generic_oauth providers.
	APIURL *string `json:"apiUrl,omitempty" tf:"api_url,omitempty"`

	// (Boolean) If enabled, it will automatically sync the Grafana server administrator role.
	// If enabled, it will automatically sync the Grafana server administrator role.
	AllowAssignGrafanaAdmin *bool `json:"allowAssignGrafanaAdmin,omitempty" tf:"allow_assign_grafana_admin,omitempty"`

	// (Boolean) Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	// If not enabled, only existing Grafana users can log in using OAuth.
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// or space-separated domains. The user should belong to at least one domain to log in.
	// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
	AllowedDomains *string `json:"allowedDomains,omitempty" tf:"allowed_domains,omitempty"`

	// or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	AllowedGroups *string `json:"allowedGroups,omitempty" tf:"allowed_groups,omitempty"`

	// or space-separated organizations. The user should be a member of at least one organization to log in.
	// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
	AllowedOrganizations *string `json:"allowedOrganizations,omitempty" tf:"allowed_organizations,omitempty"`

	// (String) It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	// It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	AuthStyle *string `json:"authStyle,omitempty" tf:"auth_style,omitempty"`

	// (String) The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// (Boolean) Log in automatically, skipping the login screen.
	// Log in automatically, skipping the login screen.
	AutoLogin *bool `json:"autoLogin,omitempty" tf:"auto_login,omitempty"`

	// (String) The client Id of your OAuth2 app.
	// The client Id of your OAuth2 app.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (Map of String) Custom fields to configure for OAuth2 such as the force_use_graph_api field.
	// Custom fields to configure for OAuth2 such as the [force_use_graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
	// +mapType=granular
	Custom map[string]*string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (Boolean) Define allowed groups.
	// Define allowed groups.
	DefineAllowedGroups *bool `json:"defineAllowedGroups,omitempty" tf:"define_allowed_groups,omitempty"`

	// (Boolean) Define allowed teams ids.
	// Define allowed teams ids.
	DefineAllowedTeamsIds *bool `json:"defineAllowedTeamsIds,omitempty" tf:"define_allowed_teams_ids,omitempty"`

	// (String) Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	EmailAttributeName *string `json:"emailAttributeName,omitempty" tf:"email_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	EmailAttributePath *string `json:"emailAttributePath,omitempty" tf:"email_attribute_path,omitempty"`

	// (Boolean) If enabled, no scopes will be sent to the OAuth2 provider.
	// If enabled, no scopes will be sent to the OAuth2 provider.
	EmptyScopes *bool `json:"emptyScopes,omitempty" tf:"empty_scopes,omitempty"`

	// (Boolean) Define whether this configuration is enabled for LDAP. Defaults to true.
	// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	// JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	GroupsAttributePath *string `json:"groupsAttributePath,omitempty" tf:"groups_attribute_path,omitempty"`

	// (String) The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	IDTokenAttributeName *string `json:"idTokenAttributeName,omitempty" tf:"id_token_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	LoginAttributePath *string `json:"loginAttributePath,omitempty" tf:"login_attribute_path,omitempty"`

	// (String) Helpful if you use more than one identity providers or SSO protocols.
	// Helpful if you use more than one identity providers or SSO protocols.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	NameAttributePath *string `json:"nameAttributePath,omitempty" tf:"name_attribute_path,omitempty"`

	// (String) JMESPath expression to use for the organization mapping lookup from the user ID token. The extracted list will be used for the organization mapping (to match "Organization" in the "org_mapping"). Only applicable to Generic OAuth and Okta.
	// JMESPath expression to use for the organization mapping lookup from the user ID token. The extracted list will be used for the organization mapping (to match "Organization" in the "org_mapping"). Only applicable to Generic OAuth and Okta.
	OrgAttributePath *string `json:"orgAttributePath,omitempty" tf:"org_attribute_path,omitempty"`

	// or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
	// List of comma- or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
	OrgMapping *string `json:"orgMapping,omitempty" tf:"org_mapping,omitempty"`

	// (String) JMESPath expression to use for Grafana role lookup.
	// JMESPath expression to use for Grafana role lookup.
	RoleAttributePath *string `json:"roleAttributePath,omitempty" tf:"role_attribute_path,omitempty"`

	// (Boolean) If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	RoleAttributeStrict *bool `json:"roleAttributeStrict,omitempty" tf:"role_attribute_strict,omitempty"`

	// or space-separated OAuth2 scopes.
	// List of comma- or space-separated OAuth2 scopes.
	Scopes *string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) The URL to redirect the user to after signing out from Grafana.
	// The URL to redirect the user to after signing out from Grafana.
	SignoutRedirectURL *string `json:"signoutRedirectUrl,omitempty" tf:"signout_redirect_url,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from LDAP.
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`

	// (String) The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	TLSClientCA *string `json:"tlsClientCa,omitempty" tf:"tls_client_ca,omitempty"`

	// (String) The path to the certificate. Is not applicable on Grafana Cloud.
	// The path to the certificate. Is not applicable on Grafana Cloud.
	TLSClientCert *string `json:"tlsClientCert,omitempty" tf:"tls_client_cert,omitempty"`

	// (String) The path to the key. Is not applicable on Grafana Cloud.
	// The path to the key. Is not applicable on Grafana Cloud.
	TLSClientKey *string `json:"tlsClientKey,omitempty" tf:"tls_client_key,omitempty"`

	// in-the-middle attacks.
	// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
	TLSSkipVerifyInsecure *bool `json:"tlsSkipVerifyInsecure,omitempty" tf:"tls_skip_verify_insecure,omitempty"`

	// (String) String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	TeamIds *string `json:"teamIds,omitempty" tf:"team_ids,omitempty"`

	// (String) The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	TeamIdsAttributePath *string `json:"teamIdsAttributePath,omitempty" tf:"team_ids_attribute_path,omitempty"`

	// (String) The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	TeamsURL *string `json:"teamsUrl,omitempty" tf:"teams_url,omitempty"`

	// (String) The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`

	// (Boolean) If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	UsePkce *bool `json:"usePkce,omitempty" tf:"use_pkce,omitempty"`

	// (Boolean) If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	UseRefreshToken *bool `json:"useRefreshToken,omitempty" tf:"use_refresh_token,omitempty"`
}

type Oauth2SettingsParameters struct {

	// (String) The user information endpoint of your OAuth2 provider. Required for okta and generic_oauth providers.
	// The user information endpoint of your OAuth2 provider. Required for okta and generic_oauth providers.
	// +kubebuilder:validation:Optional
	APIURL *string `json:"apiUrl,omitempty" tf:"api_url,omitempty"`

	// (Boolean) If enabled, it will automatically sync the Grafana server administrator role.
	// If enabled, it will automatically sync the Grafana server administrator role.
	// +kubebuilder:validation:Optional
	AllowAssignGrafanaAdmin *bool `json:"allowAssignGrafanaAdmin,omitempty" tf:"allow_assign_grafana_admin,omitempty"`

	// (Boolean) Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	// If not enabled, only existing Grafana users can log in using OAuth.
	// +kubebuilder:validation:Optional
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// or space-separated domains. The user should belong to at least one domain to log in.
	// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
	// +kubebuilder:validation:Optional
	AllowedDomains *string `json:"allowedDomains,omitempty" tf:"allowed_domains,omitempty"`

	// or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	// +kubebuilder:validation:Optional
	AllowedGroups *string `json:"allowedGroups,omitempty" tf:"allowed_groups,omitempty"`

	// or space-separated organizations. The user should be a member of at least one organization to log in.
	// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
	// +kubebuilder:validation:Optional
	AllowedOrganizations *string `json:"allowedOrganizations,omitempty" tf:"allowed_organizations,omitempty"`

	// (String) It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	// It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	// +kubebuilder:validation:Optional
	AuthStyle *string `json:"authStyle,omitempty" tf:"auth_style,omitempty"`

	// (String) The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// +kubebuilder:validation:Optional
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// (Boolean) Log in automatically, skipping the login screen.
	// Log in automatically, skipping the login screen.
	// +kubebuilder:validation:Optional
	AutoLogin *bool `json:"autoLogin,omitempty" tf:"auto_login,omitempty"`

	// (String) The client Id of your OAuth2 app.
	// The client Id of your OAuth2 app.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// (String, Sensitive) The client secret of your OAuth2 app.
	// The client secret of your OAuth2 app.
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// (Map of String) Custom fields to configure for OAuth2 such as the force_use_graph_api field.
	// Custom fields to configure for OAuth2 such as the [force_use_graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Custom map[string]*string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (Boolean) Define allowed groups.
	// Define allowed groups.
	// +kubebuilder:validation:Optional
	DefineAllowedGroups *bool `json:"defineAllowedGroups,omitempty" tf:"define_allowed_groups,omitempty"`

	// (Boolean) Define allowed teams ids.
	// Define allowed teams ids.
	// +kubebuilder:validation:Optional
	DefineAllowedTeamsIds *bool `json:"defineAllowedTeamsIds,omitempty" tf:"define_allowed_teams_ids,omitempty"`

	// (String) Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	EmailAttributeName *string `json:"emailAttributeName,omitempty" tf:"email_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	EmailAttributePath *string `json:"emailAttributePath,omitempty" tf:"email_attribute_path,omitempty"`

	// (Boolean) If enabled, no scopes will be sent to the OAuth2 provider.
	// If enabled, no scopes will be sent to the OAuth2 provider.
	// +kubebuilder:validation:Optional
	EmptyScopes *bool `json:"emptyScopes,omitempty" tf:"empty_scopes,omitempty"`

	// (Boolean) Define whether this configuration is enabled for LDAP. Defaults to true.
	// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	// JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	// +kubebuilder:validation:Optional
	GroupsAttributePath *string `json:"groupsAttributePath,omitempty" tf:"groups_attribute_path,omitempty"`

	// (String) The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	IDTokenAttributeName *string `json:"idTokenAttributeName,omitempty" tf:"id_token_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	LoginAttributePath *string `json:"loginAttributePath,omitempty" tf:"login_attribute_path,omitempty"`

	// (String) Helpful if you use more than one identity providers or SSO protocols.
	// Helpful if you use more than one identity providers or SSO protocols.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	NameAttributePath *string `json:"nameAttributePath,omitempty" tf:"name_attribute_path,omitempty"`

	// (String) JMESPath expression to use for the organization mapping lookup from the user ID token. The extracted list will be used for the organization mapping (to match "Organization" in the "org_mapping"). Only applicable to Generic OAuth and Okta.
	// JMESPath expression to use for the organization mapping lookup from the user ID token. The extracted list will be used for the organization mapping (to match "Organization" in the "org_mapping"). Only applicable to Generic OAuth and Okta.
	// +kubebuilder:validation:Optional
	OrgAttributePath *string `json:"orgAttributePath,omitempty" tf:"org_attribute_path,omitempty"`

	// or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
	// List of comma- or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
	// +kubebuilder:validation:Optional
	OrgMapping *string `json:"orgMapping,omitempty" tf:"org_mapping,omitempty"`

	// (String) JMESPath expression to use for Grafana role lookup.
	// JMESPath expression to use for Grafana role lookup.
	// +kubebuilder:validation:Optional
	RoleAttributePath *string `json:"roleAttributePath,omitempty" tf:"role_attribute_path,omitempty"`

	// (Boolean) If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	// +kubebuilder:validation:Optional
	RoleAttributeStrict *bool `json:"roleAttributeStrict,omitempty" tf:"role_attribute_strict,omitempty"`

	// or space-separated OAuth2 scopes.
	// List of comma- or space-separated OAuth2 scopes.
	// +kubebuilder:validation:Optional
	Scopes *string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) The URL to redirect the user to after signing out from Grafana.
	// The URL to redirect the user to after signing out from Grafana.
	// +kubebuilder:validation:Optional
	SignoutRedirectURL *string `json:"signoutRedirectUrl,omitempty" tf:"signout_redirect_url,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from LDAP.
	// Prevent synchronizing users’ organization roles from your IdP.
	// +kubebuilder:validation:Optional
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`

	// (String) The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	// +kubebuilder:validation:Optional
	TLSClientCA *string `json:"tlsClientCa,omitempty" tf:"tls_client_ca,omitempty"`

	// (String) The path to the certificate. Is not applicable on Grafana Cloud.
	// The path to the certificate. Is not applicable on Grafana Cloud.
	// +kubebuilder:validation:Optional
	TLSClientCert *string `json:"tlsClientCert,omitempty" tf:"tls_client_cert,omitempty"`

	// (String) The path to the key. Is not applicable on Grafana Cloud.
	// The path to the key. Is not applicable on Grafana Cloud.
	// +kubebuilder:validation:Optional
	TLSClientKey *string `json:"tlsClientKey,omitempty" tf:"tls_client_key,omitempty"`

	// in-the-middle attacks.
	// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
	// +kubebuilder:validation:Optional
	TLSSkipVerifyInsecure *bool `json:"tlsSkipVerifyInsecure,omitempty" tf:"tls_skip_verify_insecure,omitempty"`

	// (String) String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	// +kubebuilder:validation:Optional
	TeamIds *string `json:"teamIds,omitempty" tf:"team_ids,omitempty"`

	// (String) The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	TeamIdsAttributePath *string `json:"teamIdsAttributePath,omitempty" tf:"team_ids_attribute_path,omitempty"`

	// (String) The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	TeamsURL *string `json:"teamsUrl,omitempty" tf:"teams_url,omitempty"`

	// (String) The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// +kubebuilder:validation:Optional
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`

	// (Boolean) If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	// +kubebuilder:validation:Optional
	UsePkce *bool `json:"usePkce,omitempty" tf:"use_pkce,omitempty"`

	// (Boolean) If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	// +kubebuilder:validation:Optional
	UseRefreshToken *bool `json:"useRefreshToken,omitempty" tf:"use_refresh_token,omitempty"`
}

type SAMLSettingsInitParameters struct {

	// initiated login is allowed.
	// Whether SAML IdP-initiated login is allowed.
	AllowIdpInitiated *bool `json:"allowIdpInitiated,omitempty" tf:"allow_idp_initiated,omitempty"`

	// (Boolean) Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	// Whether to allow new Grafana user creation through SAML login. If set to false, then only existing Grafana users can log in with SAML.
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// or space-separated organizations. The user should be a member of at least one organization to log in.
	// List of comma- or space-separated organizations. User should be a member of at least one organization to log in.
	AllowedOrganizations *string `json:"allowedOrganizations,omitempty" tf:"allowed_organizations,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user email.
	// Friendly name or name of the attribute within the SAML assertion to use as the user email.
	AssertionAttributeEmail *string `json:"assertionAttributeEmail,omitempty" tf:"assertion_attribute_email,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user groups.
	// Friendly name or name of the attribute within the SAML assertion to use as the user groups.
	AssertionAttributeGroups *string `json:"assertionAttributeGroups,omitempty" tf:"assertion_attribute_groups,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
	// Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
	AssertionAttributeLogin *string `json:"assertionAttributeLogin,omitempty" tf:"assertion_attribute_login,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
	// Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
	AssertionAttributeName *string `json:"assertionAttributeName,omitempty" tf:"assertion_attribute_name,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user organization.
	// Friendly name or name of the attribute within the SAML assertion to use as the user organization.
	AssertionAttributeOrg *string `json:"assertionAttributeOrg,omitempty" tf:"assertion_attribute_org,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user roles.
	// Friendly name or name of the attribute within the SAML assertion to use as the user roles.
	AssertionAttributeRole *string `json:"assertionAttributeRole,omitempty" tf:"assertion_attribute_role,omitempty"`

	// (Boolean) Log in automatically, skipping the login screen.
	// Whether SAML auto login is enabled.
	AutoLogin *bool `json:"autoLogin,omitempty" tf:"auto_login,omitempty"`

	// (String) Path for the SP X.509 certificate.
	// Path for the SP X.509 certificate.
	CertificatePath *string `json:"certificatePath,omitempty" tf:"certificate_path,omitempty"`

	// encoded string for the SP X.509 certificate.
	// Base64-encoded string for the SP X.509 certificate.
	CertificateSecretRef *v1.SecretKeySelector `json:"certificateSecretRef,omitempty" tf:"-"`

	// (String) The client Id of your OAuth2 app.
	// The client Id of your OAuth2 app.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String, Sensitive) The client secret of your OAuth2 app.
	// The client secret of your OAuth2 app.
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// (Boolean) Define whether this configuration is enabled for LDAP. Defaults to true.
	// Define whether this configuration is enabled for SAML. Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The entity ID is a globally unique identifier for the service provider. It is used to identify the service provider to the identity provider. Defaults to the URL of the Grafana instance if not set.
	// The entity ID is a globally unique identifier for the service provider. It is used to identify the service provider to the identity provider. Defaults to the URL of the Grafana instance if not set.
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// (Boolean) If enabled, Grafana will fetch groups from Microsoft Graph API instead of using the groups claim from the ID token.
	// If enabled, Grafana will fetch groups from Microsoft Graph API instead of using the groups claim from the ID token.
	ForceUseGraphAPI *bool `json:"forceUseGraphApi,omitempty" tf:"force_use_graph_api,omitempty"`

	// encoded string for the IdP SAML metadata XML.
	// Base64-encoded string for the IdP SAML metadata XML.
	IdpMetadata *string `json:"idpMetadata,omitempty" tf:"idp_metadata,omitempty"`

	// (String) Path for the IdP SAML metadata XML.
	// Path for the IdP SAML metadata XML.
	IdpMetadataPath *string `json:"idpMetadataPath,omitempty" tf:"idp_metadata_path,omitempty"`

	// (String) URL for the IdP SAML metadata XML.
	// URL for the IdP SAML metadata XML.
	IdpMetadataURL *string `json:"idpMetadataUrl,omitempty" tf:"idp_metadata_url,omitempty"`

	// (String) Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
	// Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
	MaxIssueDelay *string `json:"maxIssueDelay,omitempty" tf:"max_issue_delay,omitempty"`

	// (String) Duration, for how long the SP metadata is valid. For example: 48h, 5d.
	// Duration, for how long the SP metadata is valid. For example: 48h, 5d.
	MetadataValidDuration *string `json:"metadataValidDuration,omitempty" tf:"metadata_valid_duration,omitempty"`

	// (String) Helpful if you use more than one identity providers or SSO protocols.
	// Name used to refer to the SAML authentication.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// format:transient
	// The Name ID Format to request within the SAML assertion. Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
	NameIDFormat *string `json:"nameIdFormat,omitempty" tf:"name_id_format,omitempty"`

	// or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
	// List of comma- or space-separated Organization:OrgId:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: Viewer, Editor or Admin.
	OrgMapping *string `json:"orgMapping,omitempty" tf:"org_mapping,omitempty"`

	// (String) Path for the SP private key.
	// Path for the SP private key.
	PrivateKeyPath *string `json:"privateKeyPath,omitempty" tf:"private_key_path,omitempty"`

	// encoded string for the SP private key.
	// Base64-encoded string for the SP private key.
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// initiated login. Should match relay state configured in IdP.
	// Relay state for IdP-initiated login. Should match relay state configured in IdP.
	RelayState *string `json:"relayState,omitempty" tf:"relay_state,omitempty"`

	// or space-separated roles which will be mapped into the Admin role.
	// List of comma- or space-separated roles which will be mapped into the Admin role.
	RoleValuesAdmin *string `json:"roleValuesAdmin,omitempty" tf:"role_values_admin,omitempty"`

	// or space-separated roles which will be mapped into the Editor role.
	// List of comma- or space-separated roles which will be mapped into the Editor role.
	RoleValuesEditor *string `json:"roleValuesEditor,omitempty" tf:"role_values_editor,omitempty"`

	// or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
	// List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
	RoleValuesGrafanaAdmin *string `json:"roleValuesGrafanaAdmin,omitempty" tf:"role_values_grafana_admin,omitempty"`

	// or space-separated roles which will be mapped into the None role.
	// List of comma- or space-separated roles which will be mapped into the None role.
	RoleValuesNone *string `json:"roleValuesNone,omitempty" tf:"role_values_none,omitempty"`

	// or space-separated roles which will be mapped into the Viewer role.
	// List of comma- or space-separated roles which will be mapped into the Viewer role.
	RoleValuesViewer *string `json:"roleValuesViewer,omitempty" tf:"role_values_viewer,omitempty"`

	// sha1, rsa-sha256, rsa-sha512.
	// Signature algorithm used for signing requests to the IdP. Supported values are rsa-sha1, rsa-sha256, rsa-sha512.
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// (Boolean) Whether SAML Single Logout is enabled.
	// Whether SAML Single Logout is enabled.
	SingleLogout *bool `json:"singleLogout,omitempty" tf:"single_logout,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from LDAP.
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`

	// (String) The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The token endpoint of your OAuth2 provider. Required for Azure AD providers.
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`
}

type SAMLSettingsObservation struct {

	// initiated login is allowed.
	// Whether SAML IdP-initiated login is allowed.
	AllowIdpInitiated *bool `json:"allowIdpInitiated,omitempty" tf:"allow_idp_initiated,omitempty"`

	// (Boolean) Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	// Whether to allow new Grafana user creation through SAML login. If set to false, then only existing Grafana users can log in with SAML.
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// or space-separated organizations. The user should be a member of at least one organization to log in.
	// List of comma- or space-separated organizations. User should be a member of at least one organization to log in.
	AllowedOrganizations *string `json:"allowedOrganizations,omitempty" tf:"allowed_organizations,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user email.
	// Friendly name or name of the attribute within the SAML assertion to use as the user email.
	AssertionAttributeEmail *string `json:"assertionAttributeEmail,omitempty" tf:"assertion_attribute_email,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user groups.
	// Friendly name or name of the attribute within the SAML assertion to use as the user groups.
	AssertionAttributeGroups *string `json:"assertionAttributeGroups,omitempty" tf:"assertion_attribute_groups,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
	// Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
	AssertionAttributeLogin *string `json:"assertionAttributeLogin,omitempty" tf:"assertion_attribute_login,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
	// Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
	AssertionAttributeName *string `json:"assertionAttributeName,omitempty" tf:"assertion_attribute_name,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user organization.
	// Friendly name or name of the attribute within the SAML assertion to use as the user organization.
	AssertionAttributeOrg *string `json:"assertionAttributeOrg,omitempty" tf:"assertion_attribute_org,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user roles.
	// Friendly name or name of the attribute within the SAML assertion to use as the user roles.
	AssertionAttributeRole *string `json:"assertionAttributeRole,omitempty" tf:"assertion_attribute_role,omitempty"`

	// (Boolean) Log in automatically, skipping the login screen.
	// Whether SAML auto login is enabled.
	AutoLogin *bool `json:"autoLogin,omitempty" tf:"auto_login,omitempty"`

	// (String) Path for the SP X.509 certificate.
	// Path for the SP X.509 certificate.
	CertificatePath *string `json:"certificatePath,omitempty" tf:"certificate_path,omitempty"`

	// (String) The client Id of your OAuth2 app.
	// The client Id of your OAuth2 app.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String, Sensitive) The client secret of your OAuth2 app.
	// The client secret of your OAuth2 app.
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// (Boolean) Define whether this configuration is enabled for LDAP. Defaults to true.
	// Define whether this configuration is enabled for SAML. Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The entity ID is a globally unique identifier for the service provider. It is used to identify the service provider to the identity provider. Defaults to the URL of the Grafana instance if not set.
	// The entity ID is a globally unique identifier for the service provider. It is used to identify the service provider to the identity provider. Defaults to the URL of the Grafana instance if not set.
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// (Boolean) If enabled, Grafana will fetch groups from Microsoft Graph API instead of using the groups claim from the ID token.
	// If enabled, Grafana will fetch groups from Microsoft Graph API instead of using the groups claim from the ID token.
	ForceUseGraphAPI *bool `json:"forceUseGraphApi,omitempty" tf:"force_use_graph_api,omitempty"`

	// encoded string for the IdP SAML metadata XML.
	// Base64-encoded string for the IdP SAML metadata XML.
	IdpMetadata *string `json:"idpMetadata,omitempty" tf:"idp_metadata,omitempty"`

	// (String) Path for the IdP SAML metadata XML.
	// Path for the IdP SAML metadata XML.
	IdpMetadataPath *string `json:"idpMetadataPath,omitempty" tf:"idp_metadata_path,omitempty"`

	// (String) URL for the IdP SAML metadata XML.
	// URL for the IdP SAML metadata XML.
	IdpMetadataURL *string `json:"idpMetadataUrl,omitempty" tf:"idp_metadata_url,omitempty"`

	// (String) Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
	// Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
	MaxIssueDelay *string `json:"maxIssueDelay,omitempty" tf:"max_issue_delay,omitempty"`

	// (String) Duration, for how long the SP metadata is valid. For example: 48h, 5d.
	// Duration, for how long the SP metadata is valid. For example: 48h, 5d.
	MetadataValidDuration *string `json:"metadataValidDuration,omitempty" tf:"metadata_valid_duration,omitempty"`

	// (String) Helpful if you use more than one identity providers or SSO protocols.
	// Name used to refer to the SAML authentication.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// format:transient
	// The Name ID Format to request within the SAML assertion. Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
	NameIDFormat *string `json:"nameIdFormat,omitempty" tf:"name_id_format,omitempty"`

	// or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
	// List of comma- or space-separated Organization:OrgId:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: Viewer, Editor or Admin.
	OrgMapping *string `json:"orgMapping,omitempty" tf:"org_mapping,omitempty"`

	// (String) Path for the SP private key.
	// Path for the SP private key.
	PrivateKeyPath *string `json:"privateKeyPath,omitempty" tf:"private_key_path,omitempty"`

	// initiated login. Should match relay state configured in IdP.
	// Relay state for IdP-initiated login. Should match relay state configured in IdP.
	RelayState *string `json:"relayState,omitempty" tf:"relay_state,omitempty"`

	// or space-separated roles which will be mapped into the Admin role.
	// List of comma- or space-separated roles which will be mapped into the Admin role.
	RoleValuesAdmin *string `json:"roleValuesAdmin,omitempty" tf:"role_values_admin,omitempty"`

	// or space-separated roles which will be mapped into the Editor role.
	// List of comma- or space-separated roles which will be mapped into the Editor role.
	RoleValuesEditor *string `json:"roleValuesEditor,omitempty" tf:"role_values_editor,omitempty"`

	// or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
	// List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
	RoleValuesGrafanaAdmin *string `json:"roleValuesGrafanaAdmin,omitempty" tf:"role_values_grafana_admin,omitempty"`

	// or space-separated roles which will be mapped into the None role.
	// List of comma- or space-separated roles which will be mapped into the None role.
	RoleValuesNone *string `json:"roleValuesNone,omitempty" tf:"role_values_none,omitempty"`

	// or space-separated roles which will be mapped into the Viewer role.
	// List of comma- or space-separated roles which will be mapped into the Viewer role.
	RoleValuesViewer *string `json:"roleValuesViewer,omitempty" tf:"role_values_viewer,omitempty"`

	// sha1, rsa-sha256, rsa-sha512.
	// Signature algorithm used for signing requests to the IdP. Supported values are rsa-sha1, rsa-sha256, rsa-sha512.
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// (Boolean) Whether SAML Single Logout is enabled.
	// Whether SAML Single Logout is enabled.
	SingleLogout *bool `json:"singleLogout,omitempty" tf:"single_logout,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from LDAP.
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`

	// (String) The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The token endpoint of your OAuth2 provider. Required for Azure AD providers.
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`
}

type SAMLSettingsParameters struct {

	// initiated login is allowed.
	// Whether SAML IdP-initiated login is allowed.
	// +kubebuilder:validation:Optional
	AllowIdpInitiated *bool `json:"allowIdpInitiated,omitempty" tf:"allow_idp_initiated,omitempty"`

	// (Boolean) Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	// Whether to allow new Grafana user creation through SAML login. If set to false, then only existing Grafana users can log in with SAML.
	// +kubebuilder:validation:Optional
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// or space-separated organizations. The user should be a member of at least one organization to log in.
	// List of comma- or space-separated organizations. User should be a member of at least one organization to log in.
	// +kubebuilder:validation:Optional
	AllowedOrganizations *string `json:"allowedOrganizations,omitempty" tf:"allowed_organizations,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user email.
	// Friendly name or name of the attribute within the SAML assertion to use as the user email.
	// +kubebuilder:validation:Optional
	AssertionAttributeEmail *string `json:"assertionAttributeEmail,omitempty" tf:"assertion_attribute_email,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user groups.
	// Friendly name or name of the attribute within the SAML assertion to use as the user groups.
	// +kubebuilder:validation:Optional
	AssertionAttributeGroups *string `json:"assertionAttributeGroups,omitempty" tf:"assertion_attribute_groups,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
	// Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
	// +kubebuilder:validation:Optional
	AssertionAttributeLogin *string `json:"assertionAttributeLogin,omitempty" tf:"assertion_attribute_login,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
	// Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
	// +kubebuilder:validation:Optional
	AssertionAttributeName *string `json:"assertionAttributeName,omitempty" tf:"assertion_attribute_name,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user organization.
	// Friendly name or name of the attribute within the SAML assertion to use as the user organization.
	// +kubebuilder:validation:Optional
	AssertionAttributeOrg *string `json:"assertionAttributeOrg,omitempty" tf:"assertion_attribute_org,omitempty"`

	// (String) Friendly name or name of the attribute within the SAML assertion to use as the user roles.
	// Friendly name or name of the attribute within the SAML assertion to use as the user roles.
	// +kubebuilder:validation:Optional
	AssertionAttributeRole *string `json:"assertionAttributeRole,omitempty" tf:"assertion_attribute_role,omitempty"`

	// (Boolean) Log in automatically, skipping the login screen.
	// Whether SAML auto login is enabled.
	// +kubebuilder:validation:Optional
	AutoLogin *bool `json:"autoLogin,omitempty" tf:"auto_login,omitempty"`

	// (String) Path for the SP X.509 certificate.
	// Path for the SP X.509 certificate.
	// +kubebuilder:validation:Optional
	CertificatePath *string `json:"certificatePath,omitempty" tf:"certificate_path,omitempty"`

	// encoded string for the SP X.509 certificate.
	// Base64-encoded string for the SP X.509 certificate.
	// +kubebuilder:validation:Optional
	CertificateSecretRef *v1.SecretKeySelector `json:"certificateSecretRef,omitempty" tf:"-"`

	// (String) The client Id of your OAuth2 app.
	// The client Id of your OAuth2 app.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String, Sensitive) The client secret of your OAuth2 app.
	// The client secret of your OAuth2 app.
	// +kubebuilder:validation:Optional
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// (Boolean) Define whether this configuration is enabled for LDAP. Defaults to true.
	// Define whether this configuration is enabled for SAML. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The entity ID is a globally unique identifier for the service provider. It is used to identify the service provider to the identity provider. Defaults to the URL of the Grafana instance if not set.
	// The entity ID is a globally unique identifier for the service provider. It is used to identify the service provider to the identity provider. Defaults to the URL of the Grafana instance if not set.
	// +kubebuilder:validation:Optional
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// (Boolean) If enabled, Grafana will fetch groups from Microsoft Graph API instead of using the groups claim from the ID token.
	// If enabled, Grafana will fetch groups from Microsoft Graph API instead of using the groups claim from the ID token.
	// +kubebuilder:validation:Optional
	ForceUseGraphAPI *bool `json:"forceUseGraphApi,omitempty" tf:"force_use_graph_api,omitempty"`

	// encoded string for the IdP SAML metadata XML.
	// Base64-encoded string for the IdP SAML metadata XML.
	// +kubebuilder:validation:Optional
	IdpMetadata *string `json:"idpMetadata,omitempty" tf:"idp_metadata,omitempty"`

	// (String) Path for the IdP SAML metadata XML.
	// Path for the IdP SAML metadata XML.
	// +kubebuilder:validation:Optional
	IdpMetadataPath *string `json:"idpMetadataPath,omitempty" tf:"idp_metadata_path,omitempty"`

	// (String) URL for the IdP SAML metadata XML.
	// URL for the IdP SAML metadata XML.
	// +kubebuilder:validation:Optional
	IdpMetadataURL *string `json:"idpMetadataUrl,omitempty" tf:"idp_metadata_url,omitempty"`

	// (String) Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
	// Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
	// +kubebuilder:validation:Optional
	MaxIssueDelay *string `json:"maxIssueDelay,omitempty" tf:"max_issue_delay,omitempty"`

	// (String) Duration, for how long the SP metadata is valid. For example: 48h, 5d.
	// Duration, for how long the SP metadata is valid. For example: 48h, 5d.
	// +kubebuilder:validation:Optional
	MetadataValidDuration *string `json:"metadataValidDuration,omitempty" tf:"metadata_valid_duration,omitempty"`

	// (String) Helpful if you use more than one identity providers or SSO protocols.
	// Name used to refer to the SAML authentication.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// format:transient
	// The Name ID Format to request within the SAML assertion. Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
	// +kubebuilder:validation:Optional
	NameIDFormat *string `json:"nameIdFormat,omitempty" tf:"name_id_format,omitempty"`

	// or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
	// List of comma- or space-separated Organization:OrgId:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: Viewer, Editor or Admin.
	// +kubebuilder:validation:Optional
	OrgMapping *string `json:"orgMapping,omitempty" tf:"org_mapping,omitempty"`

	// (String) Path for the SP private key.
	// Path for the SP private key.
	// +kubebuilder:validation:Optional
	PrivateKeyPath *string `json:"privateKeyPath,omitempty" tf:"private_key_path,omitempty"`

	// encoded string for the SP private key.
	// Base64-encoded string for the SP private key.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// initiated login. Should match relay state configured in IdP.
	// Relay state for IdP-initiated login. Should match relay state configured in IdP.
	// +kubebuilder:validation:Optional
	RelayState *string `json:"relayState,omitempty" tf:"relay_state,omitempty"`

	// or space-separated roles which will be mapped into the Admin role.
	// List of comma- or space-separated roles which will be mapped into the Admin role.
	// +kubebuilder:validation:Optional
	RoleValuesAdmin *string `json:"roleValuesAdmin,omitempty" tf:"role_values_admin,omitempty"`

	// or space-separated roles which will be mapped into the Editor role.
	// List of comma- or space-separated roles which will be mapped into the Editor role.
	// +kubebuilder:validation:Optional
	RoleValuesEditor *string `json:"roleValuesEditor,omitempty" tf:"role_values_editor,omitempty"`

	// or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
	// List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
	// +kubebuilder:validation:Optional
	RoleValuesGrafanaAdmin *string `json:"roleValuesGrafanaAdmin,omitempty" tf:"role_values_grafana_admin,omitempty"`

	// or space-separated roles which will be mapped into the None role.
	// List of comma- or space-separated roles which will be mapped into the None role.
	// +kubebuilder:validation:Optional
	RoleValuesNone *string `json:"roleValuesNone,omitempty" tf:"role_values_none,omitempty"`

	// or space-separated roles which will be mapped into the Viewer role.
	// List of comma- or space-separated roles which will be mapped into the Viewer role.
	// +kubebuilder:validation:Optional
	RoleValuesViewer *string `json:"roleValuesViewer,omitempty" tf:"role_values_viewer,omitempty"`

	// sha1, rsa-sha256, rsa-sha512.
	// Signature algorithm used for signing requests to the IdP. Supported values are rsa-sha1, rsa-sha256, rsa-sha512.
	// +kubebuilder:validation:Optional
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// (Boolean) Whether SAML Single Logout is enabled.
	// Whether SAML Single Logout is enabled.
	// +kubebuilder:validation:Optional
	SingleLogout *bool `json:"singleLogout,omitempty" tf:"single_logout,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from LDAP.
	// Prevent synchronizing users’ organization roles from your IdP.
	// +kubebuilder:validation:Optional
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`

	// (String) The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The token endpoint of your OAuth2 provider. Required for Azure AD providers.
	// +kubebuilder:validation:Optional
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`
}

type ServersInitParameters struct {

	// (Map of String) The LDAP server attributes. The following attributes can be configured: email, member_of, name, surname, username.
	// The LDAP server attributes. The following attributes can be configured: email, member_of, name, surname, username.
	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (String) The search user bind DN.
	// The search user bind DN.
	BindDn *string `json:"bindDn,omitempty" tf:"bind_dn,omitempty"`

	// (String, Sensitive) The search user bind password.
	// The search user bind password.
	BindPasswordSecretRef *v1.SecretKeySelector `json:"bindPasswordSecretRef,omitempty" tf:"-"`

	// (String) The path to the client certificate.
	// The path to the client certificate.
	ClientCert *string `json:"clientCert,omitempty" tf:"client_cert,omitempty"`

	// (String) The Base64 encoded value of the client certificate.
	// The Base64 encoded value of the client certificate.
	ClientCertValue *string `json:"clientCertValue,omitempty" tf:"client_cert_value,omitempty"`

	// (String, Sensitive) The path to the client private key.
	// The path to the client private key.
	ClientKeySecretRef *v1.SecretKeySelector `json:"clientKeySecretRef,omitempty" tf:"-"`

	// (String, Sensitive) The Base64 encoded value of the client private key.
	// The Base64 encoded value of the client private key.
	ClientKeyValueSecretRef *v1.SecretKeySelector `json:"clientKeyValueSecretRef,omitempty" tf:"-"`

	// (Block List) For mapping an LDAP group to a Grafana organization and role. (see below for nested schema)
	// For mapping an LDAP group to a Grafana organization and role.
	GroupMappings []GroupMappingsInitParameters `json:"groupMappings,omitempty" tf:"group_mappings,omitempty"`

	// (List of String) An array of the base DNs to search through for groups. Typically uses ou=groups.
	// An array of the base DNs to search through for groups. Typically uses ou=groups.
	GroupSearchBaseDNS []*string `json:"groupSearchBaseDns,omitempty" tf:"group_search_base_dns,omitempty"`

	// (String) Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available).
	// Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available).
	GroupSearchFilter *string `json:"groupSearchFilter,omitempty" tf:"group_search_filter,omitempty"`

	// (String) The %s in the search filter will be replaced with the attribute defined in this field.
	// The %s in the search filter will be replaced with the attribute defined in this field.
	GroupSearchFilterUserAttribute *string `json:"groupSearchFilterUserAttribute,omitempty" tf:"group_search_filter_user_attribute,omitempty"`

	// (String) The LDAP server host.
	// The LDAP server host.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) Minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.
	// Minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.
	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	// (Number) The LDAP server port.
	// The LDAP server port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) The path to the root CA certificate.
	// The path to the root CA certificate.
	RootCACert *string `json:"rootCaCert,omitempty" tf:"root_ca_cert,omitempty"`

	// (List of String) The Base64 encoded values of the root CA certificates.
	// The Base64 encoded values of the root CA certificates.
	RootCACertValue []*string `json:"rootCaCertValue,omitempty" tf:"root_ca_cert_value,omitempty"`

	// (Boolean) If set to true, the SSL cert validation will be skipped.
	// If set to true, the SSL cert validation will be skipped.
	SSLSkipVerify *bool `json:"sslSkipVerify,omitempty" tf:"ssl_skip_verify,omitempty"`

	// (List of String) An array of base DNs to search through.
	// An array of base DNs to search through.
	SearchBaseDNS []*string `json:"searchBaseDns,omitempty" tf:"search_base_dns,omitempty"`

	// (String) The user search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)".
	// The user search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)".
	SearchFilter *string `json:"searchFilter,omitempty" tf:"search_filter,omitempty"`

	// (Boolean) If set to true, use LDAP with STARTTLS instead of LDAPS.
	// If set to true, use LDAP with STARTTLS instead of LDAPS.
	StartTLS *bool `json:"startTls,omitempty" tf:"start_tls,omitempty"`

	// (List of String) Accepted TLS ciphers. For a complete list of supported ciphers, refer to: https://go.dev/src/crypto/tls/cipher_suites.go.
	// Accepted TLS ciphers. For a complete list of supported ciphers, refer to: https://go.dev/src/crypto/tls/cipher_suites.go.
	TLSCiphers []*string `json:"tlsCiphers,omitempty" tf:"tls_ciphers,omitempty"`

	// (Number) The timeout in seconds for connecting to the LDAP host.
	// The timeout in seconds for connecting to the LDAP host.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Boolean) Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS).
	// Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS).
	UseSSL *bool `json:"useSsl,omitempty" tf:"use_ssl,omitempty"`
}

type ServersObservation struct {

	// (Map of String) The LDAP server attributes. The following attributes can be configured: email, member_of, name, surname, username.
	// The LDAP server attributes. The following attributes can be configured: email, member_of, name, surname, username.
	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (String) The search user bind DN.
	// The search user bind DN.
	BindDn *string `json:"bindDn,omitempty" tf:"bind_dn,omitempty"`

	// (String) The path to the client certificate.
	// The path to the client certificate.
	ClientCert *string `json:"clientCert,omitempty" tf:"client_cert,omitempty"`

	// (String) The Base64 encoded value of the client certificate.
	// The Base64 encoded value of the client certificate.
	ClientCertValue *string `json:"clientCertValue,omitempty" tf:"client_cert_value,omitempty"`

	// (Block List) For mapping an LDAP group to a Grafana organization and role. (see below for nested schema)
	// For mapping an LDAP group to a Grafana organization and role.
	GroupMappings []GroupMappingsObservation `json:"groupMappings,omitempty" tf:"group_mappings,omitempty"`

	// (List of String) An array of the base DNs to search through for groups. Typically uses ou=groups.
	// An array of the base DNs to search through for groups. Typically uses ou=groups.
	GroupSearchBaseDNS []*string `json:"groupSearchBaseDns,omitempty" tf:"group_search_base_dns,omitempty"`

	// (String) Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available).
	// Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available).
	GroupSearchFilter *string `json:"groupSearchFilter,omitempty" tf:"group_search_filter,omitempty"`

	// (String) The %s in the search filter will be replaced with the attribute defined in this field.
	// The %s in the search filter will be replaced with the attribute defined in this field.
	GroupSearchFilterUserAttribute *string `json:"groupSearchFilterUserAttribute,omitempty" tf:"group_search_filter_user_attribute,omitempty"`

	// (String) The LDAP server host.
	// The LDAP server host.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) Minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.
	// Minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.
	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	// (Number) The LDAP server port.
	// The LDAP server port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) The path to the root CA certificate.
	// The path to the root CA certificate.
	RootCACert *string `json:"rootCaCert,omitempty" tf:"root_ca_cert,omitempty"`

	// (List of String) The Base64 encoded values of the root CA certificates.
	// The Base64 encoded values of the root CA certificates.
	RootCACertValue []*string `json:"rootCaCertValue,omitempty" tf:"root_ca_cert_value,omitempty"`

	// (Boolean) If set to true, the SSL cert validation will be skipped.
	// If set to true, the SSL cert validation will be skipped.
	SSLSkipVerify *bool `json:"sslSkipVerify,omitempty" tf:"ssl_skip_verify,omitempty"`

	// (List of String) An array of base DNs to search through.
	// An array of base DNs to search through.
	SearchBaseDNS []*string `json:"searchBaseDns,omitempty" tf:"search_base_dns,omitempty"`

	// (String) The user search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)".
	// The user search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)".
	SearchFilter *string `json:"searchFilter,omitempty" tf:"search_filter,omitempty"`

	// (Boolean) If set to true, use LDAP with STARTTLS instead of LDAPS.
	// If set to true, use LDAP with STARTTLS instead of LDAPS.
	StartTLS *bool `json:"startTls,omitempty" tf:"start_tls,omitempty"`

	// (List of String) Accepted TLS ciphers. For a complete list of supported ciphers, refer to: https://go.dev/src/crypto/tls/cipher_suites.go.
	// Accepted TLS ciphers. For a complete list of supported ciphers, refer to: https://go.dev/src/crypto/tls/cipher_suites.go.
	TLSCiphers []*string `json:"tlsCiphers,omitempty" tf:"tls_ciphers,omitempty"`

	// (Number) The timeout in seconds for connecting to the LDAP host.
	// The timeout in seconds for connecting to the LDAP host.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Boolean) Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS).
	// Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS).
	UseSSL *bool `json:"useSsl,omitempty" tf:"use_ssl,omitempty"`
}

type ServersParameters struct {

	// (Map of String) The LDAP server attributes. The following attributes can be configured: email, member_of, name, surname, username.
	// The LDAP server attributes. The following attributes can be configured: email, member_of, name, surname, username.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (String) The search user bind DN.
	// The search user bind DN.
	// +kubebuilder:validation:Optional
	BindDn *string `json:"bindDn,omitempty" tf:"bind_dn,omitempty"`

	// (String, Sensitive) The search user bind password.
	// The search user bind password.
	// +kubebuilder:validation:Optional
	BindPasswordSecretRef *v1.SecretKeySelector `json:"bindPasswordSecretRef,omitempty" tf:"-"`

	// (String) The path to the client certificate.
	// The path to the client certificate.
	// +kubebuilder:validation:Optional
	ClientCert *string `json:"clientCert,omitempty" tf:"client_cert,omitempty"`

	// (String) The Base64 encoded value of the client certificate.
	// The Base64 encoded value of the client certificate.
	// +kubebuilder:validation:Optional
	ClientCertValue *string `json:"clientCertValue,omitempty" tf:"client_cert_value,omitempty"`

	// (String, Sensitive) The path to the client private key.
	// The path to the client private key.
	// +kubebuilder:validation:Optional
	ClientKeySecretRef *v1.SecretKeySelector `json:"clientKeySecretRef,omitempty" tf:"-"`

	// (String, Sensitive) The Base64 encoded value of the client private key.
	// The Base64 encoded value of the client private key.
	// +kubebuilder:validation:Optional
	ClientKeyValueSecretRef *v1.SecretKeySelector `json:"clientKeyValueSecretRef,omitempty" tf:"-"`

	// (Block List) For mapping an LDAP group to a Grafana organization and role. (see below for nested schema)
	// For mapping an LDAP group to a Grafana organization and role.
	// +kubebuilder:validation:Optional
	GroupMappings []GroupMappingsParameters `json:"groupMappings,omitempty" tf:"group_mappings,omitempty"`

	// (List of String) An array of the base DNs to search through for groups. Typically uses ou=groups.
	// An array of the base DNs to search through for groups. Typically uses ou=groups.
	// +kubebuilder:validation:Optional
	GroupSearchBaseDNS []*string `json:"groupSearchBaseDns,omitempty" tf:"group_search_base_dns,omitempty"`

	// (String) Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available).
	// Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available).
	// +kubebuilder:validation:Optional
	GroupSearchFilter *string `json:"groupSearchFilter,omitempty" tf:"group_search_filter,omitempty"`

	// (String) The %s in the search filter will be replaced with the attribute defined in this field.
	// The %s in the search filter will be replaced with the attribute defined in this field.
	// +kubebuilder:validation:Optional
	GroupSearchFilterUserAttribute *string `json:"groupSearchFilterUserAttribute,omitempty" tf:"group_search_filter_user_attribute,omitempty"`

	// (String) The LDAP server host.
	// The LDAP server host.
	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// (String) Minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.
	// Minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.
	// +kubebuilder:validation:Optional
	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	// (Number) The LDAP server port.
	// The LDAP server port.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) The path to the root CA certificate.
	// The path to the root CA certificate.
	// +kubebuilder:validation:Optional
	RootCACert *string `json:"rootCaCert,omitempty" tf:"root_ca_cert,omitempty"`

	// (List of String) The Base64 encoded values of the root CA certificates.
	// The Base64 encoded values of the root CA certificates.
	// +kubebuilder:validation:Optional
	RootCACertValue []*string `json:"rootCaCertValue,omitempty" tf:"root_ca_cert_value,omitempty"`

	// (Boolean) If set to true, the SSL cert validation will be skipped.
	// If set to true, the SSL cert validation will be skipped.
	// +kubebuilder:validation:Optional
	SSLSkipVerify *bool `json:"sslSkipVerify,omitempty" tf:"ssl_skip_verify,omitempty"`

	// (List of String) An array of base DNs to search through.
	// An array of base DNs to search through.
	// +kubebuilder:validation:Optional
	SearchBaseDNS []*string `json:"searchBaseDns" tf:"search_base_dns,omitempty"`

	// (String) The user search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)".
	// The user search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)".
	// +kubebuilder:validation:Optional
	SearchFilter *string `json:"searchFilter" tf:"search_filter,omitempty"`

	// (Boolean) If set to true, use LDAP with STARTTLS instead of LDAPS.
	// If set to true, use LDAP with STARTTLS instead of LDAPS.
	// +kubebuilder:validation:Optional
	StartTLS *bool `json:"startTls,omitempty" tf:"start_tls,omitempty"`

	// (List of String) Accepted TLS ciphers. For a complete list of supported ciphers, refer to: https://go.dev/src/crypto/tls/cipher_suites.go.
	// Accepted TLS ciphers. For a complete list of supported ciphers, refer to: https://go.dev/src/crypto/tls/cipher_suites.go.
	// +kubebuilder:validation:Optional
	TLSCiphers []*string `json:"tlsCiphers,omitempty" tf:"tls_ciphers,omitempty"`

	// (Number) The timeout in seconds for connecting to the LDAP host.
	// The timeout in seconds for connecting to the LDAP host.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Boolean) Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS).
	// Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS).
	// +kubebuilder:validation:Optional
	UseSSL *bool `json:"useSsl,omitempty" tf:"use_ssl,omitempty"`
}

type SsoSettingsInitParameters struct {

	// (Block Set, Max: 1) The LDAP settings set. Required for the ldap provider. (see below for nested schema)
	// The LDAP settings set. Required for the ldap provider.
	LdapSettings []LdapSettingsInitParameters `json:"ldapSettings,omitempty" tf:"ldap_settings,omitempty"`

	// (Block Set, Max: 1) The OAuth2 settings set. Required for github, gitlab, google, azuread, okta, generic_oauth providers. (see below for nested schema)
	// The OAuth2 settings set. Required for github, gitlab, google, azuread, okta, generic_oauth providers.
	Oauth2Settings []Oauth2SettingsInitParameters `json:"oauth2Settings,omitempty" tf:"oauth2_settings,omitempty"`

	// (String) The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth, saml, ldap.
	// The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth, saml, ldap.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// (Block Set, Max: 1) The SAML settings set. Required for the saml provider. (see below for nested schema)
	// The SAML settings set. Required for the saml provider.
	SAMLSettings []SAMLSettingsInitParameters `json:"samlSettings,omitempty" tf:"saml_settings,omitempty"`
}

type SsoSettingsObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block Set, Max: 1) The LDAP settings set. Required for the ldap provider. (see below for nested schema)
	// The LDAP settings set. Required for the ldap provider.
	LdapSettings []LdapSettingsObservation `json:"ldapSettings,omitempty" tf:"ldap_settings,omitempty"`

	// (Block Set, Max: 1) The OAuth2 settings set. Required for github, gitlab, google, azuread, okta, generic_oauth providers. (see below for nested schema)
	// The OAuth2 settings set. Required for github, gitlab, google, azuread, okta, generic_oauth providers.
	Oauth2Settings []Oauth2SettingsObservation `json:"oauth2Settings,omitempty" tf:"oauth2_settings,omitempty"`

	// (String) The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth, saml, ldap.
	// The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth, saml, ldap.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// (Block Set, Max: 1) The SAML settings set. Required for the saml provider. (see below for nested schema)
	// The SAML settings set. Required for the saml provider.
	SAMLSettings []SAMLSettingsObservation `json:"samlSettings,omitempty" tf:"saml_settings,omitempty"`
}

type SsoSettingsParameters struct {

	// (Block Set, Max: 1) The LDAP settings set. Required for the ldap provider. (see below for nested schema)
	// The LDAP settings set. Required for the ldap provider.
	// +kubebuilder:validation:Optional
	LdapSettings []LdapSettingsParameters `json:"ldapSettings,omitempty" tf:"ldap_settings,omitempty"`

	// (Block Set, Max: 1) The OAuth2 settings set. Required for github, gitlab, google, azuread, okta, generic_oauth providers. (see below for nested schema)
	// The OAuth2 settings set. Required for github, gitlab, google, azuread, okta, generic_oauth providers.
	// +kubebuilder:validation:Optional
	Oauth2Settings []Oauth2SettingsParameters `json:"oauth2Settings,omitempty" tf:"oauth2_settings,omitempty"`

	// (String) The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth, saml, ldap.
	// The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth, saml, ldap.
	// +kubebuilder:validation:Optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// (Block Set, Max: 1) The SAML settings set. Required for the saml provider. (see below for nested schema)
	// The SAML settings set. Required for the saml provider.
	// +kubebuilder:validation:Optional
	SAMLSettings []SAMLSettingsParameters `json:"samlSettings,omitempty" tf:"saml_settings,omitempty"`
}

// SsoSettingsSpec defines the desired state of SsoSettings
type SsoSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SsoSettingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SsoSettingsInitParameters `json:"initProvider,omitempty"`
}

// SsoSettingsStatus defines the observed state of SsoSettings.
type SsoSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SsoSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SsoSettings is the Schema for the SsoSettingss API. Manages Grafana SSO Settings for OAuth2, SAML and LDAP. Support for LDAP is currently in preview, it will be available in Grafana starting with v11.3. Official documentation https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/sso-settings/
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type SsoSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerName) || (has(self.initProvider) && has(self.initProvider.providerName))",message="spec.forProvider.providerName is a required parameter"
	Spec   SsoSettingsSpec   `json:"spec"`
	Status SsoSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsoSettingsList contains a list of SsoSettingss
type SsoSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SsoSettings `json:"items"`
}

// Repository type metadata.
var (
	SsoSettings_Kind             = "SsoSettings"
	SsoSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SsoSettings_Kind}.String()
	SsoSettings_KindAPIVersion   = SsoSettings_Kind + "." + CRDGroupVersion.String()
	SsoSettings_GroupVersionKind = CRDGroupVersion.WithKind(SsoSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&SsoSettings{}, &SsoSettingsList{})
}
