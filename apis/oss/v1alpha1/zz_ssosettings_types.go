// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Oauth2SettingsInitParameters struct {

	// (String) The user information endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The user information endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	APIURL *string `json:"apiUrl,omitempty" tf:"api_url,omitempty"`

	// (Boolean) If enabled, it will automatically sync the Grafana server administrator role.
	// If enabled, it will automatically sync the Grafana server administrator role.
	AllowAssignGrafanaAdmin *bool `json:"allowAssignGrafanaAdmin,omitempty" tf:"allow_assign_grafana_admin,omitempty"`

	// (Boolean) If not enabled, only existing Grafana users can log in using OAuth.
	// If not enabled, only existing Grafana users can log in using OAuth.
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// or space-separated domains. The user should belong to at least one domain to log in.
	// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
	AllowedDomains *string `json:"allowedDomains,omitempty" tf:"allowed_domains,omitempty"`

	// or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	AllowedGroups *string `json:"allowedGroups,omitempty" tf:"allowed_groups,omitempty"`

	// or space-separated organizations. The user should be a member of at least one organization to log in.
	// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
	AllowedOrganizations *string `json:"allowedOrganizations,omitempty" tf:"allowed_organizations,omitempty"`

	// (String) It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	// It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	AuthStyle *string `json:"authStyle,omitempty" tf:"auth_style,omitempty"`

	// (String) The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// (Boolean) Log in automatically, skipping the login screen.
	// Log in automatically, skipping the login screen.
	AutoLogin *bool `json:"autoLogin,omitempty" tf:"auto_login,omitempty"`

	// (String) The client Id of your OAuth2 app.
	// The client Id of your OAuth2 app.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (Map of String) Custom fields to configure for OAuth2 such as the force_use_graph_api field.
	// Custom fields to configure for OAuth2 such as the [force_use_graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
	// +mapType=granular
	Custom map[string]*string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (Boolean) Define allowed groups.
	// Define allowed groups.
	DefineAllowedGroups *bool `json:"defineAllowedGroups,omitempty" tf:"define_allowed_groups,omitempty"`

	// (Boolean) Define allowed teams ids.
	// Define allowed teams ids.
	DefineAllowedTeamsIds *bool `json:"defineAllowedTeamsIds,omitempty" tf:"define_allowed_teams_ids,omitempty"`

	// (String) Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	EmailAttributeName *string `json:"emailAttributeName,omitempty" tf:"email_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	EmailAttributePath *string `json:"emailAttributePath,omitempty" tf:"email_attribute_path,omitempty"`

	// (Boolean) If enabled, no scopes will be sent to the OAuth2 provider.
	// If enabled, no scopes will be sent to the OAuth2 provider.
	EmptyScopes *bool `json:"emptyScopes,omitempty" tf:"empty_scopes,omitempty"`

	// (Boolean) Define whether this configuration is enabled for the specified provider. Defaults to true.
	// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	// JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	GroupsAttributePath *string `json:"groupsAttributePath,omitempty" tf:"groups_attribute_path,omitempty"`

	// (String) The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	IDTokenAttributeName *string `json:"idTokenAttributeName,omitempty" tf:"id_token_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	LoginAttributePath *string `json:"loginAttributePath,omitempty" tf:"login_attribute_path,omitempty"`

	// (String) Helpful if you use more than one identity providers or SSO protocols.
	// Helpful if you use more than one identity providers or SSO protocols.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	NameAttributePath *string `json:"nameAttributePath,omitempty" tf:"name_attribute_path,omitempty"`

	// (String) JMESPath expression to use for Grafana role lookup.
	// JMESPath expression to use for Grafana role lookup.
	RoleAttributePath *string `json:"roleAttributePath,omitempty" tf:"role_attribute_path,omitempty"`

	// (Boolean) If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	RoleAttributeStrict *bool `json:"roleAttributeStrict,omitempty" tf:"role_attribute_strict,omitempty"`

	// or space-separated OAuth2 scopes.
	// List of comma- or space-separated OAuth2 scopes.
	Scopes *string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) The URL to redirect the user to after signing out from Grafana.
	// The URL to redirect the user to after signing out from Grafana.
	SignoutRedirectURL *string `json:"signoutRedirectUrl,omitempty" tf:"signout_redirect_url,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from your IdP.
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`

	// (String) The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	TLSClientCA *string `json:"tlsClientCa,omitempty" tf:"tls_client_ca,omitempty"`

	// (String) The path to the certificate. Is not applicable on Grafana Cloud.
	// The path to the certificate. Is not applicable on Grafana Cloud.
	TLSClientCert *string `json:"tlsClientCert,omitempty" tf:"tls_client_cert,omitempty"`

	// (String) The path to the key. Is not applicable on Grafana Cloud.
	// The path to the key. Is not applicable on Grafana Cloud.
	TLSClientKey *string `json:"tlsClientKey,omitempty" tf:"tls_client_key,omitempty"`

	// in-the-middle attacks.
	// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
	TLSSkipVerifyInsecure *bool `json:"tlsSkipVerifyInsecure,omitempty" tf:"tls_skip_verify_insecure,omitempty"`

	// (String) String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	TeamIds *string `json:"teamIds,omitempty" tf:"team_ids,omitempty"`

	// (String) The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	TeamIdsAttributePath *string `json:"teamIdsAttributePath,omitempty" tf:"team_ids_attribute_path,omitempty"`

	// (String) The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	TeamsURL *string `json:"teamsUrl,omitempty" tf:"teams_url,omitempty"`

	// (String) The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`

	// (Boolean) If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	UsePkce *bool `json:"usePkce,omitempty" tf:"use_pkce,omitempty"`

	// (Boolean) If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	UseRefreshToken *bool `json:"useRefreshToken,omitempty" tf:"use_refresh_token,omitempty"`
}

type Oauth2SettingsObservation struct {

	// (String) The user information endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The user information endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	APIURL *string `json:"apiUrl,omitempty" tf:"api_url,omitempty"`

	// (Boolean) If enabled, it will automatically sync the Grafana server administrator role.
	// If enabled, it will automatically sync the Grafana server administrator role.
	AllowAssignGrafanaAdmin *bool `json:"allowAssignGrafanaAdmin,omitempty" tf:"allow_assign_grafana_admin,omitempty"`

	// (Boolean) If not enabled, only existing Grafana users can log in using OAuth.
	// If not enabled, only existing Grafana users can log in using OAuth.
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// or space-separated domains. The user should belong to at least one domain to log in.
	// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
	AllowedDomains *string `json:"allowedDomains,omitempty" tf:"allowed_domains,omitempty"`

	// or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	AllowedGroups *string `json:"allowedGroups,omitempty" tf:"allowed_groups,omitempty"`

	// or space-separated organizations. The user should be a member of at least one organization to log in.
	// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
	AllowedOrganizations *string `json:"allowedOrganizations,omitempty" tf:"allowed_organizations,omitempty"`

	// (String) It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	// It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	AuthStyle *string `json:"authStyle,omitempty" tf:"auth_style,omitempty"`

	// (String) The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// (Boolean) Log in automatically, skipping the login screen.
	// Log in automatically, skipping the login screen.
	AutoLogin *bool `json:"autoLogin,omitempty" tf:"auto_login,omitempty"`

	// (String) The client Id of your OAuth2 app.
	// The client Id of your OAuth2 app.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (Map of String) Custom fields to configure for OAuth2 such as the force_use_graph_api field.
	// Custom fields to configure for OAuth2 such as the [force_use_graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
	// +mapType=granular
	Custom map[string]*string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (Boolean) Define allowed groups.
	// Define allowed groups.
	DefineAllowedGroups *bool `json:"defineAllowedGroups,omitempty" tf:"define_allowed_groups,omitempty"`

	// (Boolean) Define allowed teams ids.
	// Define allowed teams ids.
	DefineAllowedTeamsIds *bool `json:"defineAllowedTeamsIds,omitempty" tf:"define_allowed_teams_ids,omitempty"`

	// (String) Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	EmailAttributeName *string `json:"emailAttributeName,omitempty" tf:"email_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	EmailAttributePath *string `json:"emailAttributePath,omitempty" tf:"email_attribute_path,omitempty"`

	// (Boolean) If enabled, no scopes will be sent to the OAuth2 provider.
	// If enabled, no scopes will be sent to the OAuth2 provider.
	EmptyScopes *bool `json:"emptyScopes,omitempty" tf:"empty_scopes,omitempty"`

	// (Boolean) Define whether this configuration is enabled for the specified provider. Defaults to true.
	// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	// JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	GroupsAttributePath *string `json:"groupsAttributePath,omitempty" tf:"groups_attribute_path,omitempty"`

	// (String) The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	IDTokenAttributeName *string `json:"idTokenAttributeName,omitempty" tf:"id_token_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	LoginAttributePath *string `json:"loginAttributePath,omitempty" tf:"login_attribute_path,omitempty"`

	// (String) Helpful if you use more than one identity providers or SSO protocols.
	// Helpful if you use more than one identity providers or SSO protocols.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	NameAttributePath *string `json:"nameAttributePath,omitempty" tf:"name_attribute_path,omitempty"`

	// (String) JMESPath expression to use for Grafana role lookup.
	// JMESPath expression to use for Grafana role lookup.
	RoleAttributePath *string `json:"roleAttributePath,omitempty" tf:"role_attribute_path,omitempty"`

	// (Boolean) If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	RoleAttributeStrict *bool `json:"roleAttributeStrict,omitempty" tf:"role_attribute_strict,omitempty"`

	// or space-separated OAuth2 scopes.
	// List of comma- or space-separated OAuth2 scopes.
	Scopes *string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) The URL to redirect the user to after signing out from Grafana.
	// The URL to redirect the user to after signing out from Grafana.
	SignoutRedirectURL *string `json:"signoutRedirectUrl,omitempty" tf:"signout_redirect_url,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from your IdP.
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`

	// (String) The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	TLSClientCA *string `json:"tlsClientCa,omitempty" tf:"tls_client_ca,omitempty"`

	// (String) The path to the certificate. Is not applicable on Grafana Cloud.
	// The path to the certificate. Is not applicable on Grafana Cloud.
	TLSClientCert *string `json:"tlsClientCert,omitempty" tf:"tls_client_cert,omitempty"`

	// (String) The path to the key. Is not applicable on Grafana Cloud.
	// The path to the key. Is not applicable on Grafana Cloud.
	TLSClientKey *string `json:"tlsClientKey,omitempty" tf:"tls_client_key,omitempty"`

	// in-the-middle attacks.
	// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
	TLSSkipVerifyInsecure *bool `json:"tlsSkipVerifyInsecure,omitempty" tf:"tls_skip_verify_insecure,omitempty"`

	// (String) String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	TeamIds *string `json:"teamIds,omitempty" tf:"team_ids,omitempty"`

	// (String) The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	TeamIdsAttributePath *string `json:"teamIdsAttributePath,omitempty" tf:"team_ids_attribute_path,omitempty"`

	// (String) The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	TeamsURL *string `json:"teamsUrl,omitempty" tf:"teams_url,omitempty"`

	// (String) The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`

	// (Boolean) If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	UsePkce *bool `json:"usePkce,omitempty" tf:"use_pkce,omitempty"`

	// (Boolean) If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	UseRefreshToken *bool `json:"useRefreshToken,omitempty" tf:"use_refresh_token,omitempty"`
}

type Oauth2SettingsParameters struct {

	// (String) The user information endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The user information endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// +kubebuilder:validation:Optional
	APIURL *string `json:"apiUrl,omitempty" tf:"api_url,omitempty"`

	// (Boolean) If enabled, it will automatically sync the Grafana server administrator role.
	// If enabled, it will automatically sync the Grafana server administrator role.
	// +kubebuilder:validation:Optional
	AllowAssignGrafanaAdmin *bool `json:"allowAssignGrafanaAdmin,omitempty" tf:"allow_assign_grafana_admin,omitempty"`

	// (Boolean) If not enabled, only existing Grafana users can log in using OAuth.
	// If not enabled, only existing Grafana users can log in using OAuth.
	// +kubebuilder:validation:Optional
	AllowSignUp *bool `json:"allowSignUp,omitempty" tf:"allow_sign_up,omitempty"`

	// or space-separated domains. The user should belong to at least one domain to log in.
	// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
	// +kubebuilder:validation:Optional
	AllowedDomains *string `json:"allowedDomains,omitempty" tf:"allowed_domains,omitempty"`

	// or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.
	// +kubebuilder:validation:Optional
	AllowedGroups *string `json:"allowedGroups,omitempty" tf:"allowed_groups,omitempty"`

	// or space-separated organizations. The user should be a member of at least one organization to log in.
	// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
	// +kubebuilder:validation:Optional
	AllowedOrganizations *string `json:"allowedOrganizations,omitempty" tf:"allowed_organizations,omitempty"`

	// (String) It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	// It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	// +kubebuilder:validation:Optional
	AuthStyle *string `json:"authStyle,omitempty" tf:"auth_style,omitempty"`

	// (String) The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// +kubebuilder:validation:Optional
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// (Boolean) Log in automatically, skipping the login screen.
	// Log in automatically, skipping the login screen.
	// +kubebuilder:validation:Optional
	AutoLogin *bool `json:"autoLogin,omitempty" tf:"auto_login,omitempty"`

	// (String) The client Id of your OAuth2 app.
	// The client Id of your OAuth2 app.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// (String, Sensitive) The client secret of your OAuth2 app.
	// The client secret of your OAuth2 app.
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// (Map of String) Custom fields to configure for OAuth2 such as the force_use_graph_api field.
	// Custom fields to configure for OAuth2 such as the [force_use_graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Custom map[string]*string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (Boolean) Define allowed groups.
	// Define allowed groups.
	// +kubebuilder:validation:Optional
	DefineAllowedGroups *bool `json:"defineAllowedGroups,omitempty" tf:"define_allowed_groups,omitempty"`

	// (Boolean) Define allowed teams ids.
	// Define allowed teams ids.
	// +kubebuilder:validation:Optional
	DefineAllowedTeamsIds *bool `json:"defineAllowedTeamsIds,omitempty" tf:"define_allowed_teams_ids,omitempty"`

	// (String) Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	EmailAttributeName *string `json:"emailAttributeName,omitempty" tf:"email_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	EmailAttributePath *string `json:"emailAttributePath,omitempty" tf:"email_attribute_path,omitempty"`

	// (Boolean) If enabled, no scopes will be sent to the OAuth2 provider.
	// If enabled, no scopes will be sent to the OAuth2 provider.
	// +kubebuilder:validation:Optional
	EmptyScopes *bool `json:"emptyScopes,omitempty" tf:"empty_scopes,omitempty"`

	// (Boolean) Define whether this configuration is enabled for the specified provider. Defaults to true.
	// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	// JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.
	// +kubebuilder:validation:Optional
	GroupsAttributePath *string `json:"groupsAttributePath,omitempty" tf:"groups_attribute_path,omitempty"`

	// (String) The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	IDTokenAttributeName *string `json:"idTokenAttributeName,omitempty" tf:"id_token_attribute_name,omitempty"`

	// (String) JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	LoginAttributePath *string `json:"loginAttributePath,omitempty" tf:"login_attribute_path,omitempty"`

	// (String) Helpful if you use more than one identity providers or SSO protocols.
	// Helpful if you use more than one identity providers or SSO protocols.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	NameAttributePath *string `json:"nameAttributePath,omitempty" tf:"name_attribute_path,omitempty"`

	// (String) JMESPath expression to use for Grafana role lookup.
	// JMESPath expression to use for Grafana role lookup.
	// +kubebuilder:validation:Optional
	RoleAttributePath *string `json:"roleAttributePath,omitempty" tf:"role_attribute_path,omitempty"`

	// (Boolean) If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	// +kubebuilder:validation:Optional
	RoleAttributeStrict *bool `json:"roleAttributeStrict,omitempty" tf:"role_attribute_strict,omitempty"`

	// or space-separated OAuth2 scopes.
	// List of comma- or space-separated OAuth2 scopes.
	// +kubebuilder:validation:Optional
	Scopes *string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) The URL to redirect the user to after signing out from Grafana.
	// The URL to redirect the user to after signing out from Grafana.
	// +kubebuilder:validation:Optional
	SignoutRedirectURL *string `json:"signoutRedirectUrl,omitempty" tf:"signout_redirect_url,omitempty"`

	// (Boolean) Prevent synchronizing users’ organization roles from your IdP.
	// Prevent synchronizing users’ organization roles from your IdP.
	// +kubebuilder:validation:Optional
	SkipOrgRoleSync *bool `json:"skipOrgRoleSync,omitempty" tf:"skip_org_role_sync,omitempty"`

	// (String) The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	// +kubebuilder:validation:Optional
	TLSClientCA *string `json:"tlsClientCa,omitempty" tf:"tls_client_ca,omitempty"`

	// (String) The path to the certificate. Is not applicable on Grafana Cloud.
	// The path to the certificate. Is not applicable on Grafana Cloud.
	// +kubebuilder:validation:Optional
	TLSClientCert *string `json:"tlsClientCert,omitempty" tf:"tls_client_cert,omitempty"`

	// (String) The path to the key. Is not applicable on Grafana Cloud.
	// The path to the key. Is not applicable on Grafana Cloud.
	// +kubebuilder:validation:Optional
	TLSClientKey *string `json:"tlsClientKey,omitempty" tf:"tls_client_key,omitempty"`

	// in-the-middle attacks.
	// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
	// +kubebuilder:validation:Optional
	TLSSkipVerifyInsecure *bool `json:"tlsSkipVerifyInsecure,omitempty" tf:"tls_skip_verify_insecure,omitempty"`

	// (String) String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.
	// +kubebuilder:validation:Optional
	TeamIds *string `json:"teamIds,omitempty" tf:"team_ids,omitempty"`

	// (String) The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	TeamIdsAttributePath *string `json:"teamIdsAttributePath,omitempty" tf:"team_ids_attribute_path,omitempty"`

	// (String) The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.
	// +kubebuilder:validation:Optional
	TeamsURL *string `json:"teamsUrl,omitempty" tf:"teams_url,omitempty"`

	// (String) The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
	// +kubebuilder:validation:Optional
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`

	// (Boolean) If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	// +kubebuilder:validation:Optional
	UsePkce *bool `json:"usePkce,omitempty" tf:"use_pkce,omitempty"`

	// (Boolean) If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	// +kubebuilder:validation:Optional
	UseRefreshToken *bool `json:"useRefreshToken,omitempty" tf:"use_refresh_token,omitempty"`
}

type SsoSettingsInitParameters struct {

	// (Block Set, Min: 1, Max: 1) The SSO settings set. (see below for nested schema)
	// The SSO settings set.
	Oauth2Settings []Oauth2SettingsInitParameters `json:"oauth2Settings,omitempty" tf:"oauth2_settings,omitempty"`

	// (String) The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth.
	// The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`
}

type SsoSettingsObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block Set, Min: 1, Max: 1) The SSO settings set. (see below for nested schema)
	// The SSO settings set.
	Oauth2Settings []Oauth2SettingsObservation `json:"oauth2Settings,omitempty" tf:"oauth2_settings,omitempty"`

	// (String) The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth.
	// The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`
}

type SsoSettingsParameters struct {

	// (Block Set, Min: 1, Max: 1) The SSO settings set. (see below for nested schema)
	// The SSO settings set.
	// +kubebuilder:validation:Optional
	Oauth2Settings []Oauth2SettingsParameters `json:"oauth2Settings,omitempty" tf:"oauth2_settings,omitempty"`

	// (String) The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth.
	// The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth.
	// +kubebuilder:validation:Optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`
}

// SsoSettingsSpec defines the desired state of SsoSettings
type SsoSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SsoSettingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SsoSettingsInitParameters `json:"initProvider,omitempty"`
}

// SsoSettingsStatus defines the observed state of SsoSettings.
type SsoSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SsoSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SsoSettings is the Schema for the SsoSettingss API. Manages Grafana SSO Settings for OAuth2. SAML support will be added soon. Official documentation https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/sso-settings/
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type SsoSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.oauth2Settings) || (has(self.initProvider) && has(self.initProvider.oauth2Settings))",message="spec.forProvider.oauth2Settings is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerName) || (has(self.initProvider) && has(self.initProvider.providerName))",message="spec.forProvider.providerName is a required parameter"
	Spec   SsoSettingsSpec   `json:"spec"`
	Status SsoSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsoSettingsList contains a list of SsoSettingss
type SsoSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SsoSettings `json:"items"`
}

// Repository type metadata.
var (
	SsoSettings_Kind             = "SsoSettings"
	SsoSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SsoSettings_Kind}.String()
	SsoSettings_KindAPIVersion   = SsoSettings_Kind + "." + CRDGroupVersion.String()
	SsoSettings_GroupVersionKind = CRDGroupVersion.WithKind(SsoSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&SsoSettings{}, &SsoSettingsList{})
}
