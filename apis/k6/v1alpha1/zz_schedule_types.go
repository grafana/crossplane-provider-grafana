/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RecurrenceRuleInitParameters struct {

	// (List of String) The weekdays when the 'WEEKLY' recurrence will be applied (e.g., ['MO', 'WE', 'FR']). Cannot be set for other frequencies.
	// The weekdays when the 'WEEKLY' recurrence will be applied (e.g., ['MO', 'WE', 'FR']). Cannot be set for other frequencies.
	Byday []*string `json:"byday,omitempty" tf:"byday,omitempty"`

	// (Number) How many times the recurrence will repeat.
	// How many times the recurrence will repeat.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (String) The frequency of the schedule (HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY).
	// The frequency of the schedule (HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY).
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (Number) The interval between each frequency iteration (e.g., 2 = every 2 hours for HOURLY). Defaults to 1.
	// The interval between each frequency iteration (e.g., 2 = every 2 hours for HOURLY). Defaults to 1.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// (String) The end time for the recurrence (RFC3339 format).
	// The end time for the recurrence (RFC3339 format).
	Until *string `json:"until,omitempty" tf:"until,omitempty"`
}

type RecurrenceRuleObservation struct {

	// (List of String) The weekdays when the 'WEEKLY' recurrence will be applied (e.g., ['MO', 'WE', 'FR']). Cannot be set for other frequencies.
	// The weekdays when the 'WEEKLY' recurrence will be applied (e.g., ['MO', 'WE', 'FR']). Cannot be set for other frequencies.
	Byday []*string `json:"byday,omitempty" tf:"byday,omitempty"`

	// (Number) How many times the recurrence will repeat.
	// How many times the recurrence will repeat.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (String) The frequency of the schedule (HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY).
	// The frequency of the schedule (HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY).
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (Number) The interval between each frequency iteration (e.g., 2 = every 2 hours for HOURLY). Defaults to 1.
	// The interval between each frequency iteration (e.g., 2 = every 2 hours for HOURLY). Defaults to 1.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// (String) The end time for the recurrence (RFC3339 format).
	// The end time for the recurrence (RFC3339 format).
	Until *string `json:"until,omitempty" tf:"until,omitempty"`
}

type RecurrenceRuleParameters struct {

	// (List of String) The weekdays when the 'WEEKLY' recurrence will be applied (e.g., ['MO', 'WE', 'FR']). Cannot be set for other frequencies.
	// The weekdays when the 'WEEKLY' recurrence will be applied (e.g., ['MO', 'WE', 'FR']). Cannot be set for other frequencies.
	// +kubebuilder:validation:Optional
	Byday []*string `json:"byday,omitempty" tf:"byday,omitempty"`

	// (Number) How many times the recurrence will repeat.
	// How many times the recurrence will repeat.
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (String) The frequency of the schedule (HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY).
	// The frequency of the schedule (HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY).
	// +kubebuilder:validation:Optional
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (Number) The interval between each frequency iteration (e.g., 2 = every 2 hours for HOURLY). Defaults to 1.
	// The interval between each frequency iteration (e.g., 2 = every 2 hours for HOURLY). Defaults to 1.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// (String) The end time for the recurrence (RFC3339 format).
	// The end time for the recurrence (RFC3339 format).
	// +kubebuilder:validation:Optional
	Until *string `json:"until,omitempty" tf:"until,omitempty"`
}

type ScheduleInitParameters struct {

	// (String) The identifier of the load test to schedule.
	// The identifier of the load test to schedule.
	LoadTestID *string `json:"loadTestId,omitempty" tf:"load_test_id,omitempty"`

	// (Block, Optional) The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date. (see below for nested schema)
	// The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date.
	RecurrenceRule []RecurrenceRuleInitParameters `json:"recurrenceRule,omitempty" tf:"recurrence_rule,omitempty"`

	// (String) The start time for the schedule (RFC3339 format).
	// The start time for the schedule (RFC3339 format).
	Starts *string `json:"starts,omitempty" tf:"starts,omitempty"`
}

type ScheduleObservation struct {

	// (String) The email of the user who created the schedule.
	// The email of the user who created the schedule.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// (Boolean) Whether the schedule is deactivated.
	// Whether the schedule is deactivated.
	Deactivated *bool `json:"deactivated,omitempty" tf:"deactivated,omitempty"`

	// (String) Numeric identifier of the schedule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The identifier of the load test to schedule.
	// The identifier of the load test to schedule.
	LoadTestID *string `json:"loadTestId,omitempty" tf:"load_test_id,omitempty"`

	// (String) The next scheduled execution time.
	// The next scheduled execution time.
	NextRun *string `json:"nextRun,omitempty" tf:"next_run,omitempty"`

	// (Block, Optional) The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date. (see below for nested schema)
	// The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date.
	RecurrenceRule []RecurrenceRuleObservation `json:"recurrenceRule,omitempty" tf:"recurrence_rule,omitempty"`

	// (String) The start time for the schedule (RFC3339 format).
	// The start time for the schedule (RFC3339 format).
	Starts *string `json:"starts,omitempty" tf:"starts,omitempty"`
}

type ScheduleParameters struct {

	// (String) The identifier of the load test to schedule.
	// The identifier of the load test to schedule.
	// +kubebuilder:validation:Optional
	LoadTestID *string `json:"loadTestId,omitempty" tf:"load_test_id,omitempty"`

	// (Block, Optional) The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date. (see below for nested schema)
	// The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date.
	// +kubebuilder:validation:Optional
	RecurrenceRule []RecurrenceRuleParameters `json:"recurrenceRule,omitempty" tf:"recurrence_rule,omitempty"`

	// (String) The start time for the schedule (RFC3339 format).
	// The start time for the schedule (RFC3339 format).
	// +kubebuilder:validation:Optional
	Starts *string `json:"starts,omitempty" tf:"starts,omitempty"`
}

// ScheduleSpec defines the desired state of Schedule
type ScheduleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScheduleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ScheduleInitParameters `json:"initProvider,omitempty"`
}

// ScheduleStatus defines the observed state of Schedule.
type ScheduleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Schedule is the Schema for the Schedules API. Manages a k6 schedule for automated test execution.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type Schedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loadTestId) || (has(self.initProvider) && has(self.initProvider.loadTestId))",message="spec.forProvider.loadTestId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.starts) || (has(self.initProvider) && has(self.initProvider.starts))",message="spec.forProvider.starts is a required parameter"
	Spec   ScheduleSpec   `json:"spec"`
	Status ScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScheduleList contains a list of Schedules
type ScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Schedule `json:"items"`
}

// Repository type metadata.
var (
	Schedule_Kind             = "Schedule"
	Schedule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Schedule_Kind}.String()
	Schedule_KindAPIVersion   = Schedule_Kind + "." + CRDGroupVersion.String()
	Schedule_GroupVersionKind = CRDGroupVersion.WithKind(Schedule_Kind)
)

func init() {
	SchemeBuilder.Register(&Schedule{}, &ScheduleList{})
}
