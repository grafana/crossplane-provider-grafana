/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectAllowedLoadZonesInitParameters struct {

	// (List of String) List of allowed private k6 load zone IDs for this project.
	// List of allowed private k6 load zone IDs for this project.
	AllowedLoadZones []*string `json:"allowedLoadZones,omitempty" tf:"allowed_load_zones,omitempty"`

	// (String) The identifier of the project to manage private allowed load zones for.
	// The identifier of the project to manage private allowed load zones for.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ProjectAllowedLoadZonesObservation struct {

	// (List of String) List of allowed private k6 load zone IDs for this project.
	// List of allowed private k6 load zone IDs for this project.
	AllowedLoadZones []*string `json:"allowedLoadZones,omitempty" tf:"allowed_load_zones,omitempty"`

	// (String) The identifier of the project. This is set to the same as the project_id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The identifier of the project to manage private allowed load zones for.
	// The identifier of the project to manage private allowed load zones for.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ProjectAllowedLoadZonesParameters struct {

	// (List of String) List of allowed private k6 load zone IDs for this project.
	// List of allowed private k6 load zone IDs for this project.
	// +kubebuilder:validation:Optional
	AllowedLoadZones []*string `json:"allowedLoadZones,omitempty" tf:"allowed_load_zones,omitempty"`

	// (String) The identifier of the project to manage private allowed load zones for.
	// The identifier of the project to manage private allowed load zones for.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

// ProjectAllowedLoadZonesSpec defines the desired state of ProjectAllowedLoadZones
type ProjectAllowedLoadZonesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectAllowedLoadZonesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectAllowedLoadZonesInitParameters `json:"initProvider,omitempty"`
}

// ProjectAllowedLoadZonesStatus defines the observed state of ProjectAllowedLoadZones.
type ProjectAllowedLoadZonesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectAllowedLoadZonesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectAllowedLoadZones is the Schema for the ProjectAllowedLoadZoness API. Manages allowed private load zones for a k6 project.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type ProjectAllowedLoadZones struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.allowedLoadZones) || (has(self.initProvider) && has(self.initProvider.allowedLoadZones))",message="spec.forProvider.allowedLoadZones is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	Spec   ProjectAllowedLoadZonesSpec   `json:"spec"`
	Status ProjectAllowedLoadZonesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectAllowedLoadZonesList contains a list of ProjectAllowedLoadZoness
type ProjectAllowedLoadZonesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectAllowedLoadZones `json:"items"`
}

// Repository type metadata.
var (
	ProjectAllowedLoadZones_Kind             = "ProjectAllowedLoadZones"
	ProjectAllowedLoadZones_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectAllowedLoadZones_Kind}.String()
	ProjectAllowedLoadZones_KindAPIVersion   = ProjectAllowedLoadZones_Kind + "." + CRDGroupVersion.String()
	ProjectAllowedLoadZones_GroupVersionKind = CRDGroupVersion.WithKind(ProjectAllowedLoadZones_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectAllowedLoadZones{}, &ProjectAllowedLoadZonesList{})
}
