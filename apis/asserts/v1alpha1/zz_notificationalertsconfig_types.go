/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NotificationAlertsConfigInitParameters struct {

	// (Map of String) Labels to add to alerts generated by this configuration.
	// Labels to add to alerts generated by this configuration.
	// +mapType=granular
	AlertLabels map[string]*string `json:"alertLabels,omitempty" tf:"alert_labels,omitempty"`

	// (String) Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// (Map of String) Labels to match for this alert configuration.
	// Labels to match for this alert configuration.
	// +mapType=granular
	MatchLabels map[string]*string `json:"matchLabels,omitempty" tf:"match_labels,omitempty"`

	// (String) The name of the alert configuration.
	// The name of the alert configuration.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether this alert configuration is silenced. Defaults to false.
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced *bool `json:"silenced,omitempty" tf:"silenced,omitempty"`
}

type NotificationAlertsConfigObservation struct {

	// (Map of String) Labels to add to alerts generated by this configuration.
	// Labels to add to alerts generated by this configuration.
	// +mapType=granular
	AlertLabels map[string]*string `json:"alertLabels,omitempty" tf:"alert_labels,omitempty"`

	// (String) Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Map of String) Labels to match for this alert configuration.
	// Labels to match for this alert configuration.
	// +mapType=granular
	MatchLabels map[string]*string `json:"matchLabels,omitempty" tf:"match_labels,omitempty"`

	// (String) The name of the alert configuration.
	// The name of the alert configuration.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether this alert configuration is silenced. Defaults to false.
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced *bool `json:"silenced,omitempty" tf:"silenced,omitempty"`
}

type NotificationAlertsConfigParameters struct {

	// (Map of String) Labels to add to alerts generated by this configuration.
	// Labels to add to alerts generated by this configuration.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	AlertLabels map[string]*string `json:"alertLabels,omitempty" tf:"alert_labels,omitempty"`

	// (String) Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	// +kubebuilder:validation:Optional
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// (Map of String) Labels to match for this alert configuration.
	// Labels to match for this alert configuration.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	MatchLabels map[string]*string `json:"matchLabels,omitempty" tf:"match_labels,omitempty"`

	// (String) The name of the alert configuration.
	// The name of the alert configuration.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether this alert configuration is silenced. Defaults to false.
	// Whether this alert configuration is silenced. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Silenced *bool `json:"silenced,omitempty" tf:"silenced,omitempty"`
}

// NotificationAlertsConfigSpec defines the desired state of NotificationAlertsConfig
type NotificationAlertsConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NotificationAlertsConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NotificationAlertsConfigInitParameters `json:"initProvider,omitempty"`
}

// NotificationAlertsConfigStatus defines the observed state of NotificationAlertsConfig.
type NotificationAlertsConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotificationAlertsConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NotificationAlertsConfig is the Schema for the NotificationAlertsConfigs API. Manages Asserts Alert Configurations through Grafana API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type NotificationAlertsConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   NotificationAlertsConfigSpec   `json:"spec"`
	Status NotificationAlertsConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationAlertsConfigList contains a list of NotificationAlertsConfigs
type NotificationAlertsConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotificationAlertsConfig `json:"items"`
}

// Repository type metadata.
var (
	NotificationAlertsConfig_Kind             = "NotificationAlertsConfig"
	NotificationAlertsConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NotificationAlertsConfig_Kind}.String()
	NotificationAlertsConfig_KindAPIVersion   = NotificationAlertsConfig_Kind + "." + CRDGroupVersion.String()
	NotificationAlertsConfig_GroupVersionKind = CRDGroupVersion.WithKind(NotificationAlertsConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&NotificationAlertsConfig{}, &NotificationAlertsConfigList{})
}
