/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomModelRulesInitParameters struct {

	// (String) The name of the custom model rules.
	// The name of the custom model rules.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) The rules configuration for the custom model rules. (see below for nested schema)
	// The rules configuration for the custom model rules.
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type CustomModelRulesObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the custom model rules.
	// The name of the custom model rules.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) The rules configuration for the custom model rules. (see below for nested schema)
	// The rules configuration for the custom model rules.
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`
}

type CustomModelRulesParameters struct {

	// (String) The name of the custom model rules.
	// The name of the custom model rules.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) The rules configuration for the custom model rules. (see below for nested schema)
	// The rules configuration for the custom model rules.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type DefinedByInitParameters struct {

	// (Boolean) Whether this entity is disabled.
	// Whether this rule is disabled. When true, only the 'query' field is used to match an existing rule to disable; other fields are ignored.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (Map of String) Label value mappings for the query.
	// Label value mappings for the query.
	// +mapType=granular
	LabelValues map[string]*string `json:"labelValues,omitempty" tf:"label_values,omitempty"`

	// (Map of String) Literal value mappings for the query.
	// Literal value mappings for the query.
	// +mapType=granular
	Literals map[string]*string `json:"literals,omitempty" tf:"literals,omitempty"`

	// (String) Metric value for the query.
	// Metric value for the query.
	MetricValue *string `json:"metricValue,omitempty" tf:"metric_value,omitempty"`

	// (String) The Prometheus query that defines this entity.
	// The Prometheus query that defines this entity.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type DefinedByObservation struct {

	// (Boolean) Whether this entity is disabled.
	// Whether this rule is disabled. When true, only the 'query' field is used to match an existing rule to disable; other fields are ignored.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (Map of String) Label value mappings for the query.
	// Label value mappings for the query.
	// +mapType=granular
	LabelValues map[string]*string `json:"labelValues,omitempty" tf:"label_values,omitempty"`

	// (Map of String) Literal value mappings for the query.
	// Literal value mappings for the query.
	// +mapType=granular
	Literals map[string]*string `json:"literals,omitempty" tf:"literals,omitempty"`

	// (String) Metric value for the query.
	// Metric value for the query.
	MetricValue *string `json:"metricValue,omitempty" tf:"metric_value,omitempty"`

	// (String) The Prometheus query that defines this entity.
	// The Prometheus query that defines this entity.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type DefinedByParameters struct {

	// (Boolean) Whether this entity is disabled.
	// Whether this rule is disabled. When true, only the 'query' field is used to match an existing rule to disable; other fields are ignored.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (Map of String) Label value mappings for the query.
	// Label value mappings for the query.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	LabelValues map[string]*string `json:"labelValues,omitempty" tf:"label_values,omitempty"`

	// (Map of String) Literal value mappings for the query.
	// Literal value mappings for the query.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Literals map[string]*string `json:"literals,omitempty" tf:"literals,omitempty"`

	// (String) Metric value for the query.
	// Metric value for the query.
	// +kubebuilder:validation:Optional
	MetricValue *string `json:"metricValue,omitempty" tf:"metric_value,omitempty"`

	// (String) The Prometheus query that defines this entity.
	// The Prometheus query that defines this entity.
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

type EntityInitParameters struct {

	// (Block List, Min: 1) List of queries that define this entity. (see below for nested schema)
	// List of queries that define this entity.
	DefinedBy []DefinedByInitParameters `json:"definedBy,omitempty" tf:"defined_by,omitempty"`

	// (Boolean) Whether this entity is disabled.
	// Whether this entity is disabled.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (List of String) List of enrichment sources for the entity.
	// List of enrichment sources for the entity.
	EnrichedBy []*string `json:"enrichedBy,omitempty" tf:"enriched_by,omitempty"`

	// (Map of String) Lookup mappings for the entity.
	// Lookup mappings for the entity.
	// +mapType=granular
	Lookup map[string]*string `json:"lookup,omitempty" tf:"lookup,omitempty"`

	// (String) The name of the custom model rules.
	// The name of the entity.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Map of String) Scope labels for the entity.
	// Scope labels for the entity.
	// +mapType=granular
	Scope map[string]*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) The type of the entity (e.g., Service, Pod, Namespace).
	// The type of the entity (e.g., Service, Pod, Namespace).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EntityObservation struct {

	// (Block List, Min: 1) List of queries that define this entity. (see below for nested schema)
	// List of queries that define this entity.
	DefinedBy []DefinedByObservation `json:"definedBy,omitempty" tf:"defined_by,omitempty"`

	// (Boolean) Whether this entity is disabled.
	// Whether this entity is disabled.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (List of String) List of enrichment sources for the entity.
	// List of enrichment sources for the entity.
	EnrichedBy []*string `json:"enrichedBy,omitempty" tf:"enriched_by,omitempty"`

	// (Map of String) Lookup mappings for the entity.
	// Lookup mappings for the entity.
	// +mapType=granular
	Lookup map[string]*string `json:"lookup,omitempty" tf:"lookup,omitempty"`

	// (String) The name of the custom model rules.
	// The name of the entity.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Map of String) Scope labels for the entity.
	// Scope labels for the entity.
	// +mapType=granular
	Scope map[string]*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) The type of the entity (e.g., Service, Pod, Namespace).
	// The type of the entity (e.g., Service, Pod, Namespace).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EntityParameters struct {

	// (Block List, Min: 1) List of queries that define this entity. (see below for nested schema)
	// List of queries that define this entity.
	// +kubebuilder:validation:Optional
	DefinedBy []DefinedByParameters `json:"definedBy" tf:"defined_by,omitempty"`

	// (Boolean) Whether this entity is disabled.
	// Whether this entity is disabled.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (List of String) List of enrichment sources for the entity.
	// List of enrichment sources for the entity.
	// +kubebuilder:validation:Optional
	EnrichedBy []*string `json:"enrichedBy,omitempty" tf:"enriched_by,omitempty"`

	// (Map of String) Lookup mappings for the entity.
	// Lookup mappings for the entity.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Lookup map[string]*string `json:"lookup,omitempty" tf:"lookup,omitempty"`

	// (String) The name of the custom model rules.
	// The name of the entity.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Map of String) Scope labels for the entity.
	// Scope labels for the entity.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Scope map[string]*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) The type of the entity (e.g., Service, Pod, Namespace).
	// The type of the entity (e.g., Service, Pod, Namespace).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type RulesInitParameters struct {

	// (Block List, Min: 1) List of entities to define in the custom model rules. (see below for nested schema)
	// List of entities to define in the custom model rules.
	Entity []EntityInitParameters `json:"entity,omitempty" tf:"entity,omitempty"`
}

type RulesObservation struct {

	// (Block List, Min: 1) List of entities to define in the custom model rules. (see below for nested schema)
	// List of entities to define in the custom model rules.
	Entity []EntityObservation `json:"entity,omitempty" tf:"entity,omitempty"`
}

type RulesParameters struct {

	// (Block List, Min: 1) List of entities to define in the custom model rules. (see below for nested schema)
	// List of entities to define in the custom model rules.
	// +kubebuilder:validation:Optional
	Entity []EntityParameters `json:"entity" tf:"entity,omitempty"`
}

// CustomModelRulesSpec defines the desired state of CustomModelRules
type CustomModelRulesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomModelRulesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CustomModelRulesInitParameters `json:"initProvider,omitempty"`
}

// CustomModelRulesStatus defines the observed state of CustomModelRules.
type CustomModelRulesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomModelRulesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CustomModelRules is the Schema for the CustomModelRuless API. Manages Asserts Custom Model Rules through the Grafana API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type CustomModelRules struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	Spec   CustomModelRulesSpec   `json:"spec"`
	Status CustomModelRulesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomModelRulesList contains a list of CustomModelRuless
type CustomModelRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomModelRules `json:"items"`
}

// Repository type metadata.
var (
	CustomModelRules_Kind             = "CustomModelRules"
	CustomModelRules_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomModelRules_Kind}.String()
	CustomModelRules_KindAPIVersion   = CustomModelRules_Kind + "." + CRDGroupVersion.String()
	CustomModelRules_GroupVersionKind = CRDGroupVersion.WithKind(CustomModelRules_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomModelRules{}, &CustomModelRulesList{})
}
