/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/grafana/crossplane-provider-grafana/apis/oss/v1alpha1"
	grafana "github.com/grafana/crossplane-provider-grafana/config/grafana"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Job.
func (mg *Job) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatasourceUID),
		Extract:      grafana.UIDExtractor(),
		Reference:    mg.Spec.ForProvider.DataSourceRef,
		Selector:     mg.Spec.ForProvider.DataSourceSelector,
		To: reference.To{
			List:    &v1alpha1.DataSourceList{},
			Managed: &v1alpha1.DataSource{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatasourceUID")
	}
	mg.Spec.ForProvider.DatasourceUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataSourceRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatasourceUID),
		Extract:      grafana.UIDExtractor(),
		Reference:    mg.Spec.InitProvider.DataSourceRef,
		Selector:     mg.Spec.InitProvider.DataSourceSelector,
		To: reference.To{
			List:    &v1alpha1.DataSourceList{},
			Managed: &v1alpha1.DataSource{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatasourceUID")
	}
	mg.Spec.InitProvider.DatasourceUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DataSourceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this OutlierDetector.
func (mg *OutlierDetector) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatasourceUID),
		Extract:      grafana.UIDExtractor(),
		Reference:    mg.Spec.ForProvider.DataSourceRef,
		Selector:     mg.Spec.ForProvider.DataSourceSelector,
		To: reference.To{
			List:    &v1alpha1.DataSourceList{},
			Managed: &v1alpha1.DataSource{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatasourceUID")
	}
	mg.Spec.ForProvider.DatasourceUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataSourceRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatasourceUID),
		Extract:      grafana.UIDExtractor(),
		Reference:    mg.Spec.InitProvider.DataSourceRef,
		Selector:     mg.Spec.InitProvider.DataSourceSelector,
		To: reference.To{
			List:    &v1alpha1.DataSourceList{},
			Managed: &v1alpha1.DataSource{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatasourceUID")
	}
	mg.Spec.InitProvider.DatasourceUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DataSourceRef = rsp.ResolvedReference

	return nil
}
