/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PipelineInitParameters struct {

	// (String) Configuration contents of the pipeline to be used by collectors
	// Configuration contents of the pipeline to be used by collectors
	Contents *string `json:"contents,omitempty" tf:"contents,omitempty"`

	// (Boolean) Whether the pipeline is enabled for collectors
	// Whether the pipeline is enabled for collectors
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (List of String) Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
	// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
	Matchers []*string `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (String) Name of the pipeline which is the unique identifier for the pipeline
	// Name of the pipeline which is the unique identifier for the pipeline
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PipelineObservation struct {

	// (String) Configuration contents of the pipeline to be used by collectors
	// Configuration contents of the pipeline to be used by collectors
	Contents *string `json:"contents,omitempty" tf:"contents,omitempty"`

	// (Boolean) Whether the pipeline is enabled for collectors
	// Whether the pipeline is enabled for collectors
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// assigned ID of the pipeline
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (List of String) Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
	// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
	Matchers []*string `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (String) Name of the pipeline which is the unique identifier for the pipeline
	// Name of the pipeline which is the unique identifier for the pipeline
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PipelineParameters struct {

	// (String) Configuration contents of the pipeline to be used by collectors
	// Configuration contents of the pipeline to be used by collectors
	// +kubebuilder:validation:Optional
	Contents *string `json:"contents,omitempty" tf:"contents,omitempty"`

	// (Boolean) Whether the pipeline is enabled for collectors
	// Whether the pipeline is enabled for collectors
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (List of String) Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
	// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
	// +kubebuilder:validation:Optional
	Matchers []*string `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (String) Name of the pipeline which is the unique identifier for the pipeline
	// Name of the pipeline which is the unique identifier for the pipeline
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// PipelineSpec defines the desired state of Pipeline
type PipelineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PipelineParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PipelineInitParameters `json:"initProvider,omitempty"`
}

// PipelineStatus defines the observed state of Pipeline.
type PipelineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PipelineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Pipeline is the Schema for the Pipelines API. Manages Grafana Fleet Management pipelines. Official documentation https://grafana.com/docs/grafana-cloud/send-data/fleet-management/API documentation https://grafana.com/docs/grafana-cloud/send-data/fleet-management/api-reference/pipeline-api/ Required access policy scopes: fleet-management:readfleet-management:write
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type Pipeline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contents) || (has(self.initProvider) && has(self.initProvider.contents))",message="spec.forProvider.contents is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PipelineSpec   `json:"spec"`
	Status PipelineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PipelineList contains a list of Pipelines
type PipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Pipeline `json:"items"`
}

// Repository type metadata.
var (
	Pipeline_Kind             = "Pipeline"
	Pipeline_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Pipeline_Kind}.String()
	Pipeline_KindAPIVersion   = Pipeline_Kind + "." + CRDGroupVersion.String()
	Pipeline_GroupVersionKind = CRDGroupVersion.WithKind(Pipeline_Kind)
)

func init() {
	SchemeBuilder.Register(&Pipeline{}, &PipelineList{})
}
