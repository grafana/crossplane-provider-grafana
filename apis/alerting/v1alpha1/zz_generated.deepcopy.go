//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertenrichmentV1Beta1) DeepCopyInto(out *AlertenrichmentV1Beta1) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertenrichmentV1Beta1.
func (in *AlertenrichmentV1Beta1) DeepCopy() *AlertenrichmentV1Beta1 {
	if in == nil {
		return nil
	}
	out := new(AlertenrichmentV1Beta1)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AlertenrichmentV1Beta1) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertenrichmentV1Beta1InitParameters) DeepCopyInto(out *AlertenrichmentV1Beta1InitParameters) {
	*out = *in
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]MetadataInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]OptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = make([]SpecInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertenrichmentV1Beta1InitParameters.
func (in *AlertenrichmentV1Beta1InitParameters) DeepCopy() *AlertenrichmentV1Beta1InitParameters {
	if in == nil {
		return nil
	}
	out := new(AlertenrichmentV1Beta1InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertenrichmentV1Beta1List) DeepCopyInto(out *AlertenrichmentV1Beta1List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AlertenrichmentV1Beta1, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertenrichmentV1Beta1List.
func (in *AlertenrichmentV1Beta1List) DeepCopy() *AlertenrichmentV1Beta1List {
	if in == nil {
		return nil
	}
	out := new(AlertenrichmentV1Beta1List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AlertenrichmentV1Beta1List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertenrichmentV1Beta1Observation) DeepCopyInto(out *AlertenrichmentV1Beta1Observation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]MetadataObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]OptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = make([]SpecObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertenrichmentV1Beta1Observation.
func (in *AlertenrichmentV1Beta1Observation) DeepCopy() *AlertenrichmentV1Beta1Observation {
	if in == nil {
		return nil
	}
	out := new(AlertenrichmentV1Beta1Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertenrichmentV1Beta1Parameters) DeepCopyInto(out *AlertenrichmentV1Beta1Parameters) {
	*out = *in
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]MetadataParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]OptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = make([]SpecParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertenrichmentV1Beta1Parameters.
func (in *AlertenrichmentV1Beta1Parameters) DeepCopy() *AlertenrichmentV1Beta1Parameters {
	if in == nil {
		return nil
	}
	out := new(AlertenrichmentV1Beta1Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertenrichmentV1Beta1Spec) DeepCopyInto(out *AlertenrichmentV1Beta1Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertenrichmentV1Beta1Spec.
func (in *AlertenrichmentV1Beta1Spec) DeepCopy() *AlertenrichmentV1Beta1Spec {
	if in == nil {
		return nil
	}
	out := new(AlertenrichmentV1Beta1Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertenrichmentV1Beta1Status) DeepCopyInto(out *AlertenrichmentV1Beta1Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertenrichmentV1Beta1Status.
func (in *AlertenrichmentV1Beta1Status) DeepCopy() *AlertenrichmentV1Beta1Status {
	if in == nil {
		return nil
	}
	out := new(AlertenrichmentV1Beta1Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertmanagerInitParameters) DeepCopyInto(out *AlertmanagerInitParameters) {
	*out = *in
	if in.BasicAuthPasswordSecretRef != nil {
		in, out := &in.BasicAuthPasswordSecretRef, &out.BasicAuthPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.BasicAuthUser != nil {
		in, out := &in.BasicAuthUser, &out.BasicAuthUser
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertmanagerInitParameters.
func (in *AlertmanagerInitParameters) DeepCopy() *AlertmanagerInitParameters {
	if in == nil {
		return nil
	}
	out := new(AlertmanagerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertmanagerObservation) DeepCopyInto(out *AlertmanagerObservation) {
	*out = *in
	if in.BasicAuthUser != nil {
		in, out := &in.BasicAuthUser, &out.BasicAuthUser
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertmanagerObservation.
func (in *AlertmanagerObservation) DeepCopy() *AlertmanagerObservation {
	if in == nil {
		return nil
	}
	out := new(AlertmanagerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertmanagerParameters) DeepCopyInto(out *AlertmanagerParameters) {
	*out = *in
	if in.BasicAuthPasswordSecretRef != nil {
		in, out := &in.BasicAuthPasswordSecretRef, &out.BasicAuthPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.BasicAuthUser != nil {
		in, out := &in.BasicAuthUser, &out.BasicAuthUser
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertmanagerParameters.
func (in *AlertmanagerParameters) DeepCopy() *AlertmanagerParameters {
	if in == nil {
		return nil
	}
	out := new(AlertmanagerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnnotationMatchersInitParameters) DeepCopyInto(out *AnnotationMatchersInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnnotationMatchersInitParameters.
func (in *AnnotationMatchersInitParameters) DeepCopy() *AnnotationMatchersInitParameters {
	if in == nil {
		return nil
	}
	out := new(AnnotationMatchersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnnotationMatchersObservation) DeepCopyInto(out *AnnotationMatchersObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnnotationMatchersObservation.
func (in *AnnotationMatchersObservation) DeepCopy() *AnnotationMatchersObservation {
	if in == nil {
		return nil
	}
	out := new(AnnotationMatchersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnnotationMatchersParameters) DeepCopyInto(out *AnnotationMatchersParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnnotationMatchersParameters.
func (in *AnnotationMatchersParameters) DeepCopy() *AnnotationMatchersParameters {
	if in == nil {
		return nil
	}
	out := new(AnnotationMatchersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssertsInitParameters) DeepCopyInto(out *AssertsInitParameters) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssertsInitParameters.
func (in *AssertsInitParameters) DeepCopy() *AssertsInitParameters {
	if in == nil {
		return nil
	}
	out := new(AssertsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssertsObservation) DeepCopyInto(out *AssertsObservation) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssertsObservation.
func (in *AssertsObservation) DeepCopy() *AssertsObservation {
	if in == nil {
		return nil
	}
	out := new(AssertsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssertsParameters) DeepCopyInto(out *AssertsParameters) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssertsParameters.
func (in *AssertsParameters) DeepCopy() *AssertsParameters {
	if in == nil {
		return nil
	}
	out := new(AssertsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssignInitParameters) DeepCopyInto(out *AssignInitParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssignInitParameters.
func (in *AssignInitParameters) DeepCopy() *AssignInitParameters {
	if in == nil {
		return nil
	}
	out := new(AssignInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssignObservation) DeepCopyInto(out *AssignObservation) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssignObservation.
func (in *AssignObservation) DeepCopy() *AssignObservation {
	if in == nil {
		return nil
	}
	out := new(AssignObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssignParameters) DeepCopyInto(out *AssignParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssignParameters.
func (in *AssignParameters) DeepCopy() *AssignParameters {
	if in == nil {
		return nil
	}
	out := new(AssignParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssistantInvestigationsInitParameters) DeepCopyInto(out *AssistantInvestigationsInitParameters) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssistantInvestigationsInitParameters.
func (in *AssistantInvestigationsInitParameters) DeepCopy() *AssistantInvestigationsInitParameters {
	if in == nil {
		return nil
	}
	out := new(AssistantInvestigationsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssistantInvestigationsObservation) DeepCopyInto(out *AssistantInvestigationsObservation) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssistantInvestigationsObservation.
func (in *AssistantInvestigationsObservation) DeepCopy() *AssistantInvestigationsObservation {
	if in == nil {
		return nil
	}
	out := new(AssistantInvestigationsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssistantInvestigationsParameters) DeepCopyInto(out *AssistantInvestigationsParameters) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssistantInvestigationsParameters.
func (in *AssistantInvestigationsParameters) DeepCopy() *AssistantInvestigationsParameters {
	if in == nil {
		return nil
	}
	out := new(AssistantInvestigationsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContactPoint) DeepCopyInto(out *ContactPoint) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContactPoint.
func (in *ContactPoint) DeepCopy() *ContactPoint {
	if in == nil {
		return nil
	}
	out := new(ContactPoint)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ContactPoint) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContactPointInitParameters) DeepCopyInto(out *ContactPointInitParameters) {
	*out = *in
	if in.Alertmanager != nil {
		in, out := &in.Alertmanager, &out.Alertmanager
		*out = make([]AlertmanagerInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Dingding != nil {
		in, out := &in.Dingding, &out.Dingding
		*out = make([]DingdingInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.Discord != nil {
		in, out := &in.Discord, &out.Discord
		*out = make([]DiscordInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		*out = make([]EmailInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Googlechat != nil {
		in, out := &in.Googlechat, &out.Googlechat
		*out = make([]GooglechatInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = make([]KafkaInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Line != nil {
		in, out := &in.Line, &out.Line
		*out = make([]LineInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Oncall != nil {
		in, out := &in.Oncall, &out.Oncall
		*out = make([]OncallInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Opsgenie != nil {
		in, out := &in.Opsgenie, &out.Opsgenie
		*out = make([]OpsgenieInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRef != nil {
		in, out := &in.OrganizationRef, &out.OrganizationRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrganizationSelector != nil {
		in, out := &in.OrganizationSelector, &out.OrganizationSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Pagerduty != nil {
		in, out := &in.Pagerduty, &out.Pagerduty
		*out = make([]PagerdutyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pushover != nil {
		in, out := &in.Pushover, &out.Pushover
		*out = make([]PushoverInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Sensugo != nil {
		in, out := &in.Sensugo, &out.Sensugo
		*out = make([]SensugoInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Slack != nil {
		in, out := &in.Slack, &out.Slack
		*out = make([]SlackInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Sns != nil {
		in, out := &in.Sns, &out.Sns
		*out = make([]SnsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Teams != nil {
		in, out := &in.Teams, &out.Teams
		*out = make([]TeamsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Telegram != nil {
		in, out := &in.Telegram, &out.Telegram
		*out = make([]TelegramInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Threema != nil {
		in, out := &in.Threema, &out.Threema
		*out = make([]ThreemaInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Victorops != nil {
		in, out := &in.Victorops, &out.Victorops
		*out = make([]VictoropsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Webex != nil {
		in, out := &in.Webex, &out.Webex
		*out = make([]WebexInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Webhook != nil {
		in, out := &in.Webhook, &out.Webhook
		*out = make([]WebhookInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Wecom != nil {
		in, out := &in.Wecom, &out.Wecom
		*out = make([]WecomInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContactPointInitParameters.
func (in *ContactPointInitParameters) DeepCopy() *ContactPointInitParameters {
	if in == nil {
		return nil
	}
	out := new(ContactPointInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContactPointList) DeepCopyInto(out *ContactPointList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ContactPoint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContactPointList.
func (in *ContactPointList) DeepCopy() *ContactPointList {
	if in == nil {
		return nil
	}
	out := new(ContactPointList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ContactPointList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContactPointObservation) DeepCopyInto(out *ContactPointObservation) {
	*out = *in
	if in.Alertmanager != nil {
		in, out := &in.Alertmanager, &out.Alertmanager
		*out = make([]AlertmanagerObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Dingding != nil {
		in, out := &in.Dingding, &out.Dingding
		*out = make([]DingdingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.Discord != nil {
		in, out := &in.Discord, &out.Discord
		*out = make([]DiscordObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		*out = make([]EmailObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Googlechat != nil {
		in, out := &in.Googlechat, &out.Googlechat
		*out = make([]GooglechatObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = make([]KafkaObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Line != nil {
		in, out := &in.Line, &out.Line
		*out = make([]LineObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Oncall != nil {
		in, out := &in.Oncall, &out.Oncall
		*out = make([]OncallObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Opsgenie != nil {
		in, out := &in.Opsgenie, &out.Opsgenie
		*out = make([]OpsgenieObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.Pagerduty != nil {
		in, out := &in.Pagerduty, &out.Pagerduty
		*out = make([]PagerdutyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pushover != nil {
		in, out := &in.Pushover, &out.Pushover
		*out = make([]PushoverObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Sensugo != nil {
		in, out := &in.Sensugo, &out.Sensugo
		*out = make([]SensugoObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Slack != nil {
		in, out := &in.Slack, &out.Slack
		*out = make([]SlackObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Sns != nil {
		in, out := &in.Sns, &out.Sns
		*out = make([]SnsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Teams != nil {
		in, out := &in.Teams, &out.Teams
		*out = make([]TeamsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Telegram != nil {
		in, out := &in.Telegram, &out.Telegram
		*out = make([]TelegramObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Threema != nil {
		in, out := &in.Threema, &out.Threema
		*out = make([]ThreemaObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Victorops != nil {
		in, out := &in.Victorops, &out.Victorops
		*out = make([]VictoropsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Webex != nil {
		in, out := &in.Webex, &out.Webex
		*out = make([]WebexObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Webhook != nil {
		in, out := &in.Webhook, &out.Webhook
		*out = make([]WebhookObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Wecom != nil {
		in, out := &in.Wecom, &out.Wecom
		*out = make([]WecomObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContactPointObservation.
func (in *ContactPointObservation) DeepCopy() *ContactPointObservation {
	if in == nil {
		return nil
	}
	out := new(ContactPointObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContactPointParameters) DeepCopyInto(out *ContactPointParameters) {
	*out = *in
	if in.Alertmanager != nil {
		in, out := &in.Alertmanager, &out.Alertmanager
		*out = make([]AlertmanagerParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Dingding != nil {
		in, out := &in.Dingding, &out.Dingding
		*out = make([]DingdingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.Discord != nil {
		in, out := &in.Discord, &out.Discord
		*out = make([]DiscordParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		*out = make([]EmailParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Googlechat != nil {
		in, out := &in.Googlechat, &out.Googlechat
		*out = make([]GooglechatParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = make([]KafkaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Line != nil {
		in, out := &in.Line, &out.Line
		*out = make([]LineParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Oncall != nil {
		in, out := &in.Oncall, &out.Oncall
		*out = make([]OncallParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Opsgenie != nil {
		in, out := &in.Opsgenie, &out.Opsgenie
		*out = make([]OpsgenieParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRef != nil {
		in, out := &in.OrganizationRef, &out.OrganizationRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrganizationSelector != nil {
		in, out := &in.OrganizationSelector, &out.OrganizationSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Pagerduty != nil {
		in, out := &in.Pagerduty, &out.Pagerduty
		*out = make([]PagerdutyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pushover != nil {
		in, out := &in.Pushover, &out.Pushover
		*out = make([]PushoverParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Sensugo != nil {
		in, out := &in.Sensugo, &out.Sensugo
		*out = make([]SensugoParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Slack != nil {
		in, out := &in.Slack, &out.Slack
		*out = make([]SlackParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Sns != nil {
		in, out := &in.Sns, &out.Sns
		*out = make([]SnsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Teams != nil {
		in, out := &in.Teams, &out.Teams
		*out = make([]TeamsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Telegram != nil {
		in, out := &in.Telegram, &out.Telegram
		*out = make([]TelegramParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Threema != nil {
		in, out := &in.Threema, &out.Threema
		*out = make([]ThreemaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Victorops != nil {
		in, out := &in.Victorops, &out.Victorops
		*out = make([]VictoropsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Webex != nil {
		in, out := &in.Webex, &out.Webex
		*out = make([]WebexParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Webhook != nil {
		in, out := &in.Webhook, &out.Webhook
		*out = make([]WebhookParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Wecom != nil {
		in, out := &in.Wecom, &out.Wecom
		*out = make([]WecomParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContactPointParameters.
func (in *ContactPointParameters) DeepCopy() *ContactPointParameters {
	if in == nil {
		return nil
	}
	out := new(ContactPointParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContactPointSpec) DeepCopyInto(out *ContactPointSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContactPointSpec.
func (in *ContactPointSpec) DeepCopy() *ContactPointSpec {
	if in == nil {
		return nil
	}
	out := new(ContactPointSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContactPointStatus) DeepCopyInto(out *ContactPointStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContactPointStatus.
func (in *ContactPointStatus) DeepCopy() *ContactPointStatus {
	if in == nil {
		return nil
	}
	out := new(ContactPointStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataInitParameters) DeepCopyInto(out *DataInitParameters) {
	*out = *in
	if in.DatasourceUID != nil {
		in, out := &in.DatasourceUID, &out.DatasourceUID
		*out = new(string)
		**out = **in
	}
	if in.Model != nil {
		in, out := &in.Model, &out.Model
		*out = new(string)
		**out = **in
	}
	if in.QueryType != nil {
		in, out := &in.QueryType, &out.QueryType
		*out = new(string)
		**out = **in
	}
	if in.RefID != nil {
		in, out := &in.RefID, &out.RefID
		*out = new(string)
		**out = **in
	}
	if in.RelativeTimeRange != nil {
		in, out := &in.RelativeTimeRange, &out.RelativeTimeRange
		*out = make([]RelativeTimeRangeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataInitParameters.
func (in *DataInitParameters) DeepCopy() *DataInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataObservation) DeepCopyInto(out *DataObservation) {
	*out = *in
	if in.DatasourceUID != nil {
		in, out := &in.DatasourceUID, &out.DatasourceUID
		*out = new(string)
		**out = **in
	}
	if in.Model != nil {
		in, out := &in.Model, &out.Model
		*out = new(string)
		**out = **in
	}
	if in.QueryType != nil {
		in, out := &in.QueryType, &out.QueryType
		*out = new(string)
		**out = **in
	}
	if in.RefID != nil {
		in, out := &in.RefID, &out.RefID
		*out = new(string)
		**out = **in
	}
	if in.RelativeTimeRange != nil {
		in, out := &in.RelativeTimeRange, &out.RelativeTimeRange
		*out = make([]RelativeTimeRangeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataObservation.
func (in *DataObservation) DeepCopy() *DataObservation {
	if in == nil {
		return nil
	}
	out := new(DataObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataParameters) DeepCopyInto(out *DataParameters) {
	*out = *in
	if in.DatasourceUID != nil {
		in, out := &in.DatasourceUID, &out.DatasourceUID
		*out = new(string)
		**out = **in
	}
	if in.Model != nil {
		in, out := &in.Model, &out.Model
		*out = new(string)
		**out = **in
	}
	if in.QueryType != nil {
		in, out := &in.QueryType, &out.QueryType
		*out = new(string)
		**out = **in
	}
	if in.RefID != nil {
		in, out := &in.RefID, &out.RefID
		*out = new(string)
		**out = **in
	}
	if in.RelativeTimeRange != nil {
		in, out := &in.RelativeTimeRange, &out.RelativeTimeRange
		*out = make([]RelativeTimeRangeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataParameters.
func (in *DataParameters) DeepCopy() *DataParameters {
	if in == nil {
		return nil
	}
	out := new(DataParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataSourceInitParameters) DeepCopyInto(out *DataSourceInitParameters) {
	*out = *in
	if in.LogsQuery != nil {
		in, out := &in.LogsQuery, &out.LogsQuery
		*out = make([]LogsQueryInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RawQuery != nil {
		in, out := &in.RawQuery, &out.RawQuery
		*out = make([]RawQueryInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataSourceInitParameters.
func (in *DataSourceInitParameters) DeepCopy() *DataSourceInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataSourceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataSourceObservation) DeepCopyInto(out *DataSourceObservation) {
	*out = *in
	if in.LogsQuery != nil {
		in, out := &in.LogsQuery, &out.LogsQuery
		*out = make([]LogsQueryObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RawQuery != nil {
		in, out := &in.RawQuery, &out.RawQuery
		*out = make([]RawQueryObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataSourceObservation.
func (in *DataSourceObservation) DeepCopy() *DataSourceObservation {
	if in == nil {
		return nil
	}
	out := new(DataSourceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataSourceParameters) DeepCopyInto(out *DataSourceParameters) {
	*out = *in
	if in.LogsQuery != nil {
		in, out := &in.LogsQuery, &out.LogsQuery
		*out = make([]LogsQueryParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RawQuery != nil {
		in, out := &in.RawQuery, &out.RawQuery
		*out = make([]RawQueryParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataSourceParameters.
func (in *DataSourceParameters) DeepCopy() *DataSourceParameters {
	if in == nil {
		return nil
	}
	out := new(DataSourceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DingdingInitParameters) DeepCopyInto(out *DingdingInitParameters) {
	*out = *in
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MessageType != nil {
		in, out := &in.MessageType, &out.MessageType
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.URLSecretRef = in.URLSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DingdingInitParameters.
func (in *DingdingInitParameters) DeepCopy() *DingdingInitParameters {
	if in == nil {
		return nil
	}
	out := new(DingdingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DingdingObservation) DeepCopyInto(out *DingdingObservation) {
	*out = *in
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MessageType != nil {
		in, out := &in.MessageType, &out.MessageType
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DingdingObservation.
func (in *DingdingObservation) DeepCopy() *DingdingObservation {
	if in == nil {
		return nil
	}
	out := new(DingdingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DingdingParameters) DeepCopyInto(out *DingdingParameters) {
	*out = *in
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MessageType != nil {
		in, out := &in.MessageType, &out.MessageType
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.URLSecretRef = in.URLSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DingdingParameters.
func (in *DingdingParameters) DeepCopy() *DingdingParameters {
	if in == nil {
		return nil
	}
	out := new(DingdingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiscordInitParameters) DeepCopyInto(out *DiscordInitParameters) {
	*out = *in
	if in.AvatarURL != nil {
		in, out := &in.AvatarURL, &out.AvatarURL
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.URLSecretRef = in.URLSecretRef
	if in.UseDiscordUsername != nil {
		in, out := &in.UseDiscordUsername, &out.UseDiscordUsername
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiscordInitParameters.
func (in *DiscordInitParameters) DeepCopy() *DiscordInitParameters {
	if in == nil {
		return nil
	}
	out := new(DiscordInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiscordObservation) DeepCopyInto(out *DiscordObservation) {
	*out = *in
	if in.AvatarURL != nil {
		in, out := &in.AvatarURL, &out.AvatarURL
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.UseDiscordUsername != nil {
		in, out := &in.UseDiscordUsername, &out.UseDiscordUsername
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiscordObservation.
func (in *DiscordObservation) DeepCopy() *DiscordObservation {
	if in == nil {
		return nil
	}
	out := new(DiscordObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiscordParameters) DeepCopyInto(out *DiscordParameters) {
	*out = *in
	if in.AvatarURL != nil {
		in, out := &in.AvatarURL, &out.AvatarURL
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.URLSecretRef = in.URLSecretRef
	if in.UseDiscordUsername != nil {
		in, out := &in.UseDiscordUsername, &out.UseDiscordUsername
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiscordParameters.
func (in *DiscordParameters) DeepCopy() *DiscordParameters {
	if in == nil {
		return nil
	}
	out := new(DiscordParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EmailInitParameters) DeepCopyInto(out *EmailInitParameters) {
	*out = *in
	if in.Addresses != nil {
		in, out := &in.Addresses, &out.Addresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SingleEmail != nil {
		in, out := &in.SingleEmail, &out.SingleEmail
		*out = new(bool)
		**out = **in
	}
	if in.Subject != nil {
		in, out := &in.Subject, &out.Subject
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EmailInitParameters.
func (in *EmailInitParameters) DeepCopy() *EmailInitParameters {
	if in == nil {
		return nil
	}
	out := new(EmailInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EmailObservation) DeepCopyInto(out *EmailObservation) {
	*out = *in
	if in.Addresses != nil {
		in, out := &in.Addresses, &out.Addresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.SingleEmail != nil {
		in, out := &in.SingleEmail, &out.SingleEmail
		*out = new(bool)
		**out = **in
	}
	if in.Subject != nil {
		in, out := &in.Subject, &out.Subject
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EmailObservation.
func (in *EmailObservation) DeepCopy() *EmailObservation {
	if in == nil {
		return nil
	}
	out := new(EmailObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EmailParameters) DeepCopyInto(out *EmailParameters) {
	*out = *in
	if in.Addresses != nil {
		in, out := &in.Addresses, &out.Addresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.SingleEmail != nil {
		in, out := &in.SingleEmail, &out.SingleEmail
		*out = new(bool)
		**out = **in
	}
	if in.Subject != nil {
		in, out := &in.Subject, &out.Subject
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EmailParameters.
func (in *EmailParameters) DeepCopy() *EmailParameters {
	if in == nil {
		return nil
	}
	out := new(EmailParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExplainInitParameters) DeepCopyInto(out *ExplainInitParameters) {
	*out = *in
	if in.Annotation != nil {
		in, out := &in.Annotation, &out.Annotation
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExplainInitParameters.
func (in *ExplainInitParameters) DeepCopy() *ExplainInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExplainInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExplainObservation) DeepCopyInto(out *ExplainObservation) {
	*out = *in
	if in.Annotation != nil {
		in, out := &in.Annotation, &out.Annotation
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExplainObservation.
func (in *ExplainObservation) DeepCopy() *ExplainObservation {
	if in == nil {
		return nil
	}
	out := new(ExplainObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExplainParameters) DeepCopyInto(out *ExplainParameters) {
	*out = *in
	if in.Annotation != nil {
		in, out := &in.Annotation, &out.Annotation
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExplainParameters.
func (in *ExplainParameters) DeepCopy() *ExplainParameters {
	if in == nil {
		return nil
	}
	out := new(ExplainParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalInitParameters) DeepCopyInto(out *ExternalInitParameters) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalInitParameters.
func (in *ExternalInitParameters) DeepCopy() *ExternalInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExternalInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalObservation) DeepCopyInto(out *ExternalObservation) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalObservation.
func (in *ExternalObservation) DeepCopy() *ExternalObservation {
	if in == nil {
		return nil
	}
	out := new(ExternalObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalParameters) DeepCopyInto(out *ExternalParameters) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalParameters.
func (in *ExternalParameters) DeepCopy() *ExternalParameters {
	if in == nil {
		return nil
	}
	out := new(ExternalParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GooglechatInitParameters) DeepCopyInto(out *GooglechatInitParameters) {
	*out = *in
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.URLSecretRef = in.URLSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GooglechatInitParameters.
func (in *GooglechatInitParameters) DeepCopy() *GooglechatInitParameters {
	if in == nil {
		return nil
	}
	out := new(GooglechatInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GooglechatObservation) DeepCopyInto(out *GooglechatObservation) {
	*out = *in
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GooglechatObservation.
func (in *GooglechatObservation) DeepCopy() *GooglechatObservation {
	if in == nil {
		return nil
	}
	out := new(GooglechatObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GooglechatParameters) DeepCopyInto(out *GooglechatParameters) {
	*out = *in
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.URLSecretRef = in.URLSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GooglechatParameters.
func (in *GooglechatParameters) DeepCopy() *GooglechatParameters {
	if in == nil {
		return nil
	}
	out := new(GooglechatParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HMACConfigInitParameters) DeepCopyInto(out *HMACConfigInitParameters) {
	*out = *in
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = new(string)
		**out = **in
	}
	out.SecretSecretRef = in.SecretSecretRef
	if in.TimestampHeader != nil {
		in, out := &in.TimestampHeader, &out.TimestampHeader
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HMACConfigInitParameters.
func (in *HMACConfigInitParameters) DeepCopy() *HMACConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(HMACConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HMACConfigObservation) DeepCopyInto(out *HMACConfigObservation) {
	*out = *in
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = new(string)
		**out = **in
	}
	if in.TimestampHeader != nil {
		in, out := &in.TimestampHeader, &out.TimestampHeader
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HMACConfigObservation.
func (in *HMACConfigObservation) DeepCopy() *HMACConfigObservation {
	if in == nil {
		return nil
	}
	out := new(HMACConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HMACConfigParameters) DeepCopyInto(out *HMACConfigParameters) {
	*out = *in
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = new(string)
		**out = **in
	}
	out.SecretSecretRef = in.SecretSecretRef
	if in.TimestampHeader != nil {
		in, out := &in.TimestampHeader, &out.TimestampHeader
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HMACConfigParameters.
func (in *HMACConfigParameters) DeepCopy() *HMACConfigParameters {
	if in == nil {
		return nil
	}
	out := new(HMACConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPConfigInitParameters) DeepCopyInto(out *HTTPConfigInitParameters) {
	*out = *in
	if in.Oauth2 != nil {
		in, out := &in.Oauth2, &out.Oauth2
		*out = make([]Oauth2InitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPConfigInitParameters.
func (in *HTTPConfigInitParameters) DeepCopy() *HTTPConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(HTTPConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPConfigObservation) DeepCopyInto(out *HTTPConfigObservation) {
	*out = *in
	if in.Oauth2 != nil {
		in, out := &in.Oauth2, &out.Oauth2
		*out = make([]Oauth2Observation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPConfigObservation.
func (in *HTTPConfigObservation) DeepCopy() *HTTPConfigObservation {
	if in == nil {
		return nil
	}
	out := new(HTTPConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPConfigParameters) DeepCopyInto(out *HTTPConfigParameters) {
	*out = *in
	if in.Oauth2 != nil {
		in, out := &in.Oauth2, &out.Oauth2
		*out = make([]Oauth2Parameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPConfigParameters.
func (in *HTTPConfigParameters) DeepCopy() *HTTPConfigParameters {
	if in == nil {
		return nil
	}
	out := new(HTTPConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IntervalsInitParameters) DeepCopyInto(out *IntervalsInitParameters) {
	*out = *in
	if in.DaysOfMonth != nil {
		in, out := &in.DaysOfMonth, &out.DaysOfMonth
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Months != nil {
		in, out := &in.Months, &out.Months
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Times != nil {
		in, out := &in.Times, &out.Times
		*out = make([]TimesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Weekdays != nil {
		in, out := &in.Weekdays, &out.Weekdays
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Years != nil {
		in, out := &in.Years, &out.Years
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IntervalsInitParameters.
func (in *IntervalsInitParameters) DeepCopy() *IntervalsInitParameters {
	if in == nil {
		return nil
	}
	out := new(IntervalsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IntervalsObservation) DeepCopyInto(out *IntervalsObservation) {
	*out = *in
	if in.DaysOfMonth != nil {
		in, out := &in.DaysOfMonth, &out.DaysOfMonth
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Months != nil {
		in, out := &in.Months, &out.Months
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Times != nil {
		in, out := &in.Times, &out.Times
		*out = make([]TimesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Weekdays != nil {
		in, out := &in.Weekdays, &out.Weekdays
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Years != nil {
		in, out := &in.Years, &out.Years
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IntervalsObservation.
func (in *IntervalsObservation) DeepCopy() *IntervalsObservation {
	if in == nil {
		return nil
	}
	out := new(IntervalsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IntervalsParameters) DeepCopyInto(out *IntervalsParameters) {
	*out = *in
	if in.DaysOfMonth != nil {
		in, out := &in.DaysOfMonth, &out.DaysOfMonth
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Months != nil {
		in, out := &in.Months, &out.Months
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Times != nil {
		in, out := &in.Times, &out.Times
		*out = make([]TimesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Weekdays != nil {
		in, out := &in.Weekdays, &out.Weekdays
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Years != nil {
		in, out := &in.Years, &out.Years
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IntervalsParameters.
func (in *IntervalsParameters) DeepCopy() *IntervalsParameters {
	if in == nil {
		return nil
	}
	out := new(IntervalsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaInitParameters) DeepCopyInto(out *KafkaInitParameters) {
	*out = *in
	if in.APIVersion != nil {
		in, out := &in.APIVersion, &out.APIVersion
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Details != nil {
		in, out := &in.Details, &out.Details
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	out.RestProxyURLSecretRef = in.RestProxyURLSecretRef
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaInitParameters.
func (in *KafkaInitParameters) DeepCopy() *KafkaInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaObservation) DeepCopyInto(out *KafkaObservation) {
	*out = *in
	if in.APIVersion != nil {
		in, out := &in.APIVersion, &out.APIVersion
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Details != nil {
		in, out := &in.Details, &out.Details
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaObservation.
func (in *KafkaObservation) DeepCopy() *KafkaObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaParameters) DeepCopyInto(out *KafkaParameters) {
	*out = *in
	if in.APIVersion != nil {
		in, out := &in.APIVersion, &out.APIVersion
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Details != nil {
		in, out := &in.Details, &out.Details
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	out.RestProxyURLSecretRef = in.RestProxyURLSecretRef
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaParameters.
func (in *KafkaParameters) DeepCopy() *KafkaParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelMatchersInitParameters) DeepCopyInto(out *LabelMatchersInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelMatchersInitParameters.
func (in *LabelMatchersInitParameters) DeepCopy() *LabelMatchersInitParameters {
	if in == nil {
		return nil
	}
	out := new(LabelMatchersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelMatchersObservation) DeepCopyInto(out *LabelMatchersObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelMatchersObservation.
func (in *LabelMatchersObservation) DeepCopy() *LabelMatchersObservation {
	if in == nil {
		return nil
	}
	out := new(LabelMatchersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelMatchersParameters) DeepCopyInto(out *LabelMatchersParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelMatchersParameters.
func (in *LabelMatchersParameters) DeepCopy() *LabelMatchersParameters {
	if in == nil {
		return nil
	}
	out := new(LabelMatchersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LineInitParameters) DeepCopyInto(out *LineInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.TokenSecretRef = in.TokenSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LineInitParameters.
func (in *LineInitParameters) DeepCopy() *LineInitParameters {
	if in == nil {
		return nil
	}
	out := new(LineInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LineObservation) DeepCopyInto(out *LineObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LineObservation.
func (in *LineObservation) DeepCopy() *LineObservation {
	if in == nil {
		return nil
	}
	out := new(LineObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LineParameters) DeepCopyInto(out *LineParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.TokenSecretRef = in.TokenSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LineParameters.
func (in *LineParameters) DeepCopy() *LineParameters {
	if in == nil {
		return nil
	}
	out := new(LineParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogsQueryInitParameters) DeepCopyInto(out *LogsQueryInitParameters) {
	*out = *in
	if in.DataSourceType != nil {
		in, out := &in.DataSourceType, &out.DataSourceType
		*out = new(string)
		**out = **in
	}
	if in.DataSourceUID != nil {
		in, out := &in.DataSourceUID, &out.DataSourceUID
		*out = new(string)
		**out = **in
	}
	if in.Expr != nil {
		in, out := &in.Expr, &out.Expr
		*out = new(string)
		**out = **in
	}
	if in.MaxLines != nil {
		in, out := &in.MaxLines, &out.MaxLines
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogsQueryInitParameters.
func (in *LogsQueryInitParameters) DeepCopy() *LogsQueryInitParameters {
	if in == nil {
		return nil
	}
	out := new(LogsQueryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogsQueryObservation) DeepCopyInto(out *LogsQueryObservation) {
	*out = *in
	if in.DataSourceType != nil {
		in, out := &in.DataSourceType, &out.DataSourceType
		*out = new(string)
		**out = **in
	}
	if in.DataSourceUID != nil {
		in, out := &in.DataSourceUID, &out.DataSourceUID
		*out = new(string)
		**out = **in
	}
	if in.Expr != nil {
		in, out := &in.Expr, &out.Expr
		*out = new(string)
		**out = **in
	}
	if in.MaxLines != nil {
		in, out := &in.MaxLines, &out.MaxLines
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogsQueryObservation.
func (in *LogsQueryObservation) DeepCopy() *LogsQueryObservation {
	if in == nil {
		return nil
	}
	out := new(LogsQueryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogsQueryParameters) DeepCopyInto(out *LogsQueryParameters) {
	*out = *in
	if in.DataSourceType != nil {
		in, out := &in.DataSourceType, &out.DataSourceType
		*out = new(string)
		**out = **in
	}
	if in.DataSourceUID != nil {
		in, out := &in.DataSourceUID, &out.DataSourceUID
		*out = new(string)
		**out = **in
	}
	if in.Expr != nil {
		in, out := &in.Expr, &out.Expr
		*out = new(string)
		**out = **in
	}
	if in.MaxLines != nil {
		in, out := &in.MaxLines, &out.MaxLines
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogsQueryParameters.
func (in *LogsQueryParameters) DeepCopy() *LogsQueryParameters {
	if in == nil {
		return nil
	}
	out := new(LogsQueryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MatcherInitParameters) DeepCopyInto(out *MatcherInitParameters) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MatcherInitParameters.
func (in *MatcherInitParameters) DeepCopy() *MatcherInitParameters {
	if in == nil {
		return nil
	}
	out := new(MatcherInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MatcherObservation) DeepCopyInto(out *MatcherObservation) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MatcherObservation.
func (in *MatcherObservation) DeepCopy() *MatcherObservation {
	if in == nil {
		return nil
	}
	out := new(MatcherObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MatcherParameters) DeepCopyInto(out *MatcherParameters) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MatcherParameters.
func (in *MatcherParameters) DeepCopy() *MatcherParameters {
	if in == nil {
		return nil
	}
	out := new(MatcherParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MessageTemplate) DeepCopyInto(out *MessageTemplate) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MessageTemplate.
func (in *MessageTemplate) DeepCopy() *MessageTemplate {
	if in == nil {
		return nil
	}
	out := new(MessageTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MessageTemplate) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MessageTemplateInitParameters) DeepCopyInto(out *MessageTemplateInitParameters) {
	*out = *in
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRef != nil {
		in, out := &in.OrganizationRef, &out.OrganizationRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrganizationSelector != nil {
		in, out := &in.OrganizationSelector, &out.OrganizationSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Template != nil {
		in, out := &in.Template, &out.Template
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MessageTemplateInitParameters.
func (in *MessageTemplateInitParameters) DeepCopy() *MessageTemplateInitParameters {
	if in == nil {
		return nil
	}
	out := new(MessageTemplateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MessageTemplateList) DeepCopyInto(out *MessageTemplateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MessageTemplate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MessageTemplateList.
func (in *MessageTemplateList) DeepCopy() *MessageTemplateList {
	if in == nil {
		return nil
	}
	out := new(MessageTemplateList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MessageTemplateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MessageTemplateObservation) DeepCopyInto(out *MessageTemplateObservation) {
	*out = *in
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.Template != nil {
		in, out := &in.Template, &out.Template
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MessageTemplateObservation.
func (in *MessageTemplateObservation) DeepCopy() *MessageTemplateObservation {
	if in == nil {
		return nil
	}
	out := new(MessageTemplateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MessageTemplateParameters) DeepCopyInto(out *MessageTemplateParameters) {
	*out = *in
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRef != nil {
		in, out := &in.OrganizationRef, &out.OrganizationRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrganizationSelector != nil {
		in, out := &in.OrganizationSelector, &out.OrganizationSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Template != nil {
		in, out := &in.Template, &out.Template
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MessageTemplateParameters.
func (in *MessageTemplateParameters) DeepCopy() *MessageTemplateParameters {
	if in == nil {
		return nil
	}
	out := new(MessageTemplateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MessageTemplateSpec) DeepCopyInto(out *MessageTemplateSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MessageTemplateSpec.
func (in *MessageTemplateSpec) DeepCopy() *MessageTemplateSpec {
	if in == nil {
		return nil
	}
	out := new(MessageTemplateSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MessageTemplateStatus) DeepCopyInto(out *MessageTemplateStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MessageTemplateStatus.
func (in *MessageTemplateStatus) DeepCopy() *MessageTemplateStatus {
	if in == nil {
		return nil
	}
	out := new(MessageTemplateStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetadataInitParameters) DeepCopyInto(out *MetadataInitParameters) {
	*out = *in
	if in.FolderUID != nil {
		in, out := &in.FolderUID, &out.FolderUID
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetadataInitParameters.
func (in *MetadataInitParameters) DeepCopy() *MetadataInitParameters {
	if in == nil {
		return nil
	}
	out := new(MetadataInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetadataObservation) DeepCopyInto(out *MetadataObservation) {
	*out = *in
	if in.FolderUID != nil {
		in, out := &in.FolderUID, &out.FolderUID
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetadataObservation.
func (in *MetadataObservation) DeepCopy() *MetadataObservation {
	if in == nil {
		return nil
	}
	out := new(MetadataObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetadataParameters) DeepCopyInto(out *MetadataParameters) {
	*out = *in
	if in.FolderUID != nil {
		in, out := &in.FolderUID, &out.FolderUID
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetadataParameters.
func (in *MetadataParameters) DeepCopy() *MetadataParameters {
	if in == nil {
		return nil
	}
	out := new(MetadataParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MuteTiming) DeepCopyInto(out *MuteTiming) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MuteTiming.
func (in *MuteTiming) DeepCopy() *MuteTiming {
	if in == nil {
		return nil
	}
	out := new(MuteTiming)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MuteTiming) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MuteTimingInitParameters) DeepCopyInto(out *MuteTimingInitParameters) {
	*out = *in
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.Intervals != nil {
		in, out := &in.Intervals, &out.Intervals
		*out = make([]IntervalsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRef != nil {
		in, out := &in.OrganizationRef, &out.OrganizationRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrganizationSelector != nil {
		in, out := &in.OrganizationSelector, &out.OrganizationSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MuteTimingInitParameters.
func (in *MuteTimingInitParameters) DeepCopy() *MuteTimingInitParameters {
	if in == nil {
		return nil
	}
	out := new(MuteTimingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MuteTimingList) DeepCopyInto(out *MuteTimingList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MuteTiming, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MuteTimingList.
func (in *MuteTimingList) DeepCopy() *MuteTimingList {
	if in == nil {
		return nil
	}
	out := new(MuteTimingList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MuteTimingList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MuteTimingObservation) DeepCopyInto(out *MuteTimingObservation) {
	*out = *in
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Intervals != nil {
		in, out := &in.Intervals, &out.Intervals
		*out = make([]IntervalsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MuteTimingObservation.
func (in *MuteTimingObservation) DeepCopy() *MuteTimingObservation {
	if in == nil {
		return nil
	}
	out := new(MuteTimingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MuteTimingParameters) DeepCopyInto(out *MuteTimingParameters) {
	*out = *in
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.Intervals != nil {
		in, out := &in.Intervals, &out.Intervals
		*out = make([]IntervalsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRef != nil {
		in, out := &in.OrganizationRef, &out.OrganizationRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrganizationSelector != nil {
		in, out := &in.OrganizationSelector, &out.OrganizationSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MuteTimingParameters.
func (in *MuteTimingParameters) DeepCopy() *MuteTimingParameters {
	if in == nil {
		return nil
	}
	out := new(MuteTimingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MuteTimingSpec) DeepCopyInto(out *MuteTimingSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MuteTimingSpec.
func (in *MuteTimingSpec) DeepCopy() *MuteTimingSpec {
	if in == nil {
		return nil
	}
	out := new(MuteTimingSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MuteTimingStatus) DeepCopyInto(out *MuteTimingStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MuteTimingStatus.
func (in *MuteTimingStatus) DeepCopy() *MuteTimingStatus {
	if in == nil {
		return nil
	}
	out := new(MuteTimingStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationPolicy) DeepCopyInto(out *NotificationPolicy) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationPolicy.
func (in *NotificationPolicy) DeepCopy() *NotificationPolicy {
	if in == nil {
		return nil
	}
	out := new(NotificationPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NotificationPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationPolicyInitParameters) DeepCopyInto(out *NotificationPolicyInitParameters) {
	*out = *in
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRef != nil {
		in, out := &in.OrganizationRef, &out.OrganizationRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrganizationSelector != nil {
		in, out := &in.OrganizationSelector, &out.OrganizationSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationPolicyInitParameters.
func (in *NotificationPolicyInitParameters) DeepCopy() *NotificationPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(NotificationPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationPolicyList) DeepCopyInto(out *NotificationPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NotificationPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationPolicyList.
func (in *NotificationPolicyList) DeepCopy() *NotificationPolicyList {
	if in == nil {
		return nil
	}
	out := new(NotificationPolicyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NotificationPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationPolicyObservation) DeepCopyInto(out *NotificationPolicyObservation) {
	*out = *in
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationPolicyObservation.
func (in *NotificationPolicyObservation) DeepCopy() *NotificationPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(NotificationPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationPolicyParameters) DeepCopyInto(out *NotificationPolicyParameters) {
	*out = *in
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRef != nil {
		in, out := &in.OrganizationRef, &out.OrganizationRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrganizationSelector != nil {
		in, out := &in.OrganizationSelector, &out.OrganizationSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationPolicyParameters.
func (in *NotificationPolicyParameters) DeepCopy() *NotificationPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(NotificationPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationPolicySpec) DeepCopyInto(out *NotificationPolicySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationPolicySpec.
func (in *NotificationPolicySpec) DeepCopy() *NotificationPolicySpec {
	if in == nil {
		return nil
	}
	out := new(NotificationPolicySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationPolicyStatus) DeepCopyInto(out *NotificationPolicyStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationPolicyStatus.
func (in *NotificationPolicyStatus) DeepCopy() *NotificationPolicyStatus {
	if in == nil {
		return nil
	}
	out := new(NotificationPolicyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationSettingsInitParameters) DeepCopyInto(out *NotificationSettingsInitParameters) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationSettingsInitParameters.
func (in *NotificationSettingsInitParameters) DeepCopy() *NotificationSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(NotificationSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationSettingsObservation) DeepCopyInto(out *NotificationSettingsObservation) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationSettingsObservation.
func (in *NotificationSettingsObservation) DeepCopy() *NotificationSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(NotificationSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationSettingsParameters) DeepCopyInto(out *NotificationSettingsParameters) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationSettingsParameters.
func (in *NotificationSettingsParameters) DeepCopy() *NotificationSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(NotificationSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Oauth2InitParameters) DeepCopyInto(out *Oauth2InitParameters) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	out.ClientSecretSecretRef = in.ClientSecretSecretRef
	if in.EndpointParams != nil {
		in, out := &in.EndpointParams, &out.EndpointParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ProxyConfig != nil {
		in, out := &in.ProxyConfig, &out.ProxyConfig
		*out = make([]ProxyConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TLSConfig != nil {
		in, out := &in.TLSConfig, &out.TLSConfig
		*out = make([]TLSConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TokenURL != nil {
		in, out := &in.TokenURL, &out.TokenURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Oauth2InitParameters.
func (in *Oauth2InitParameters) DeepCopy() *Oauth2InitParameters {
	if in == nil {
		return nil
	}
	out := new(Oauth2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Oauth2Observation) DeepCopyInto(out *Oauth2Observation) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.EndpointParams != nil {
		in, out := &in.EndpointParams, &out.EndpointParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ProxyConfig != nil {
		in, out := &in.ProxyConfig, &out.ProxyConfig
		*out = make([]ProxyConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TLSConfig != nil {
		in, out := &in.TLSConfig, &out.TLSConfig
		*out = make([]TLSConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TokenURL != nil {
		in, out := &in.TokenURL, &out.TokenURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Oauth2Observation.
func (in *Oauth2Observation) DeepCopy() *Oauth2Observation {
	if in == nil {
		return nil
	}
	out := new(Oauth2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Oauth2Parameters) DeepCopyInto(out *Oauth2Parameters) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	out.ClientSecretSecretRef = in.ClientSecretSecretRef
	if in.EndpointParams != nil {
		in, out := &in.EndpointParams, &out.EndpointParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ProxyConfig != nil {
		in, out := &in.ProxyConfig, &out.ProxyConfig
		*out = make([]ProxyConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TLSConfig != nil {
		in, out := &in.TLSConfig, &out.TLSConfig
		*out = make([]TLSConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TokenURL != nil {
		in, out := &in.TokenURL, &out.TokenURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Oauth2Parameters.
func (in *Oauth2Parameters) DeepCopy() *Oauth2Parameters {
	if in == nil {
		return nil
	}
	out := new(Oauth2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OncallInitParameters) DeepCopyInto(out *OncallInitParameters) {
	*out = *in
	if in.AuthorizationCredentialsSecretRef != nil {
		in, out := &in.AuthorizationCredentialsSecretRef, &out.AuthorizationCredentialsSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AuthorizationScheme != nil {
		in, out := &in.AuthorizationScheme, &out.AuthorizationScheme
		*out = new(string)
		**out = **in
	}
	if in.BasicAuthPasswordSecretRef != nil {
		in, out := &in.BasicAuthPasswordSecretRef, &out.BasicAuthPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.BasicAuthUser != nil {
		in, out := &in.BasicAuthUser, &out.BasicAuthUser
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.HTTPMethod != nil {
		in, out := &in.HTTPMethod, &out.HTTPMethod
		*out = new(string)
		**out = **in
	}
	if in.MaxAlerts != nil {
		in, out := &in.MaxAlerts, &out.MaxAlerts
		*out = new(float64)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OncallInitParameters.
func (in *OncallInitParameters) DeepCopy() *OncallInitParameters {
	if in == nil {
		return nil
	}
	out := new(OncallInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OncallObservation) DeepCopyInto(out *OncallObservation) {
	*out = *in
	if in.AuthorizationScheme != nil {
		in, out := &in.AuthorizationScheme, &out.AuthorizationScheme
		*out = new(string)
		**out = **in
	}
	if in.BasicAuthUser != nil {
		in, out := &in.BasicAuthUser, &out.BasicAuthUser
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.HTTPMethod != nil {
		in, out := &in.HTTPMethod, &out.HTTPMethod
		*out = new(string)
		**out = **in
	}
	if in.MaxAlerts != nil {
		in, out := &in.MaxAlerts, &out.MaxAlerts
		*out = new(float64)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OncallObservation.
func (in *OncallObservation) DeepCopy() *OncallObservation {
	if in == nil {
		return nil
	}
	out := new(OncallObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OncallParameters) DeepCopyInto(out *OncallParameters) {
	*out = *in
	if in.AuthorizationCredentialsSecretRef != nil {
		in, out := &in.AuthorizationCredentialsSecretRef, &out.AuthorizationCredentialsSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AuthorizationScheme != nil {
		in, out := &in.AuthorizationScheme, &out.AuthorizationScheme
		*out = new(string)
		**out = **in
	}
	if in.BasicAuthPasswordSecretRef != nil {
		in, out := &in.BasicAuthPasswordSecretRef, &out.BasicAuthPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.BasicAuthUser != nil {
		in, out := &in.BasicAuthUser, &out.BasicAuthUser
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.HTTPMethod != nil {
		in, out := &in.HTTPMethod, &out.HTTPMethod
		*out = new(string)
		**out = **in
	}
	if in.MaxAlerts != nil {
		in, out := &in.MaxAlerts, &out.MaxAlerts
		*out = new(float64)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OncallParameters.
func (in *OncallParameters) DeepCopy() *OncallParameters {
	if in == nil {
		return nil
	}
	out := new(OncallParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpsgenieInitParameters) DeepCopyInto(out *OpsgenieInitParameters) {
	*out = *in
	out.APIKeySecretRef = in.APIKeySecretRef
	if in.AutoClose != nil {
		in, out := &in.AutoClose, &out.AutoClose
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.OverridePriority != nil {
		in, out := &in.OverridePriority, &out.OverridePriority
		*out = new(bool)
		**out = **in
	}
	if in.Responders != nil {
		in, out := &in.Responders, &out.Responders
		*out = make([]RespondersInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SendTagsAs != nil {
		in, out := &in.SendTagsAs, &out.SendTagsAs
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpsgenieInitParameters.
func (in *OpsgenieInitParameters) DeepCopy() *OpsgenieInitParameters {
	if in == nil {
		return nil
	}
	out := new(OpsgenieInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpsgenieObservation) DeepCopyInto(out *OpsgenieObservation) {
	*out = *in
	if in.AutoClose != nil {
		in, out := &in.AutoClose, &out.AutoClose
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.OverridePriority != nil {
		in, out := &in.OverridePriority, &out.OverridePriority
		*out = new(bool)
		**out = **in
	}
	if in.Responders != nil {
		in, out := &in.Responders, &out.Responders
		*out = make([]RespondersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SendTagsAs != nil {
		in, out := &in.SendTagsAs, &out.SendTagsAs
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpsgenieObservation.
func (in *OpsgenieObservation) DeepCopy() *OpsgenieObservation {
	if in == nil {
		return nil
	}
	out := new(OpsgenieObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpsgenieParameters) DeepCopyInto(out *OpsgenieParameters) {
	*out = *in
	out.APIKeySecretRef = in.APIKeySecretRef
	if in.AutoClose != nil {
		in, out := &in.AutoClose, &out.AutoClose
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.OverridePriority != nil {
		in, out := &in.OverridePriority, &out.OverridePriority
		*out = new(bool)
		**out = **in
	}
	if in.Responders != nil {
		in, out := &in.Responders, &out.Responders
		*out = make([]RespondersParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SendTagsAs != nil {
		in, out := &in.SendTagsAs, &out.SendTagsAs
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpsgenieParameters.
func (in *OpsgenieParameters) DeepCopy() *OpsgenieParameters {
	if in == nil {
		return nil
	}
	out := new(OpsgenieParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OptionsInitParameters) DeepCopyInto(out *OptionsInitParameters) {
	*out = *in
	if in.Overwrite != nil {
		in, out := &in.Overwrite, &out.Overwrite
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OptionsInitParameters.
func (in *OptionsInitParameters) DeepCopy() *OptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(OptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OptionsObservation) DeepCopyInto(out *OptionsObservation) {
	*out = *in
	if in.Overwrite != nil {
		in, out := &in.Overwrite, &out.Overwrite
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OptionsObservation.
func (in *OptionsObservation) DeepCopy() *OptionsObservation {
	if in == nil {
		return nil
	}
	out := new(OptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OptionsParameters) DeepCopyInto(out *OptionsParameters) {
	*out = *in
	if in.Overwrite != nil {
		in, out := &in.Overwrite, &out.Overwrite
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OptionsParameters.
func (in *OptionsParameters) DeepCopy() *OptionsParameters {
	if in == nil {
		return nil
	}
	out := new(OptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PagerdutyInitParameters) DeepCopyInto(out *PagerdutyInitParameters) {
	*out = *in
	if in.Class != nil {
		in, out := &in.Class, &out.Class
		*out = new(string)
		**out = **in
	}
	if in.Client != nil {
		in, out := &in.Client, &out.Client
		*out = new(string)
		**out = **in
	}
	if in.ClientURL != nil {
		in, out := &in.ClientURL, &out.ClientURL
		*out = new(string)
		**out = **in
	}
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = new(string)
		**out = **in
	}
	if in.Details != nil {
		in, out := &in.Details, &out.Details
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	out.IntegrationKeySecretRef = in.IntegrationKeySecretRef
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Summary != nil {
		in, out := &in.Summary, &out.Summary
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PagerdutyInitParameters.
func (in *PagerdutyInitParameters) DeepCopy() *PagerdutyInitParameters {
	if in == nil {
		return nil
	}
	out := new(PagerdutyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PagerdutyObservation) DeepCopyInto(out *PagerdutyObservation) {
	*out = *in
	if in.Class != nil {
		in, out := &in.Class, &out.Class
		*out = new(string)
		**out = **in
	}
	if in.Client != nil {
		in, out := &in.Client, &out.Client
		*out = new(string)
		**out = **in
	}
	if in.ClientURL != nil {
		in, out := &in.ClientURL, &out.ClientURL
		*out = new(string)
		**out = **in
	}
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = new(string)
		**out = **in
	}
	if in.Details != nil {
		in, out := &in.Details, &out.Details
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Summary != nil {
		in, out := &in.Summary, &out.Summary
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PagerdutyObservation.
func (in *PagerdutyObservation) DeepCopy() *PagerdutyObservation {
	if in == nil {
		return nil
	}
	out := new(PagerdutyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PagerdutyParameters) DeepCopyInto(out *PagerdutyParameters) {
	*out = *in
	if in.Class != nil {
		in, out := &in.Class, &out.Class
		*out = new(string)
		**out = **in
	}
	if in.Client != nil {
		in, out := &in.Client, &out.Client
		*out = new(string)
		**out = **in
	}
	if in.ClientURL != nil {
		in, out := &in.ClientURL, &out.ClientURL
		*out = new(string)
		**out = **in
	}
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = new(string)
		**out = **in
	}
	if in.Details != nil {
		in, out := &in.Details, &out.Details
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	out.IntegrationKeySecretRef = in.IntegrationKeySecretRef
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Summary != nil {
		in, out := &in.Summary, &out.Summary
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PagerdutyParameters.
func (in *PagerdutyParameters) DeepCopy() *PagerdutyParameters {
	if in == nil {
		return nil
	}
	out := new(PagerdutyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayloadInitParameters) DeepCopyInto(out *PayloadInitParameters) {
	*out = *in
	if in.Template != nil {
		in, out := &in.Template, &out.Template
		*out = new(string)
		**out = **in
	}
	if in.Vars != nil {
		in, out := &in.Vars, &out.Vars
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayloadInitParameters.
func (in *PayloadInitParameters) DeepCopy() *PayloadInitParameters {
	if in == nil {
		return nil
	}
	out := new(PayloadInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayloadObservation) DeepCopyInto(out *PayloadObservation) {
	*out = *in
	if in.Template != nil {
		in, out := &in.Template, &out.Template
		*out = new(string)
		**out = **in
	}
	if in.Vars != nil {
		in, out := &in.Vars, &out.Vars
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayloadObservation.
func (in *PayloadObservation) DeepCopy() *PayloadObservation {
	if in == nil {
		return nil
	}
	out := new(PayloadObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayloadParameters) DeepCopyInto(out *PayloadParameters) {
	*out = *in
	if in.Template != nil {
		in, out := &in.Template, &out.Template
		*out = new(string)
		**out = **in
	}
	if in.Vars != nil {
		in, out := &in.Vars, &out.Vars
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayloadParameters.
func (in *PayloadParameters) DeepCopy() *PayloadParameters {
	if in == nil {
		return nil
	}
	out := new(PayloadParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyInitParameters) DeepCopyInto(out *PolicyInitParameters) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]MatcherInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingRef != nil {
		in, out := &in.MuteTimingRef, &out.MuteTimingRef
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingSelector != nil {
		in, out := &in.MuteTimingSelector, &out.MuteTimingSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyInitParameters.
func (in *PolicyInitParameters) DeepCopy() *PolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyMatcherInitParameters) DeepCopyInto(out *PolicyMatcherInitParameters) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyMatcherInitParameters.
func (in *PolicyMatcherInitParameters) DeepCopy() *PolicyMatcherInitParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyMatcherInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyMatcherObservation) DeepCopyInto(out *PolicyMatcherObservation) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyMatcherObservation.
func (in *PolicyMatcherObservation) DeepCopy() *PolicyMatcherObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyMatcherObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyMatcherParameters) DeepCopyInto(out *PolicyMatcherParameters) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyMatcherParameters.
func (in *PolicyMatcherParameters) DeepCopy() *PolicyMatcherParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyMatcherParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyObservation) DeepCopyInto(out *PolicyObservation) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]MatcherObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyObservation.
func (in *PolicyObservation) DeepCopy() *PolicyObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyParameters) DeepCopyInto(out *PolicyParameters) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]MatcherParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingRef != nil {
		in, out := &in.MuteTimingRef, &out.MuteTimingRef
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingSelector != nil {
		in, out := &in.MuteTimingSelector, &out.MuteTimingSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyParameters.
func (in *PolicyParameters) DeepCopy() *PolicyParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyInitParameters) DeepCopyInto(out *PolicyPolicyInitParameters) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]PolicyMatcherInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingRef != nil {
		in, out := &in.MuteTimingRef, &out.MuteTimingRef
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingSelector != nil {
		in, out := &in.MuteTimingSelector, &out.MuteTimingSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyPolicyPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyInitParameters.
func (in *PolicyPolicyInitParameters) DeepCopy() *PolicyPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyMatcherInitParameters) DeepCopyInto(out *PolicyPolicyMatcherInitParameters) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyMatcherInitParameters.
func (in *PolicyPolicyMatcherInitParameters) DeepCopy() *PolicyPolicyMatcherInitParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyMatcherInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyMatcherObservation) DeepCopyInto(out *PolicyPolicyMatcherObservation) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyMatcherObservation.
func (in *PolicyPolicyMatcherObservation) DeepCopy() *PolicyPolicyMatcherObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyMatcherObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyMatcherParameters) DeepCopyInto(out *PolicyPolicyMatcherParameters) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyMatcherParameters.
func (in *PolicyPolicyMatcherParameters) DeepCopy() *PolicyPolicyMatcherParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyMatcherParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyObservation) DeepCopyInto(out *PolicyPolicyObservation) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]PolicyMatcherObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyPolicyPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyObservation.
func (in *PolicyPolicyObservation) DeepCopy() *PolicyPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyParameters) DeepCopyInto(out *PolicyPolicyParameters) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]PolicyMatcherParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingRef != nil {
		in, out := &in.MuteTimingRef, &out.MuteTimingRef
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingSelector != nil {
		in, out := &in.MuteTimingSelector, &out.MuteTimingSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyPolicyPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyParameters.
func (in *PolicyPolicyParameters) DeepCopy() *PolicyPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyPolicyInitParameters) DeepCopyInto(out *PolicyPolicyPolicyInitParameters) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]PolicyPolicyMatcherInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingRef != nil {
		in, out := &in.MuteTimingRef, &out.MuteTimingRef
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingSelector != nil {
		in, out := &in.MuteTimingSelector, &out.MuteTimingSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyPolicyPolicyPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyPolicyInitParameters.
func (in *PolicyPolicyPolicyInitParameters) DeepCopy() *PolicyPolicyPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyPolicyMatcherInitParameters) DeepCopyInto(out *PolicyPolicyPolicyMatcherInitParameters) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyPolicyMatcherInitParameters.
func (in *PolicyPolicyPolicyMatcherInitParameters) DeepCopy() *PolicyPolicyPolicyMatcherInitParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyPolicyMatcherInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyPolicyMatcherObservation) DeepCopyInto(out *PolicyPolicyPolicyMatcherObservation) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyPolicyMatcherObservation.
func (in *PolicyPolicyPolicyMatcherObservation) DeepCopy() *PolicyPolicyPolicyMatcherObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyPolicyMatcherObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyPolicyMatcherParameters) DeepCopyInto(out *PolicyPolicyPolicyMatcherParameters) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyPolicyMatcherParameters.
func (in *PolicyPolicyPolicyMatcherParameters) DeepCopy() *PolicyPolicyPolicyMatcherParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyPolicyMatcherParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyPolicyObservation) DeepCopyInto(out *PolicyPolicyPolicyObservation) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]PolicyPolicyMatcherObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyPolicyPolicyPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyPolicyObservation.
func (in *PolicyPolicyPolicyObservation) DeepCopy() *PolicyPolicyPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyPolicyParameters) DeepCopyInto(out *PolicyPolicyPolicyParameters) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]PolicyPolicyMatcherParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingRef != nil {
		in, out := &in.MuteTimingRef, &out.MuteTimingRef
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingSelector != nil {
		in, out := &in.MuteTimingSelector, &out.MuteTimingSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = make([]PolicyPolicyPolicyPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyPolicyParameters.
func (in *PolicyPolicyPolicyParameters) DeepCopy() *PolicyPolicyPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyPolicyPolicyInitParameters) DeepCopyInto(out *PolicyPolicyPolicyPolicyInitParameters) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]PolicyPolicyPolicyMatcherInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingRef != nil {
		in, out := &in.MuteTimingRef, &out.MuteTimingRef
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingSelector != nil {
		in, out := &in.MuteTimingSelector, &out.MuteTimingSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyPolicyPolicyInitParameters.
func (in *PolicyPolicyPolicyPolicyInitParameters) DeepCopy() *PolicyPolicyPolicyPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyPolicyPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyPolicyPolicyObservation) DeepCopyInto(out *PolicyPolicyPolicyPolicyObservation) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]PolicyPolicyPolicyMatcherObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyPolicyPolicyObservation.
func (in *PolicyPolicyPolicyPolicyObservation) DeepCopy() *PolicyPolicyPolicyPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyPolicyPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyPolicyPolicyPolicyParameters) DeepCopyInto(out *PolicyPolicyPolicyPolicyParameters) {
	*out = *in
	if in.ActiveTimings != nil {
		in, out := &in.ActiveTimings, &out.ActiveTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContactPoint != nil {
		in, out := &in.ContactPoint, &out.ContactPoint
		*out = new(string)
		**out = **in
	}
	if in.ContactPointRef != nil {
		in, out := &in.ContactPointRef, &out.ContactPointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ContactPointSelector != nil {
		in, out := &in.ContactPointSelector, &out.ContactPointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Continue != nil {
		in, out := &in.Continue, &out.Continue
		*out = new(bool)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupInterval != nil {
		in, out := &in.GroupInterval, &out.GroupInterval
		*out = new(string)
		**out = **in
	}
	if in.GroupWait != nil {
		in, out := &in.GroupWait, &out.GroupWait
		*out = new(string)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = make([]PolicyPolicyPolicyMatcherParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingRef != nil {
		in, out := &in.MuteTimingRef, &out.MuteTimingRef
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MuteTimingSelector != nil {
		in, out := &in.MuteTimingSelector, &out.MuteTimingSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MuteTimings != nil {
		in, out := &in.MuteTimings, &out.MuteTimings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepeatInterval != nil {
		in, out := &in.RepeatInterval, &out.RepeatInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyPolicyPolicyPolicyParameters.
func (in *PolicyPolicyPolicyPolicyParameters) DeepCopy() *PolicyPolicyPolicyPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyPolicyPolicyPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxyConfigInitParameters) DeepCopyInto(out *ProxyConfigInitParameters) {
	*out = *in
	if in.NoProxy != nil {
		in, out := &in.NoProxy, &out.NoProxy
		*out = new(string)
		**out = **in
	}
	if in.ProxyConnectHeader != nil {
		in, out := &in.ProxyConnectHeader, &out.ProxyConnectHeader
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ProxyFromEnvironment != nil {
		in, out := &in.ProxyFromEnvironment, &out.ProxyFromEnvironment
		*out = new(bool)
		**out = **in
	}
	if in.ProxyURL != nil {
		in, out := &in.ProxyURL, &out.ProxyURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyConfigInitParameters.
func (in *ProxyConfigInitParameters) DeepCopy() *ProxyConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ProxyConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxyConfigObservation) DeepCopyInto(out *ProxyConfigObservation) {
	*out = *in
	if in.NoProxy != nil {
		in, out := &in.NoProxy, &out.NoProxy
		*out = new(string)
		**out = **in
	}
	if in.ProxyConnectHeader != nil {
		in, out := &in.ProxyConnectHeader, &out.ProxyConnectHeader
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ProxyFromEnvironment != nil {
		in, out := &in.ProxyFromEnvironment, &out.ProxyFromEnvironment
		*out = new(bool)
		**out = **in
	}
	if in.ProxyURL != nil {
		in, out := &in.ProxyURL, &out.ProxyURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyConfigObservation.
func (in *ProxyConfigObservation) DeepCopy() *ProxyConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ProxyConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxyConfigParameters) DeepCopyInto(out *ProxyConfigParameters) {
	*out = *in
	if in.NoProxy != nil {
		in, out := &in.NoProxy, &out.NoProxy
		*out = new(string)
		**out = **in
	}
	if in.ProxyConnectHeader != nil {
		in, out := &in.ProxyConnectHeader, &out.ProxyConnectHeader
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ProxyFromEnvironment != nil {
		in, out := &in.ProxyFromEnvironment, &out.ProxyFromEnvironment
		*out = new(bool)
		**out = **in
	}
	if in.ProxyURL != nil {
		in, out := &in.ProxyURL, &out.ProxyURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyConfigParameters.
func (in *ProxyConfigParameters) DeepCopy() *ProxyConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ProxyConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PushoverInitParameters) DeepCopyInto(out *PushoverInitParameters) {
	*out = *in
	out.APITokenSecretRef = in.APITokenSecretRef
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Expire != nil {
		in, out := &in.Expire, &out.Expire
		*out = new(float64)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.OkPriority != nil {
		in, out := &in.OkPriority, &out.OkPriority
		*out = new(float64)
		**out = **in
	}
	if in.OkSound != nil {
		in, out := &in.OkSound, &out.OkSound
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.Retry != nil {
		in, out := &in.Retry, &out.Retry
		*out = new(float64)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Sound != nil {
		in, out := &in.Sound, &out.Sound
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UploadImage != nil {
		in, out := &in.UploadImage, &out.UploadImage
		*out = new(bool)
		**out = **in
	}
	out.UserKeySecretRef = in.UserKeySecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PushoverInitParameters.
func (in *PushoverInitParameters) DeepCopy() *PushoverInitParameters {
	if in == nil {
		return nil
	}
	out := new(PushoverInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PushoverObservation) DeepCopyInto(out *PushoverObservation) {
	*out = *in
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Expire != nil {
		in, out := &in.Expire, &out.Expire
		*out = new(float64)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.OkPriority != nil {
		in, out := &in.OkPriority, &out.OkPriority
		*out = new(float64)
		**out = **in
	}
	if in.OkSound != nil {
		in, out := &in.OkSound, &out.OkSound
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.Retry != nil {
		in, out := &in.Retry, &out.Retry
		*out = new(float64)
		**out = **in
	}
	if in.Sound != nil {
		in, out := &in.Sound, &out.Sound
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.UploadImage != nil {
		in, out := &in.UploadImage, &out.UploadImage
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PushoverObservation.
func (in *PushoverObservation) DeepCopy() *PushoverObservation {
	if in == nil {
		return nil
	}
	out := new(PushoverObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PushoverParameters) DeepCopyInto(out *PushoverParameters) {
	*out = *in
	out.APITokenSecretRef = in.APITokenSecretRef
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Expire != nil {
		in, out := &in.Expire, &out.Expire
		*out = new(float64)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.OkPriority != nil {
		in, out := &in.OkPriority, &out.OkPriority
		*out = new(float64)
		**out = **in
	}
	if in.OkSound != nil {
		in, out := &in.OkSound, &out.OkSound
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.Retry != nil {
		in, out := &in.Retry, &out.Retry
		*out = new(float64)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Sound != nil {
		in, out := &in.Sound, &out.Sound
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UploadImage != nil {
		in, out := &in.UploadImage, &out.UploadImage
		*out = new(bool)
		**out = **in
	}
	out.UserKeySecretRef = in.UserKeySecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PushoverParameters.
func (in *PushoverParameters) DeepCopy() *PushoverParameters {
	if in == nil {
		return nil
	}
	out := new(PushoverParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RawQueryInitParameters) DeepCopyInto(out *RawQueryInitParameters) {
	*out = *in
	if in.RefID != nil {
		in, out := &in.RefID, &out.RefID
		*out = new(string)
		**out = **in
	}
	if in.Request != nil {
		in, out := &in.Request, &out.Request
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RawQueryInitParameters.
func (in *RawQueryInitParameters) DeepCopy() *RawQueryInitParameters {
	if in == nil {
		return nil
	}
	out := new(RawQueryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RawQueryObservation) DeepCopyInto(out *RawQueryObservation) {
	*out = *in
	if in.RefID != nil {
		in, out := &in.RefID, &out.RefID
		*out = new(string)
		**out = **in
	}
	if in.Request != nil {
		in, out := &in.Request, &out.Request
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RawQueryObservation.
func (in *RawQueryObservation) DeepCopy() *RawQueryObservation {
	if in == nil {
		return nil
	}
	out := new(RawQueryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RawQueryParameters) DeepCopyInto(out *RawQueryParameters) {
	*out = *in
	if in.RefID != nil {
		in, out := &in.RefID, &out.RefID
		*out = new(string)
		**out = **in
	}
	if in.Request != nil {
		in, out := &in.Request, &out.Request
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RawQueryParameters.
func (in *RawQueryParameters) DeepCopy() *RawQueryParameters {
	if in == nil {
		return nil
	}
	out := new(RawQueryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordInitParameters) DeepCopyInto(out *RecordInitParameters) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.Metric != nil {
		in, out := &in.Metric, &out.Metric
		*out = new(string)
		**out = **in
	}
	if in.TargetDatasourceUID != nil {
		in, out := &in.TargetDatasourceUID, &out.TargetDatasourceUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordInitParameters.
func (in *RecordInitParameters) DeepCopy() *RecordInitParameters {
	if in == nil {
		return nil
	}
	out := new(RecordInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordObservation) DeepCopyInto(out *RecordObservation) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.Metric != nil {
		in, out := &in.Metric, &out.Metric
		*out = new(string)
		**out = **in
	}
	if in.TargetDatasourceUID != nil {
		in, out := &in.TargetDatasourceUID, &out.TargetDatasourceUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordObservation.
func (in *RecordObservation) DeepCopy() *RecordObservation {
	if in == nil {
		return nil
	}
	out := new(RecordObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordParameters) DeepCopyInto(out *RecordParameters) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.Metric != nil {
		in, out := &in.Metric, &out.Metric
		*out = new(string)
		**out = **in
	}
	if in.TargetDatasourceUID != nil {
		in, out := &in.TargetDatasourceUID, &out.TargetDatasourceUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordParameters.
func (in *RecordParameters) DeepCopy() *RecordParameters {
	if in == nil {
		return nil
	}
	out := new(RecordParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RelativeTimeRangeInitParameters) DeepCopyInto(out *RelativeTimeRangeInitParameters) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(float64)
		**out = **in
	}
	if in.To != nil {
		in, out := &in.To, &out.To
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RelativeTimeRangeInitParameters.
func (in *RelativeTimeRangeInitParameters) DeepCopy() *RelativeTimeRangeInitParameters {
	if in == nil {
		return nil
	}
	out := new(RelativeTimeRangeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RelativeTimeRangeObservation) DeepCopyInto(out *RelativeTimeRangeObservation) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(float64)
		**out = **in
	}
	if in.To != nil {
		in, out := &in.To, &out.To
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RelativeTimeRangeObservation.
func (in *RelativeTimeRangeObservation) DeepCopy() *RelativeTimeRangeObservation {
	if in == nil {
		return nil
	}
	out := new(RelativeTimeRangeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RelativeTimeRangeParameters) DeepCopyInto(out *RelativeTimeRangeParameters) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(float64)
		**out = **in
	}
	if in.To != nil {
		in, out := &in.To, &out.To
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RelativeTimeRangeParameters.
func (in *RelativeTimeRangeParameters) DeepCopy() *RelativeTimeRangeParameters {
	if in == nil {
		return nil
	}
	out := new(RelativeTimeRangeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RespondersInitParameters) DeepCopyInto(out *RespondersInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RespondersInitParameters.
func (in *RespondersInitParameters) DeepCopy() *RespondersInitParameters {
	if in == nil {
		return nil
	}
	out := new(RespondersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RespondersObservation) DeepCopyInto(out *RespondersObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RespondersObservation.
func (in *RespondersObservation) DeepCopy() *RespondersObservation {
	if in == nil {
		return nil
	}
	out := new(RespondersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RespondersParameters) DeepCopyInto(out *RespondersParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RespondersParameters.
func (in *RespondersParameters) DeepCopy() *RespondersParameters {
	if in == nil {
		return nil
	}
	out := new(RespondersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuleGroup) DeepCopyInto(out *RuleGroup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuleGroup.
func (in *RuleGroup) DeepCopy() *RuleGroup {
	if in == nil {
		return nil
	}
	out := new(RuleGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RuleGroup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuleGroupInitParameters) DeepCopyInto(out *RuleGroupInitParameters) {
	*out = *in
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.FolderRef != nil {
		in, out := &in.FolderRef, &out.FolderRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderSelector != nil {
		in, out := &in.FolderSelector, &out.FolderSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderUID != nil {
		in, out := &in.FolderUID, &out.FolderUID
		*out = new(string)
		**out = **in
	}
	if in.IntervalSeconds != nil {
		in, out := &in.IntervalSeconds, &out.IntervalSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRef != nil {
		in, out := &in.OrganizationRef, &out.OrganizationRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrganizationSelector != nil {
		in, out := &in.OrganizationSelector, &out.OrganizationSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Rule != nil {
		in, out := &in.Rule, &out.Rule
		*out = make([]RuleInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuleGroupInitParameters.
func (in *RuleGroupInitParameters) DeepCopy() *RuleGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(RuleGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuleGroupList) DeepCopyInto(out *RuleGroupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RuleGroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuleGroupList.
func (in *RuleGroupList) DeepCopy() *RuleGroupList {
	if in == nil {
		return nil
	}
	out := new(RuleGroupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RuleGroupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuleGroupObservation) DeepCopyInto(out *RuleGroupObservation) {
	*out = *in
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.FolderUID != nil {
		in, out := &in.FolderUID, &out.FolderUID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IntervalSeconds != nil {
		in, out := &in.IntervalSeconds, &out.IntervalSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.Rule != nil {
		in, out := &in.Rule, &out.Rule
		*out = make([]RuleObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuleGroupObservation.
func (in *RuleGroupObservation) DeepCopy() *RuleGroupObservation {
	if in == nil {
		return nil
	}
	out := new(RuleGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuleGroupParameters) DeepCopyInto(out *RuleGroupParameters) {
	*out = *in
	if in.DisableProvenance != nil {
		in, out := &in.DisableProvenance, &out.DisableProvenance
		*out = new(bool)
		**out = **in
	}
	if in.FolderRef != nil {
		in, out := &in.FolderRef, &out.FolderRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderSelector != nil {
		in, out := &in.FolderSelector, &out.FolderSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderUID != nil {
		in, out := &in.FolderUID, &out.FolderUID
		*out = new(string)
		**out = **in
	}
	if in.IntervalSeconds != nil {
		in, out := &in.IntervalSeconds, &out.IntervalSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRef != nil {
		in, out := &in.OrganizationRef, &out.OrganizationRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrganizationSelector != nil {
		in, out := &in.OrganizationSelector, &out.OrganizationSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Rule != nil {
		in, out := &in.Rule, &out.Rule
		*out = make([]RuleParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuleGroupParameters.
func (in *RuleGroupParameters) DeepCopy() *RuleGroupParameters {
	if in == nil {
		return nil
	}
	out := new(RuleGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuleGroupSpec) DeepCopyInto(out *RuleGroupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuleGroupSpec.
func (in *RuleGroupSpec) DeepCopy() *RuleGroupSpec {
	if in == nil {
		return nil
	}
	out := new(RuleGroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuleGroupStatus) DeepCopyInto(out *RuleGroupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuleGroupStatus.
func (in *RuleGroupStatus) DeepCopy() *RuleGroupStatus {
	if in == nil {
		return nil
	}
	out := new(RuleGroupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuleInitParameters) DeepCopyInto(out *RuleInitParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = new(string)
		**out = **in
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = make([]DataInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExecErrState != nil {
		in, out := &in.ExecErrState, &out.ExecErrState
		*out = new(string)
		**out = **in
	}
	if in.For != nil {
		in, out := &in.For, &out.For
		*out = new(string)
		**out = **in
	}
	if in.IsPaused != nil {
		in, out := &in.IsPaused, &out.IsPaused
		*out = new(bool)
		**out = **in
	}
	if in.KeepFiringFor != nil {
		in, out := &in.KeepFiringFor, &out.KeepFiringFor
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MissingSeriesEvalsToResolve != nil {
		in, out := &in.MissingSeriesEvalsToResolve, &out.MissingSeriesEvalsToResolve
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NoDataState != nil {
		in, out := &in.NoDataState, &out.NoDataState
		*out = new(string)
		**out = **in
	}
	if in.NotificationSettings != nil {
		in, out := &in.NotificationSettings, &out.NotificationSettings
		*out = make([]NotificationSettingsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Record != nil {
		in, out := &in.Record, &out.Record
		*out = make([]RecordInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuleInitParameters.
func (in *RuleInitParameters) DeepCopy() *RuleInitParameters {
	if in == nil {
		return nil
	}
	out := new(RuleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuleObservation) DeepCopyInto(out *RuleObservation) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = new(string)
		**out = **in
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = make([]DataObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExecErrState != nil {
		in, out := &in.ExecErrState, &out.ExecErrState
		*out = new(string)
		**out = **in
	}
	if in.For != nil {
		in, out := &in.For, &out.For
		*out = new(string)
		**out = **in
	}
	if in.IsPaused != nil {
		in, out := &in.IsPaused, &out.IsPaused
		*out = new(bool)
		**out = **in
	}
	if in.KeepFiringFor != nil {
		in, out := &in.KeepFiringFor, &out.KeepFiringFor
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MissingSeriesEvalsToResolve != nil {
		in, out := &in.MissingSeriesEvalsToResolve, &out.MissingSeriesEvalsToResolve
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NoDataState != nil {
		in, out := &in.NoDataState, &out.NoDataState
		*out = new(string)
		**out = **in
	}
	if in.NotificationSettings != nil {
		in, out := &in.NotificationSettings, &out.NotificationSettings
		*out = make([]NotificationSettingsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Record != nil {
		in, out := &in.Record, &out.Record
		*out = make([]RecordObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuleObservation.
func (in *RuleObservation) DeepCopy() *RuleObservation {
	if in == nil {
		return nil
	}
	out := new(RuleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuleParameters) DeepCopyInto(out *RuleParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = new(string)
		**out = **in
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = make([]DataParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExecErrState != nil {
		in, out := &in.ExecErrState, &out.ExecErrState
		*out = new(string)
		**out = **in
	}
	if in.For != nil {
		in, out := &in.For, &out.For
		*out = new(string)
		**out = **in
	}
	if in.IsPaused != nil {
		in, out := &in.IsPaused, &out.IsPaused
		*out = new(bool)
		**out = **in
	}
	if in.KeepFiringFor != nil {
		in, out := &in.KeepFiringFor, &out.KeepFiringFor
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MissingSeriesEvalsToResolve != nil {
		in, out := &in.MissingSeriesEvalsToResolve, &out.MissingSeriesEvalsToResolve
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NoDataState != nil {
		in, out := &in.NoDataState, &out.NoDataState
		*out = new(string)
		**out = **in
	}
	if in.NotificationSettings != nil {
		in, out := &in.NotificationSettings, &out.NotificationSettings
		*out = make([]NotificationSettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Record != nil {
		in, out := &in.Record, &out.Record
		*out = make([]RecordParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuleParameters.
func (in *RuleParameters) DeepCopy() *RuleParameters {
	if in == nil {
		return nil
	}
	out := new(RuleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SensugoInitParameters) DeepCopyInto(out *SensugoInitParameters) {
	*out = *in
	out.APIKeySecretRef = in.APIKeySecretRef
	if in.Check != nil {
		in, out := &in.Check, &out.Check
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Entity != nil {
		in, out := &in.Entity, &out.Entity
		*out = new(string)
		**out = **in
	}
	if in.Handler != nil {
		in, out := &in.Handler, &out.Handler
		*out = new(string)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SensugoInitParameters.
func (in *SensugoInitParameters) DeepCopy() *SensugoInitParameters {
	if in == nil {
		return nil
	}
	out := new(SensugoInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SensugoObservation) DeepCopyInto(out *SensugoObservation) {
	*out = *in
	if in.Check != nil {
		in, out := &in.Check, &out.Check
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Entity != nil {
		in, out := &in.Entity, &out.Entity
		*out = new(string)
		**out = **in
	}
	if in.Handler != nil {
		in, out := &in.Handler, &out.Handler
		*out = new(string)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SensugoObservation.
func (in *SensugoObservation) DeepCopy() *SensugoObservation {
	if in == nil {
		return nil
	}
	out := new(SensugoObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SensugoParameters) DeepCopyInto(out *SensugoParameters) {
	*out = *in
	out.APIKeySecretRef = in.APIKeySecretRef
	if in.Check != nil {
		in, out := &in.Check, &out.Check
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Entity != nil {
		in, out := &in.Entity, &out.Entity
		*out = new(string)
		**out = **in
	}
	if in.Handler != nil {
		in, out := &in.Handler, &out.Handler
		*out = new(string)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SensugoParameters.
func (in *SensugoParameters) DeepCopy() *SensugoParameters {
	if in == nil {
		return nil
	}
	out := new(SensugoParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SiftInitParameters) DeepCopyInto(out *SiftInitParameters) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SiftInitParameters.
func (in *SiftInitParameters) DeepCopy() *SiftInitParameters {
	if in == nil {
		return nil
	}
	out := new(SiftInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SiftObservation) DeepCopyInto(out *SiftObservation) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SiftObservation.
func (in *SiftObservation) DeepCopy() *SiftObservation {
	if in == nil {
		return nil
	}
	out := new(SiftObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SiftParameters) DeepCopyInto(out *SiftParameters) {
	*out = *in
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SiftParameters.
func (in *SiftParameters) DeepCopy() *SiftParameters {
	if in == nil {
		return nil
	}
	out := new(SiftParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SlackInitParameters) DeepCopyInto(out *SlackInitParameters) {
	*out = *in
	if in.Color != nil {
		in, out := &in.Color, &out.Color
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.EndpointURL != nil {
		in, out := &in.EndpointURL, &out.EndpointURL
		*out = new(string)
		**out = **in
	}
	if in.IconEmoji != nil {
		in, out := &in.IconEmoji, &out.IconEmoji
		*out = new(string)
		**out = **in
	}
	if in.IconURL != nil {
		in, out := &in.IconURL, &out.IconURL
		*out = new(string)
		**out = **in
	}
	if in.MentionChannel != nil {
		in, out := &in.MentionChannel, &out.MentionChannel
		*out = new(string)
		**out = **in
	}
	if in.MentionGroups != nil {
		in, out := &in.MentionGroups, &out.MentionGroups
		*out = new(string)
		**out = **in
	}
	if in.MentionUsers != nil {
		in, out := &in.MentionUsers, &out.MentionUsers
		*out = new(string)
		**out = **in
	}
	if in.Recipient != nil {
		in, out := &in.Recipient, &out.Recipient
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Text != nil {
		in, out := &in.Text, &out.Text
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.TokenSecretRef != nil {
		in, out := &in.TokenSecretRef, &out.TokenSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.URLSecretRef != nil {
		in, out := &in.URLSecretRef, &out.URLSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SlackInitParameters.
func (in *SlackInitParameters) DeepCopy() *SlackInitParameters {
	if in == nil {
		return nil
	}
	out := new(SlackInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SlackObservation) DeepCopyInto(out *SlackObservation) {
	*out = *in
	if in.Color != nil {
		in, out := &in.Color, &out.Color
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.EndpointURL != nil {
		in, out := &in.EndpointURL, &out.EndpointURL
		*out = new(string)
		**out = **in
	}
	if in.IconEmoji != nil {
		in, out := &in.IconEmoji, &out.IconEmoji
		*out = new(string)
		**out = **in
	}
	if in.IconURL != nil {
		in, out := &in.IconURL, &out.IconURL
		*out = new(string)
		**out = **in
	}
	if in.MentionChannel != nil {
		in, out := &in.MentionChannel, &out.MentionChannel
		*out = new(string)
		**out = **in
	}
	if in.MentionGroups != nil {
		in, out := &in.MentionGroups, &out.MentionGroups
		*out = new(string)
		**out = **in
	}
	if in.MentionUsers != nil {
		in, out := &in.MentionUsers, &out.MentionUsers
		*out = new(string)
		**out = **in
	}
	if in.Recipient != nil {
		in, out := &in.Recipient, &out.Recipient
		*out = new(string)
		**out = **in
	}
	if in.Text != nil {
		in, out := &in.Text, &out.Text
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SlackObservation.
func (in *SlackObservation) DeepCopy() *SlackObservation {
	if in == nil {
		return nil
	}
	out := new(SlackObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SlackParameters) DeepCopyInto(out *SlackParameters) {
	*out = *in
	if in.Color != nil {
		in, out := &in.Color, &out.Color
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.EndpointURL != nil {
		in, out := &in.EndpointURL, &out.EndpointURL
		*out = new(string)
		**out = **in
	}
	if in.IconEmoji != nil {
		in, out := &in.IconEmoji, &out.IconEmoji
		*out = new(string)
		**out = **in
	}
	if in.IconURL != nil {
		in, out := &in.IconURL, &out.IconURL
		*out = new(string)
		**out = **in
	}
	if in.MentionChannel != nil {
		in, out := &in.MentionChannel, &out.MentionChannel
		*out = new(string)
		**out = **in
	}
	if in.MentionGroups != nil {
		in, out := &in.MentionGroups, &out.MentionGroups
		*out = new(string)
		**out = **in
	}
	if in.MentionUsers != nil {
		in, out := &in.MentionUsers, &out.MentionUsers
		*out = new(string)
		**out = **in
	}
	if in.Recipient != nil {
		in, out := &in.Recipient, &out.Recipient
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Text != nil {
		in, out := &in.Text, &out.Text
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.TokenSecretRef != nil {
		in, out := &in.TokenSecretRef, &out.TokenSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.URLSecretRef != nil {
		in, out := &in.URLSecretRef, &out.URLSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SlackParameters.
func (in *SlackParameters) DeepCopy() *SlackParameters {
	if in == nil {
		return nil
	}
	out := new(SlackParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnsInitParameters) DeepCopyInto(out *SnsInitParameters) {
	*out = *in
	if in.AccessKeySecretRef != nil {
		in, out := &in.AccessKeySecretRef, &out.AccessKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AssumeRoleArn != nil {
		in, out := &in.AssumeRoleArn, &out.AssumeRoleArn
		*out = new(string)
		**out = **in
	}
	if in.AuthProvider != nil {
		in, out := &in.AuthProvider, &out.AuthProvider
		*out = new(string)
		**out = **in
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.ExternalID != nil {
		in, out := &in.ExternalID, &out.ExternalID
		*out = new(string)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.SecretKeySecretRef != nil {
		in, out := &in.SecretKeySecretRef, &out.SecretKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Subject != nil {
		in, out := &in.Subject, &out.Subject
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnsInitParameters.
func (in *SnsInitParameters) DeepCopy() *SnsInitParameters {
	if in == nil {
		return nil
	}
	out := new(SnsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnsObservation) DeepCopyInto(out *SnsObservation) {
	*out = *in
	if in.AssumeRoleArn != nil {
		in, out := &in.AssumeRoleArn, &out.AssumeRoleArn
		*out = new(string)
		**out = **in
	}
	if in.AuthProvider != nil {
		in, out := &in.AuthProvider, &out.AuthProvider
		*out = new(string)
		**out = **in
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.ExternalID != nil {
		in, out := &in.ExternalID, &out.ExternalID
		*out = new(string)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.Subject != nil {
		in, out := &in.Subject, &out.Subject
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnsObservation.
func (in *SnsObservation) DeepCopy() *SnsObservation {
	if in == nil {
		return nil
	}
	out := new(SnsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnsParameters) DeepCopyInto(out *SnsParameters) {
	*out = *in
	if in.AccessKeySecretRef != nil {
		in, out := &in.AccessKeySecretRef, &out.AccessKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AssumeRoleArn != nil {
		in, out := &in.AssumeRoleArn, &out.AssumeRoleArn
		*out = new(string)
		**out = **in
	}
	if in.AuthProvider != nil {
		in, out := &in.AuthProvider, &out.AuthProvider
		*out = new(string)
		**out = **in
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.ExternalID != nil {
		in, out := &in.ExternalID, &out.ExternalID
		*out = new(string)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.SecretKeySecretRef != nil {
		in, out := &in.SecretKeySecretRef, &out.SecretKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Subject != nil {
		in, out := &in.Subject, &out.Subject
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnsParameters.
func (in *SnsParameters) DeepCopy() *SnsParameters {
	if in == nil {
		return nil
	}
	out := new(SnsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpecInitParameters) DeepCopyInto(out *SpecInitParameters) {
	*out = *in
	if in.AlertRuleUids != nil {
		in, out := &in.AlertRuleUids, &out.AlertRuleUids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AnnotationMatchers != nil {
		in, out := &in.AnnotationMatchers, &out.AnnotationMatchers
		*out = make([]AnnotationMatchersInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.LabelMatchers != nil {
		in, out := &in.LabelMatchers, &out.LabelMatchers
		*out = make([]LabelMatchersInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Receivers != nil {
		in, out := &in.Receivers, &out.Receivers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Step != nil {
		in, out := &in.Step, &out.Step
		*out = make([]StepInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpecInitParameters.
func (in *SpecInitParameters) DeepCopy() *SpecInitParameters {
	if in == nil {
		return nil
	}
	out := new(SpecInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpecObservation) DeepCopyInto(out *SpecObservation) {
	*out = *in
	if in.AlertRuleUids != nil {
		in, out := &in.AlertRuleUids, &out.AlertRuleUids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AnnotationMatchers != nil {
		in, out := &in.AnnotationMatchers, &out.AnnotationMatchers
		*out = make([]AnnotationMatchersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.LabelMatchers != nil {
		in, out := &in.LabelMatchers, &out.LabelMatchers
		*out = make([]LabelMatchersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Receivers != nil {
		in, out := &in.Receivers, &out.Receivers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Step != nil {
		in, out := &in.Step, &out.Step
		*out = make([]StepObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpecObservation.
func (in *SpecObservation) DeepCopy() *SpecObservation {
	if in == nil {
		return nil
	}
	out := new(SpecObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpecParameters) DeepCopyInto(out *SpecParameters) {
	*out = *in
	if in.AlertRuleUids != nil {
		in, out := &in.AlertRuleUids, &out.AlertRuleUids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AnnotationMatchers != nil {
		in, out := &in.AnnotationMatchers, &out.AnnotationMatchers
		*out = make([]AnnotationMatchersParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.LabelMatchers != nil {
		in, out := &in.LabelMatchers, &out.LabelMatchers
		*out = make([]LabelMatchersParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Receivers != nil {
		in, out := &in.Receivers, &out.Receivers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Step != nil {
		in, out := &in.Step, &out.Step
		*out = make([]StepParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpecParameters.
func (in *SpecParameters) DeepCopy() *SpecParameters {
	if in == nil {
		return nil
	}
	out := new(SpecParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepInitParameters) DeepCopyInto(out *StepInitParameters) {
	*out = *in
	if in.Asserts != nil {
		in, out := &in.Asserts, &out.Asserts
		*out = make([]AssertsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Assign != nil {
		in, out := &in.Assign, &out.Assign
		*out = make([]AssignInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AssistantInvestigations != nil {
		in, out := &in.AssistantInvestigations, &out.AssistantInvestigations
		*out = make([]AssistantInvestigationsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DataSource != nil {
		in, out := &in.DataSource, &out.DataSource
		*out = make([]DataSourceInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Explain != nil {
		in, out := &in.Explain, &out.Explain
		*out = make([]ExplainInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.External != nil {
		in, out := &in.External, &out.External
		*out = make([]ExternalInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Sift != nil {
		in, out := &in.Sift, &out.Sift
		*out = make([]SiftInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepInitParameters.
func (in *StepInitParameters) DeepCopy() *StepInitParameters {
	if in == nil {
		return nil
	}
	out := new(StepInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepObservation) DeepCopyInto(out *StepObservation) {
	*out = *in
	if in.Asserts != nil {
		in, out := &in.Asserts, &out.Asserts
		*out = make([]AssertsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Assign != nil {
		in, out := &in.Assign, &out.Assign
		*out = make([]AssignObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AssistantInvestigations != nil {
		in, out := &in.AssistantInvestigations, &out.AssistantInvestigations
		*out = make([]AssistantInvestigationsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DataSource != nil {
		in, out := &in.DataSource, &out.DataSource
		*out = make([]DataSourceObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Explain != nil {
		in, out := &in.Explain, &out.Explain
		*out = make([]ExplainObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.External != nil {
		in, out := &in.External, &out.External
		*out = make([]ExternalObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Sift != nil {
		in, out := &in.Sift, &out.Sift
		*out = make([]SiftObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepObservation.
func (in *StepObservation) DeepCopy() *StepObservation {
	if in == nil {
		return nil
	}
	out := new(StepObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepParameters) DeepCopyInto(out *StepParameters) {
	*out = *in
	if in.Asserts != nil {
		in, out := &in.Asserts, &out.Asserts
		*out = make([]AssertsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Assign != nil {
		in, out := &in.Assign, &out.Assign
		*out = make([]AssignParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AssistantInvestigations != nil {
		in, out := &in.AssistantInvestigations, &out.AssistantInvestigations
		*out = make([]AssistantInvestigationsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DataSource != nil {
		in, out := &in.DataSource, &out.DataSource
		*out = make([]DataSourceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Explain != nil {
		in, out := &in.Explain, &out.Explain
		*out = make([]ExplainParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.External != nil {
		in, out := &in.External, &out.External
		*out = make([]ExternalParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Sift != nil {
		in, out := &in.Sift, &out.Sift
		*out = make([]SiftParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepParameters.
func (in *StepParameters) DeepCopy() *StepParameters {
	if in == nil {
		return nil
	}
	out := new(StepParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TLSConfigInitParameters) DeepCopyInto(out *TLSConfigInitParameters) {
	*out = *in
	if in.CACertificateSecretRef != nil {
		in, out := &in.CACertificateSecretRef, &out.CACertificateSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ClientCertificateSecretRef != nil {
		in, out := &in.ClientCertificateSecretRef, &out.ClientCertificateSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ClientKeySecretRef != nil {
		in, out := &in.ClientKeySecretRef, &out.ClientKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.InsecureSkipVerify != nil {
		in, out := &in.InsecureSkipVerify, &out.InsecureSkipVerify
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TLSConfigInitParameters.
func (in *TLSConfigInitParameters) DeepCopy() *TLSConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(TLSConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TLSConfigObservation) DeepCopyInto(out *TLSConfigObservation) {
	*out = *in
	if in.InsecureSkipVerify != nil {
		in, out := &in.InsecureSkipVerify, &out.InsecureSkipVerify
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TLSConfigObservation.
func (in *TLSConfigObservation) DeepCopy() *TLSConfigObservation {
	if in == nil {
		return nil
	}
	out := new(TLSConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TLSConfigParameters) DeepCopyInto(out *TLSConfigParameters) {
	*out = *in
	if in.CACertificateSecretRef != nil {
		in, out := &in.CACertificateSecretRef, &out.CACertificateSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ClientCertificateSecretRef != nil {
		in, out := &in.ClientCertificateSecretRef, &out.ClientCertificateSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ClientKeySecretRef != nil {
		in, out := &in.ClientKeySecretRef, &out.ClientKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.InsecureSkipVerify != nil {
		in, out := &in.InsecureSkipVerify, &out.InsecureSkipVerify
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TLSConfigParameters.
func (in *TLSConfigParameters) DeepCopy() *TLSConfigParameters {
	if in == nil {
		return nil
	}
	out := new(TLSConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeamsInitParameters) DeepCopyInto(out *TeamsInitParameters) {
	*out = *in
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.SectionTitle != nil {
		in, out := &in.SectionTitle, &out.SectionTitle
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.URLSecretRef = in.URLSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeamsInitParameters.
func (in *TeamsInitParameters) DeepCopy() *TeamsInitParameters {
	if in == nil {
		return nil
	}
	out := new(TeamsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeamsObservation) DeepCopyInto(out *TeamsObservation) {
	*out = *in
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.SectionTitle != nil {
		in, out := &in.SectionTitle, &out.SectionTitle
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeamsObservation.
func (in *TeamsObservation) DeepCopy() *TeamsObservation {
	if in == nil {
		return nil
	}
	out := new(TeamsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeamsParameters) DeepCopyInto(out *TeamsParameters) {
	*out = *in
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.SectionTitle != nil {
		in, out := &in.SectionTitle, &out.SectionTitle
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.URLSecretRef = in.URLSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeamsParameters.
func (in *TeamsParameters) DeepCopy() *TeamsParameters {
	if in == nil {
		return nil
	}
	out := new(TeamsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TelegramInitParameters) DeepCopyInto(out *TelegramInitParameters) {
	*out = *in
	if in.ChatID != nil {
		in, out := &in.ChatID, &out.ChatID
		*out = new(string)
		**out = **in
	}
	if in.DisableNotifications != nil {
		in, out := &in.DisableNotifications, &out.DisableNotifications
		*out = new(bool)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.DisableWebPagePreview != nil {
		in, out := &in.DisableWebPagePreview, &out.DisableWebPagePreview
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MessageThreadID != nil {
		in, out := &in.MessageThreadID, &out.MessageThreadID
		*out = new(string)
		**out = **in
	}
	if in.ParseMode != nil {
		in, out := &in.ParseMode, &out.ParseMode
		*out = new(string)
		**out = **in
	}
	if in.ProtectContent != nil {
		in, out := &in.ProtectContent, &out.ProtectContent
		*out = new(bool)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	out.TokenSecretRef = in.TokenSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TelegramInitParameters.
func (in *TelegramInitParameters) DeepCopy() *TelegramInitParameters {
	if in == nil {
		return nil
	}
	out := new(TelegramInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TelegramObservation) DeepCopyInto(out *TelegramObservation) {
	*out = *in
	if in.ChatID != nil {
		in, out := &in.ChatID, &out.ChatID
		*out = new(string)
		**out = **in
	}
	if in.DisableNotifications != nil {
		in, out := &in.DisableNotifications, &out.DisableNotifications
		*out = new(bool)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.DisableWebPagePreview != nil {
		in, out := &in.DisableWebPagePreview, &out.DisableWebPagePreview
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MessageThreadID != nil {
		in, out := &in.MessageThreadID, &out.MessageThreadID
		*out = new(string)
		**out = **in
	}
	if in.ParseMode != nil {
		in, out := &in.ParseMode, &out.ParseMode
		*out = new(string)
		**out = **in
	}
	if in.ProtectContent != nil {
		in, out := &in.ProtectContent, &out.ProtectContent
		*out = new(bool)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TelegramObservation.
func (in *TelegramObservation) DeepCopy() *TelegramObservation {
	if in == nil {
		return nil
	}
	out := new(TelegramObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TelegramParameters) DeepCopyInto(out *TelegramParameters) {
	*out = *in
	if in.ChatID != nil {
		in, out := &in.ChatID, &out.ChatID
		*out = new(string)
		**out = **in
	}
	if in.DisableNotifications != nil {
		in, out := &in.DisableNotifications, &out.DisableNotifications
		*out = new(bool)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.DisableWebPagePreview != nil {
		in, out := &in.DisableWebPagePreview, &out.DisableWebPagePreview
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MessageThreadID != nil {
		in, out := &in.MessageThreadID, &out.MessageThreadID
		*out = new(string)
		**out = **in
	}
	if in.ParseMode != nil {
		in, out := &in.ParseMode, &out.ParseMode
		*out = new(string)
		**out = **in
	}
	if in.ProtectContent != nil {
		in, out := &in.ProtectContent, &out.ProtectContent
		*out = new(bool)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	out.TokenSecretRef = in.TokenSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TelegramParameters.
func (in *TelegramParameters) DeepCopy() *TelegramParameters {
	if in == nil {
		return nil
	}
	out := new(TelegramParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ThreemaInitParameters) DeepCopyInto(out *ThreemaInitParameters) {
	*out = *in
	out.APISecretSecretRef = in.APISecretSecretRef
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.GatewayID != nil {
		in, out := &in.GatewayID, &out.GatewayID
		*out = new(string)
		**out = **in
	}
	if in.RecipientID != nil {
		in, out := &in.RecipientID, &out.RecipientID
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ThreemaInitParameters.
func (in *ThreemaInitParameters) DeepCopy() *ThreemaInitParameters {
	if in == nil {
		return nil
	}
	out := new(ThreemaInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ThreemaObservation) DeepCopyInto(out *ThreemaObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.GatewayID != nil {
		in, out := &in.GatewayID, &out.GatewayID
		*out = new(string)
		**out = **in
	}
	if in.RecipientID != nil {
		in, out := &in.RecipientID, &out.RecipientID
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ThreemaObservation.
func (in *ThreemaObservation) DeepCopy() *ThreemaObservation {
	if in == nil {
		return nil
	}
	out := new(ThreemaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ThreemaParameters) DeepCopyInto(out *ThreemaParameters) {
	*out = *in
	out.APISecretSecretRef = in.APISecretSecretRef
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.GatewayID != nil {
		in, out := &in.GatewayID, &out.GatewayID
		*out = new(string)
		**out = **in
	}
	if in.RecipientID != nil {
		in, out := &in.RecipientID, &out.RecipientID
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ThreemaParameters.
func (in *ThreemaParameters) DeepCopy() *ThreemaParameters {
	if in == nil {
		return nil
	}
	out := new(ThreemaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TimesInitParameters) DeepCopyInto(out *TimesInitParameters) {
	*out = *in
	if in.End != nil {
		in, out := &in.End, &out.End
		*out = new(string)
		**out = **in
	}
	if in.Start != nil {
		in, out := &in.Start, &out.Start
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TimesInitParameters.
func (in *TimesInitParameters) DeepCopy() *TimesInitParameters {
	if in == nil {
		return nil
	}
	out := new(TimesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TimesObservation) DeepCopyInto(out *TimesObservation) {
	*out = *in
	if in.End != nil {
		in, out := &in.End, &out.End
		*out = new(string)
		**out = **in
	}
	if in.Start != nil {
		in, out := &in.Start, &out.Start
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TimesObservation.
func (in *TimesObservation) DeepCopy() *TimesObservation {
	if in == nil {
		return nil
	}
	out := new(TimesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TimesParameters) DeepCopyInto(out *TimesParameters) {
	*out = *in
	if in.End != nil {
		in, out := &in.End, &out.End
		*out = new(string)
		**out = **in
	}
	if in.Start != nil {
		in, out := &in.Start, &out.Start
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TimesParameters.
func (in *TimesParameters) DeepCopy() *TimesParameters {
	if in == nil {
		return nil
	}
	out := new(TimesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VictoropsInitParameters) DeepCopyInto(out *VictoropsInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.MessageType != nil {
		in, out := &in.MessageType, &out.MessageType
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.URLSecretRef = in.URLSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VictoropsInitParameters.
func (in *VictoropsInitParameters) DeepCopy() *VictoropsInitParameters {
	if in == nil {
		return nil
	}
	out := new(VictoropsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VictoropsObservation) DeepCopyInto(out *VictoropsObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.MessageType != nil {
		in, out := &in.MessageType, &out.MessageType
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VictoropsObservation.
func (in *VictoropsObservation) DeepCopy() *VictoropsObservation {
	if in == nil {
		return nil
	}
	out := new(VictoropsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VictoropsParameters) DeepCopyInto(out *VictoropsParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.MessageType != nil {
		in, out := &in.MessageType, &out.MessageType
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	out.URLSecretRef = in.URLSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VictoropsParameters.
func (in *VictoropsParameters) DeepCopy() *VictoropsParameters {
	if in == nil {
		return nil
	}
	out := new(VictoropsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebexInitParameters) DeepCopyInto(out *WebexInitParameters) {
	*out = *in
	if in.APIURL != nil {
		in, out := &in.APIURL, &out.APIURL
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.RoomID != nil {
		in, out := &in.RoomID, &out.RoomID
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	out.TokenSecretRef = in.TokenSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebexInitParameters.
func (in *WebexInitParameters) DeepCopy() *WebexInitParameters {
	if in == nil {
		return nil
	}
	out := new(WebexInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebexObservation) DeepCopyInto(out *WebexObservation) {
	*out = *in
	if in.APIURL != nil {
		in, out := &in.APIURL, &out.APIURL
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.RoomID != nil {
		in, out := &in.RoomID, &out.RoomID
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebexObservation.
func (in *WebexObservation) DeepCopy() *WebexObservation {
	if in == nil {
		return nil
	}
	out := new(WebexObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebexParameters) DeepCopyInto(out *WebexParameters) {
	*out = *in
	if in.APIURL != nil {
		in, out := &in.APIURL, &out.APIURL
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.RoomID != nil {
		in, out := &in.RoomID, &out.RoomID
		*out = new(string)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	out.TokenSecretRef = in.TokenSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebexParameters.
func (in *WebexParameters) DeepCopy() *WebexParameters {
	if in == nil {
		return nil
	}
	out := new(WebexParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebhookInitParameters) DeepCopyInto(out *WebhookInitParameters) {
	*out = *in
	if in.AuthorizationCredentialsSecretRef != nil {
		in, out := &in.AuthorizationCredentialsSecretRef, &out.AuthorizationCredentialsSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AuthorizationScheme != nil {
		in, out := &in.AuthorizationScheme, &out.AuthorizationScheme
		*out = new(string)
		**out = **in
	}
	if in.BasicAuthPasswordSecretRef != nil {
		in, out := &in.BasicAuthPasswordSecretRef, &out.BasicAuthPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.BasicAuthUser != nil {
		in, out := &in.BasicAuthUser, &out.BasicAuthUser
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.HMACConfig != nil {
		in, out := &in.HMACConfig, &out.HMACConfig
		*out = make([]HMACConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPConfig != nil {
		in, out := &in.HTTPConfig, &out.HTTPConfig
		*out = make([]HTTPConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPMethod != nil {
		in, out := &in.HTTPMethod, &out.HTTPMethod
		*out = new(string)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxAlerts != nil {
		in, out := &in.MaxAlerts, &out.MaxAlerts
		*out = new(float64)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Payload != nil {
		in, out := &in.Payload, &out.Payload
		*out = make([]PayloadInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TLSConfig != nil {
		in, out := &in.TLSConfig, &out.TLSConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebhookInitParameters.
func (in *WebhookInitParameters) DeepCopy() *WebhookInitParameters {
	if in == nil {
		return nil
	}
	out := new(WebhookInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebhookObservation) DeepCopyInto(out *WebhookObservation) {
	*out = *in
	if in.AuthorizationScheme != nil {
		in, out := &in.AuthorizationScheme, &out.AuthorizationScheme
		*out = new(string)
		**out = **in
	}
	if in.BasicAuthUser != nil {
		in, out := &in.BasicAuthUser, &out.BasicAuthUser
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.HMACConfig != nil {
		in, out := &in.HMACConfig, &out.HMACConfig
		*out = make([]HMACConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPConfig != nil {
		in, out := &in.HTTPConfig, &out.HTTPConfig
		*out = make([]HTTPConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPMethod != nil {
		in, out := &in.HTTPMethod, &out.HTTPMethod
		*out = new(string)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxAlerts != nil {
		in, out := &in.MaxAlerts, &out.MaxAlerts
		*out = new(float64)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Payload != nil {
		in, out := &in.Payload, &out.Payload
		*out = make([]PayloadObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebhookObservation.
func (in *WebhookObservation) DeepCopy() *WebhookObservation {
	if in == nil {
		return nil
	}
	out := new(WebhookObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebhookParameters) DeepCopyInto(out *WebhookParameters) {
	*out = *in
	if in.AuthorizationCredentialsSecretRef != nil {
		in, out := &in.AuthorizationCredentialsSecretRef, &out.AuthorizationCredentialsSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AuthorizationScheme != nil {
		in, out := &in.AuthorizationScheme, &out.AuthorizationScheme
		*out = new(string)
		**out = **in
	}
	if in.BasicAuthPasswordSecretRef != nil {
		in, out := &in.BasicAuthPasswordSecretRef, &out.BasicAuthPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.BasicAuthUser != nil {
		in, out := &in.BasicAuthUser, &out.BasicAuthUser
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.HMACConfig != nil {
		in, out := &in.HMACConfig, &out.HMACConfig
		*out = make([]HMACConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPConfig != nil {
		in, out := &in.HTTPConfig, &out.HTTPConfig
		*out = make([]HTTPConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPMethod != nil {
		in, out := &in.HTTPMethod, &out.HTTPMethod
		*out = new(string)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxAlerts != nil {
		in, out := &in.MaxAlerts, &out.MaxAlerts
		*out = new(float64)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Payload != nil {
		in, out := &in.Payload, &out.Payload
		*out = make([]PayloadParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.TLSConfigSecretRef != nil {
		in, out := &in.TLSConfigSecretRef, &out.TLSConfigSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebhookParameters.
func (in *WebhookParameters) DeepCopy() *WebhookParameters {
	if in == nil {
		return nil
	}
	out := new(WebhookParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WecomInitParameters) DeepCopyInto(out *WecomInitParameters) {
	*out = *in
	if in.AgentID != nil {
		in, out := &in.AgentID, &out.AgentID
		*out = new(string)
		**out = **in
	}
	if in.CorpID != nil {
		in, out := &in.CorpID, &out.CorpID
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MsgType != nil {
		in, out := &in.MsgType, &out.MsgType
		*out = new(string)
		**out = **in
	}
	if in.SecretSecretRef != nil {
		in, out := &in.SecretSecretRef, &out.SecretSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.ToUser != nil {
		in, out := &in.ToUser, &out.ToUser
		*out = new(string)
		**out = **in
	}
	if in.URLSecretRef != nil {
		in, out := &in.URLSecretRef, &out.URLSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WecomInitParameters.
func (in *WecomInitParameters) DeepCopy() *WecomInitParameters {
	if in == nil {
		return nil
	}
	out := new(WecomInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WecomObservation) DeepCopyInto(out *WecomObservation) {
	*out = *in
	if in.AgentID != nil {
		in, out := &in.AgentID, &out.AgentID
		*out = new(string)
		**out = **in
	}
	if in.CorpID != nil {
		in, out := &in.CorpID, &out.CorpID
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MsgType != nil {
		in, out := &in.MsgType, &out.MsgType
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.ToUser != nil {
		in, out := &in.ToUser, &out.ToUser
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WecomObservation.
func (in *WecomObservation) DeepCopy() *WecomObservation {
	if in == nil {
		return nil
	}
	out := new(WecomObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WecomParameters) DeepCopyInto(out *WecomParameters) {
	*out = *in
	if in.AgentID != nil {
		in, out := &in.AgentID, &out.AgentID
		*out = new(string)
		**out = **in
	}
	if in.CorpID != nil {
		in, out := &in.CorpID, &out.CorpID
		*out = new(string)
		**out = **in
	}
	if in.DisableResolveMessage != nil {
		in, out := &in.DisableResolveMessage, &out.DisableResolveMessage
		*out = new(bool)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MsgType != nil {
		in, out := &in.MsgType, &out.MsgType
		*out = new(string)
		**out = **in
	}
	if in.SecretSecretRef != nil {
		in, out := &in.SecretSecretRef, &out.SecretSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SettingsSecretRef != nil {
		in, out := &in.SettingsSecretRef, &out.SettingsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.ToUser != nil {
		in, out := &in.ToUser, &out.ToUser
		*out = new(string)
		**out = **in
	}
	if in.URLSecretRef != nil {
		in, out := &in.URLSecretRef, &out.URLSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WecomParameters.
func (in *WecomParameters) DeepCopy() *WecomParameters {
	if in == nil {
		return nil
	}
	out := new(WecomParameters)
	in.DeepCopyInto(out)
	return out
}
