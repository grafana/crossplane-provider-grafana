/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IntervalsObservation struct {
}

type IntervalsParameters struct {

	// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
	// +kubebuilder:validation:Optional
	DaysOfMonth []*string `json:"daysOfMonth,omitempty" tf:"days_of_month,omitempty"`

	// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
	// +kubebuilder:validation:Optional
	Months []*string `json:"months,omitempty" tf:"months,omitempty"`

	// The time ranges, represented in minutes, during which to mute in a given day.
	// +kubebuilder:validation:Optional
	Times []TimesParameters `json:"times,omitempty" tf:"times,omitempty"`

	// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
	// +kubebuilder:validation:Optional
	Weekdays []*string `json:"weekdays,omitempty" tf:"weekdays,omitempty"`

	// A positive inclusive range of years, e.g. "2030" or "2025:2026".
	// +kubebuilder:validation:Optional
	Years []*string `json:"years,omitempty" tf:"years,omitempty"`
}

type MuteTimingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MuteTimingParameters struct {

	// The time intervals at which to mute notifications.
	// +kubebuilder:validation:Optional
	Intervals []IntervalsParameters `json:"intervals,omitempty" tf:"intervals,omitempty"`

	// The name of the mute timing.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type TimesObservation struct {
}

type TimesParameters struct {

	// The time, in hh:mm format, of when the interval should end exclusively.
	// +kubebuilder:validation:Required
	End *string `json:"end" tf:"end,omitempty"`

	// The time, in hh:mm format, of when the interval should begin inclusively.
	// +kubebuilder:validation:Required
	Start *string `json:"start" tf:"start,omitempty"`
}

// MuteTimingSpec defines the desired state of MuteTiming
type MuteTimingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MuteTimingParameters `json:"forProvider"`
}

// MuteTimingStatus defines the observed state of MuteTiming.
type MuteTimingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MuteTimingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MuteTiming is the Schema for the MuteTimings API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type MuteTiming struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MuteTimingSpec   `json:"spec"`
	Status            MuteTimingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MuteTimingList contains a list of MuteTimings
type MuteTimingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MuteTiming `json:"items"`
}

// Repository type metadata.
var (
	MuteTiming_Kind             = "MuteTiming"
	MuteTiming_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MuteTiming_Kind}.String()
	MuteTiming_KindAPIVersion   = MuteTiming_Kind + "." + CRDGroupVersion.String()
	MuteTiming_GroupVersionKind = CRDGroupVersion.WithKind(MuteTiming_Kind)
)

func init() {
	SchemeBuilder.Register(&MuteTiming{}, &MuteTimingList{})
}
