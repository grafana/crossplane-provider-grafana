/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataObservation struct {
}

type DataParameters struct {

	// The UID of the datasource being queried, or "-100" if this stage is an expression stage.
	// +kubebuilder:validation:Required
	DatasourceUID *string `json:"datasourceUid" tf:"datasource_uid,omitempty"`

	// Custom JSON data to send to the specified datasource when querying.
	// +kubebuilder:validation:Required
	Model *string `json:"model" tf:"model,omitempty"`

	// An optional identifier for the type of query being executed. Defaults to â€œ.
	// +kubebuilder:validation:Optional
	QueryType *string `json:"queryType,omitempty" tf:"query_type,omitempty"`

	// A unique string to identify this query stage within a rule.
	// +kubebuilder:validation:Required
	RefID *string `json:"refId" tf:"ref_id,omitempty"`

	// The time range, relative to when the query is executed, across which to query.
	// +kubebuilder:validation:Required
	RelativeTimeRange []RelativeTimeRangeParameters `json:"relativeTimeRange" tf:"relative_time_range,omitempty"`
}

type RelativeTimeRangeObservation struct {
}

type RelativeTimeRangeParameters struct {

	// The number of seconds in the past, relative to when the rule is evaluated, at which the time range begins.
	// +kubebuilder:validation:Required
	From *float64 `json:"from" tf:"from,omitempty"`

	// The number of seconds in the past, relative to when the rule is evaluated, at which the time range ends.
	// +kubebuilder:validation:Required
	To *float64 `json:"to" tf:"to,omitempty"`
}

type RuleGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The rules within the group.
	// +kubebuilder:validation:Required
	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type RuleGroupParameters struct {

	// Reference to a Folder in oss to populate folderUid.
	// +kubebuilder:validation:Optional
	FolderRef *v1.Reference `json:"folderRef,omitempty" tf:"-"`

	// Selector for a Folder in oss to populate folderUid.
	// +kubebuilder:validation:Optional
	FolderSelector *v1.Selector `json:"folderSelector,omitempty" tf:"-"`

	// The UID of the folder that the group belongs to.
	// +crossplane:generate:reference:type=github.com/grafana/crossplane-provider-grafana/apis/oss/v1alpha1.Folder
	// +crossplane:generate:reference:extractor=github.com/grafana/crossplane-provider-grafana/config/grafana.UIDExtractor()
	// +crossplane:generate:reference:refFieldName=FolderRef
	// +crossplane:generate:reference:selectorFieldName=FolderSelector
	// +kubebuilder:validation:Optional
	FolderUID *string `json:"folderUid,omitempty" tf:"folder_uid,omitempty"`

	// The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
	// +kubebuilder:validation:Required
	IntervalSeconds *float64 `json:"intervalSeconds" tf:"interval_seconds,omitempty"`

	// The name of the rule group.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The ID of the org to which the group belongs.
	// +kubebuilder:validation:Required
	OrgID *float64 `json:"orgId" tf:"org_id,omitempty"`

	// The rules within the group.
	// +kubebuilder:validation:Required
	Rule []RuleParameters `json:"rule" tf:"rule,omitempty"`
}

type RuleObservation struct {

	// The unique identifier of the alert rule.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type RuleParameters struct {

	// Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// The `ref_id` of the query node in the `data` field to use as the alert condition.
	// +kubebuilder:validation:Required
	Condition *string `json:"condition" tf:"condition,omitempty"`

	// A sequence of stages that describe the contents of the rule.
	// +kubebuilder:validation:Required
	Data []DataParameters `json:"data" tf:"data,omitempty"`

	// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, and Alerting. Defaults to `Alerting`.
	// +kubebuilder:validation:Optional
	ExecErrState *string `json:"execErrState,omitempty" tf:"exec_err_state,omitempty"`

	// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
	// +kubebuilder:validation:Optional
	For *string `json:"for,omitempty" tf:"for,omitempty"`

	// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the alert rule.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, and Alerting. Defaults to `NoData`.
	// +kubebuilder:validation:Optional
	NoDataState *string `json:"noDataState,omitempty" tf:"no_data_state,omitempty"`
}

// RuleGroupSpec defines the desired state of RuleGroup
type RuleGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleGroupParameters `json:"forProvider"`
}

// RuleGroupStatus defines the observed state of RuleGroup.
type RuleGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RuleGroup is the Schema for the RuleGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type RuleGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleGroupSpec   `json:"spec"`
	Status            RuleGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleGroupList contains a list of RuleGroups
type RuleGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RuleGroup `json:"items"`
}

// Repository type metadata.
var (
	RuleGroup_Kind             = "RuleGroup"
	RuleGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RuleGroup_Kind}.String()
	RuleGroup_KindAPIVersion   = RuleGroup_Kind + "." + CRDGroupVersion.String()
	RuleGroup_GroupVersionKind = CRDGroupVersion.WithKind(RuleGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&RuleGroup{}, &RuleGroupList{})
}
