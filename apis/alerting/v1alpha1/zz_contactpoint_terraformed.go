/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"dario.cat/mergo"
	"github.com/pkg/errors"

	"github.com/crossplane/upjet/pkg/resource"
	"github.com/crossplane/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this ContactPoint
func (mg *ContactPoint) GetTerraformResourceType() string {
	return "grafana_contact_point"
}

// GetConnectionDetailsMapping for this ContactPoint
func (tr *ContactPoint) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"alertmanager[*].basic_auth_password": "spec.forProvider.alertmanager[*].basicAuthPasswordSecretRef", "alertmanager[*].settings": "spec.forProvider.alertmanager[*].settingsSecretRef", "dingding[*].settings": "spec.forProvider.dingding[*].settingsSecretRef", "discord[*].settings": "spec.forProvider.discord[*].settingsSecretRef", "discord[*].url": "spec.forProvider.discord[*].urlSecretRef", "email[*].settings": "spec.forProvider.email[*].settingsSecretRef", "googlechat[*].settings": "spec.forProvider.googlechat[*].settingsSecretRef", "googlechat[*].url": "spec.forProvider.googlechat[*].urlSecretRef", "kafka[*].password": "spec.forProvider.kafka[*].passwordSecretRef", "kafka[*].rest_proxy_url": "spec.forProvider.kafka[*].restProxyUrlSecretRef", "kafka[*].settings": "spec.forProvider.kafka[*].settingsSecretRef", "line[*].settings": "spec.forProvider.line[*].settingsSecretRef", "line[*].token": "spec.forProvider.line[*].tokenSecretRef", "oncall[*].authorization_credentials": "spec.forProvider.oncall[*].authorizationCredentialsSecretRef", "oncall[*].basic_auth_password": "spec.forProvider.oncall[*].basicAuthPasswordSecretRef", "oncall[*].settings": "spec.forProvider.oncall[*].settingsSecretRef", "opsgenie[*].api_key": "spec.forProvider.opsgenie[*].apiKeySecretRef", "opsgenie[*].settings": "spec.forProvider.opsgenie[*].settingsSecretRef", "pagerduty[*].integration_key": "spec.forProvider.pagerduty[*].integrationKeySecretRef", "pagerduty[*].settings": "spec.forProvider.pagerduty[*].settingsSecretRef", "pushover[*].api_token": "spec.forProvider.pushover[*].apiTokenSecretRef", "pushover[*].settings": "spec.forProvider.pushover[*].settingsSecretRef", "pushover[*].user_key": "spec.forProvider.pushover[*].userKeySecretRef", "sensugo[*].api_key": "spec.forProvider.sensugo[*].apiKeySecretRef", "sensugo[*].settings": "spec.forProvider.sensugo[*].settingsSecretRef", "slack[*].settings": "spec.forProvider.slack[*].settingsSecretRef", "slack[*].token": "spec.forProvider.slack[*].tokenSecretRef", "slack[*].url": "spec.forProvider.slack[*].urlSecretRef", "sns[*].access_key": "spec.forProvider.sns[*].accessKeySecretRef", "sns[*].secret_key": "spec.forProvider.sns[*].secretKeySecretRef", "sns[*].settings": "spec.forProvider.sns[*].settingsSecretRef", "teams[*].settings": "spec.forProvider.teams[*].settingsSecretRef", "teams[*].url": "spec.forProvider.teams[*].urlSecretRef", "telegram[*].settings": "spec.forProvider.telegram[*].settingsSecretRef", "telegram[*].token": "spec.forProvider.telegram[*].tokenSecretRef", "threema[*].api_secret": "spec.forProvider.threema[*].apiSecretSecretRef", "threema[*].settings": "spec.forProvider.threema[*].settingsSecretRef", "victorops[*].settings": "spec.forProvider.victorops[*].settingsSecretRef", "webex[*].settings": "spec.forProvider.webex[*].settingsSecretRef", "webex[*].token": "spec.forProvider.webex[*].tokenSecretRef", "webhook[*].authorization_credentials": "spec.forProvider.webhook[*].authorizationCredentialsSecretRef", "webhook[*].basic_auth_password": "spec.forProvider.webhook[*].basicAuthPasswordSecretRef", "webhook[*].settings": "spec.forProvider.webhook[*].settingsSecretRef", "wecom[*].secret": "spec.forProvider.wecom[*].secretSecretRef", "wecom[*].settings": "spec.forProvider.wecom[*].settingsSecretRef", "wecom[*].url": "spec.forProvider.wecom[*].urlSecretRef"}
}

// GetObservation of this ContactPoint
func (tr *ContactPoint) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ContactPoint
func (tr *ContactPoint) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ContactPoint
func (tr *ContactPoint) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ContactPoint
func (tr *ContactPoint) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ContactPoint
func (tr *ContactPoint) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ContactPoint
func (tr *ContactPoint) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// GetInitParameters of this ContactPoint
func (tr *ContactPoint) GetMergedParameters(shouldMergeInitProvider bool) (map[string]any, error) {
	params, err := tr.GetParameters()
	if err != nil {
		return nil, errors.Wrapf(err, "cannot get parameters for resource '%q'", tr.GetName())
	}
	if !shouldMergeInitProvider {
		return params, nil
	}

	initParams, err := tr.GetInitParameters()
	if err != nil {
		return nil, errors.Wrapf(err, "cannot get init parameters for resource '%q'", tr.GetName())
	}

	// Note(lsviben): mergo.WithSliceDeepCopy is needed to merge the
	// slices from the initProvider to forProvider. As it also sets
	// overwrite to true, we need to set it back to false, we don't
	// want to overwrite the forProvider fields with the initProvider
	// fields.
	err = mergo.Merge(&params, initParams, mergo.WithSliceDeepCopy, func(c *mergo.Config) {
		c.Overwrite = false
	})
	if err != nil {
		return nil, errors.Wrapf(err, "cannot merge spec.initProvider and spec.forProvider parameters for resource '%q'", tr.GetName())
	}

	return params, nil
}

// LateInitialize this ContactPoint using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ContactPoint) LateInitialize(attrs []byte) (bool, error) {
	params := &ContactPointParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ContactPoint) GetTerraformSchemaVersion() int {
	return 0
}
