/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertmanagerObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type AlertmanagerParameters struct {

	// The password component of the basic auth credentials to use.
	// +kubebuilder:validation:Optional
	BasicAuthPasswordSecretRef *v1.SecretKeySelector `json:"basicAuthPasswordSecretRef,omitempty" tf:"-"`

	// The username component of the basic auth credentials to use.
	// +kubebuilder:validation:Optional
	BasicAuthUser *string `json:"basicAuthUser,omitempty" tf:"basic_auth_user,omitempty"`

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The URL of the Alertmanager instance.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type ContactPointObservation struct {

	// A contact point that sends notifications to other Alertmanager instances.
	// +kubebuilder:validation:Optional
	Alertmanager []AlertmanagerObservation `json:"alertmanager,omitempty" tf:"alertmanager,omitempty"`

	// A contact point that sends notifications to DingDing.
	// +kubebuilder:validation:Optional
	Dingding []DingdingObservation `json:"dingding,omitempty" tf:"dingding,omitempty"`

	// A contact point that sends notifications as Discord messages
	// +kubebuilder:validation:Optional
	Discord []DiscordObservation `json:"discord,omitempty" tf:"discord,omitempty"`

	// A contact point that sends notifications to an email address.
	// +kubebuilder:validation:Optional
	Email []EmailObservation `json:"email,omitempty" tf:"email,omitempty"`

	// A contact point that sends notifications to Google Chat.
	// +kubebuilder:validation:Optional
	Googlechat []GooglechatObservation `json:"googlechat,omitempty" tf:"googlechat,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A contact point that publishes notifications to Apache Kafka topics.
	// +kubebuilder:validation:Optional
	Kafka []KafkaObservation `json:"kafka,omitempty" tf:"kafka,omitempty"`

	// A contact point that sends notifications to OpsGenie.
	// +kubebuilder:validation:Optional
	Opsgenie []OpsgenieObservation `json:"opsgenie,omitempty" tf:"opsgenie,omitempty"`

	// A contact point that sends notifications to PagerDuty.
	// +kubebuilder:validation:Optional
	Pagerduty []PagerdutyObservation `json:"pagerduty,omitempty" tf:"pagerduty,omitempty"`

	// A contact point that sends notifications to Pushover.
	// +kubebuilder:validation:Optional
	Pushover []PushoverObservation `json:"pushover,omitempty" tf:"pushover,omitempty"`

	// A contact point that sends notifications to SensuGo.
	// +kubebuilder:validation:Optional
	Sensugo []SensugoObservation `json:"sensugo,omitempty" tf:"sensugo,omitempty"`

	// A contact point that sends notifications to Slack.
	// +kubebuilder:validation:Optional
	Slack []SlackObservation `json:"slack,omitempty" tf:"slack,omitempty"`

	// A contact point that sends notifications to Microsoft Teams.
	// +kubebuilder:validation:Optional
	Teams []TeamsObservation `json:"teams,omitempty" tf:"teams,omitempty"`

	// A contact point that sends notifications to Telegram.
	// +kubebuilder:validation:Optional
	Telegram []TelegramObservation `json:"telegram,omitempty" tf:"telegram,omitempty"`

	// A contact point that sends notifications to Threema.
	// +kubebuilder:validation:Optional
	Threema []ThreemaObservation `json:"threema,omitempty" tf:"threema,omitempty"`

	// A contact point that sends notifications to VictorOps (now known as Splunk OnCall).
	// +kubebuilder:validation:Optional
	Victorops []VictoropsObservation `json:"victorops,omitempty" tf:"victorops,omitempty"`

	// A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
	// +kubebuilder:validation:Optional
	Webhook []WebhookObservation `json:"webhook,omitempty" tf:"webhook,omitempty"`

	// A contact point that sends notifications to WeCom.
	// +kubebuilder:validation:Optional
	Wecom []WecomObservation `json:"wecom,omitempty" tf:"wecom,omitempty"`
}

type ContactPointParameters struct {

	// A contact point that sends notifications to other Alertmanager instances.
	// +kubebuilder:validation:Optional
	Alertmanager []AlertmanagerParameters `json:"alertmanager,omitempty" tf:"alertmanager,omitempty"`

	// A contact point that sends notifications to DingDing.
	// +kubebuilder:validation:Optional
	Dingding []DingdingParameters `json:"dingding,omitempty" tf:"dingding,omitempty"`

	// A contact point that sends notifications as Discord messages
	// +kubebuilder:validation:Optional
	Discord []DiscordParameters `json:"discord,omitempty" tf:"discord,omitempty"`

	// A contact point that sends notifications to an email address.
	// +kubebuilder:validation:Optional
	Email []EmailParameters `json:"email,omitempty" tf:"email,omitempty"`

	// A contact point that sends notifications to Google Chat.
	// +kubebuilder:validation:Optional
	Googlechat []GooglechatParameters `json:"googlechat,omitempty" tf:"googlechat,omitempty"`

	// A contact point that publishes notifications to Apache Kafka topics.
	// +kubebuilder:validation:Optional
	Kafka []KafkaParameters `json:"kafka,omitempty" tf:"kafka,omitempty"`

	// The name of the contact point.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// A contact point that sends notifications to OpsGenie.
	// +kubebuilder:validation:Optional
	Opsgenie []OpsgenieParameters `json:"opsgenie,omitempty" tf:"opsgenie,omitempty"`

	// A contact point that sends notifications to PagerDuty.
	// +kubebuilder:validation:Optional
	Pagerduty []PagerdutyParameters `json:"pagerduty,omitempty" tf:"pagerduty,omitempty"`

	// A contact point that sends notifications to Pushover.
	// +kubebuilder:validation:Optional
	Pushover []PushoverParameters `json:"pushover,omitempty" tf:"pushover,omitempty"`

	// A contact point that sends notifications to SensuGo.
	// +kubebuilder:validation:Optional
	Sensugo []SensugoParameters `json:"sensugo,omitempty" tf:"sensugo,omitempty"`

	// A contact point that sends notifications to Slack.
	// +kubebuilder:validation:Optional
	Slack []SlackParameters `json:"slack,omitempty" tf:"slack,omitempty"`

	// A contact point that sends notifications to Microsoft Teams.
	// +kubebuilder:validation:Optional
	Teams []TeamsParameters `json:"teams,omitempty" tf:"teams,omitempty"`

	// A contact point that sends notifications to Telegram.
	// +kubebuilder:validation:Optional
	Telegram []TelegramParameters `json:"telegram,omitempty" tf:"telegram,omitempty"`

	// A contact point that sends notifications to Threema.
	// +kubebuilder:validation:Optional
	Threema []ThreemaParameters `json:"threema,omitempty" tf:"threema,omitempty"`

	// A contact point that sends notifications to VictorOps (now known as Splunk OnCall).
	// +kubebuilder:validation:Optional
	Victorops []VictoropsParameters `json:"victorops,omitempty" tf:"victorops,omitempty"`

	// A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
	// +kubebuilder:validation:Optional
	Webhook []WebhookParameters `json:"webhook,omitempty" tf:"webhook,omitempty"`

	// A contact point that sends notifications to WeCom.
	// +kubebuilder:validation:Optional
	Wecom []WecomParameters `json:"wecom,omitempty" tf:"wecom,omitempty"`
}

type DingdingObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type DingdingParameters struct {

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The templated content of the message.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The format of message to send - either 'link' or 'actionCard'
	// +kubebuilder:validation:Optional
	MessageType *string `json:"messageType,omitempty" tf:"message_type,omitempty"`

	// The DingDing webhook URL.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type DiscordObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type DiscordParameters struct {

	// The URL of a custom avatar image to use. Defaults to “.
	// +kubebuilder:validation:Optional
	AvatarURL *string `json:"avatarUrl,omitempty" tf:"avatar_url,omitempty"`

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The templated content of the message. Defaults to “.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The discord webhook URL.
	// +kubebuilder:validation:Required
	URLSecretRef v1.SecretKeySelector `json:"urlSecretRef" tf:"-"`

	// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
	// +kubebuilder:validation:Optional
	UseDiscordUsername *bool `json:"useDiscordUsername,omitempty" tf:"use_discord_username,omitempty"`
}

type EmailObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type EmailParameters struct {

	// The addresses to send emails to.
	// +kubebuilder:validation:Required
	Addresses []*string `json:"addresses" tf:"addresses,omitempty"`

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The templated content of the email. Defaults to “.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
	// +kubebuilder:validation:Optional
	SingleEmail *bool `json:"singleEmail,omitempty" tf:"single_email,omitempty"`

	// The templated subject line of the email. Defaults to “.
	// +kubebuilder:validation:Optional
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

type GooglechatObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type GooglechatParameters struct {

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The templated content of the message.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The Google Chat webhook URL.
	// +kubebuilder:validation:Required
	URLSecretRef v1.SecretKeySelector `json:"urlSecretRef" tf:"-"`
}

type KafkaObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type KafkaParameters struct {

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The URL of the Kafka REST proxy to send requests to.
	// +kubebuilder:validation:Required
	RestProxyURLSecretRef v1.SecretKeySelector `json:"restProxyUrlSecretRef" tf:"-"`

	// The name of the Kafka topic to publish to.
	// +kubebuilder:validation:Required
	Topic *string `json:"topic" tf:"topic,omitempty"`
}

type OpsgenieObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type OpsgenieParameters struct {

	// The OpsGenie API key to use.
	// +kubebuilder:validation:Required
	APIKeySecretRef v1.SecretKeySelector `json:"apiKeySecretRef" tf:"-"`

	// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
	// +kubebuilder:validation:Optional
	AutoClose *bool `json:"autoClose,omitempty" tf:"auto_close,omitempty"`

	// A templated high-level description to use for the alert.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The templated content of the message.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// Whether to allow the alert priority to be configured via the value of the `og_priority` annotation on the alert.
	// +kubebuilder:validation:Optional
	OverridePriority *bool `json:"overridePriority,omitempty" tf:"override_priority,omitempty"`

	// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
	// +kubebuilder:validation:Optional
	SendTagsAs *string `json:"sendTagsAs,omitempty" tf:"send_tags_as,omitempty"`

	// Allows customization of the OpsGenie API URL.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type PagerdutyObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type PagerdutyParameters struct {

	// The class or type of event, for example `ping failure`.
	// +kubebuilder:validation:Optional
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// The component being affected by the event.
	// +kubebuilder:validation:Optional
	Component *string `json:"component,omitempty" tf:"component,omitempty"`

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The group to which the provided component belongs to.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// The PagerDuty API key.
	// +kubebuilder:validation:Required
	IntegrationKeySecretRef v1.SecretKeySelector `json:"integrationKeySecretRef" tf:"-"`

	// The PagerDuty event severity level. Default is `critical`.
	// +kubebuilder:validation:Optional
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// The templated summary message of the event.
	// +kubebuilder:validation:Optional
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`
}

type PushoverObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type PushoverParameters struct {

	// The Pushover API token.
	// +kubebuilder:validation:Required
	APITokenSecretRef v1.SecretKeySelector `json:"apiTokenSecretRef" tf:"-"`

	// Comma-separated list of devices to which the event is associated.
	// +kubebuilder:validation:Optional
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// How many seconds for which the notification will continue to be retried by Pushover.
	// +kubebuilder:validation:Optional
	Expire *float64 `json:"expire,omitempty" tf:"expire,omitempty"`

	// The templated notification message content.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The priority level of the resolved event.
	// +kubebuilder:validation:Optional
	OkPriority *float64 `json:"okPriority,omitempty" tf:"ok_priority,omitempty"`

	// The sound associated with the resolved notification.
	// +kubebuilder:validation:Optional
	OkSound *string `json:"okSound,omitempty" tf:"ok_sound,omitempty"`

	// The priority level of the event.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// How often, in seconds, the Pushover servers will send the same notification to the user.
	// +kubebuilder:validation:Optional
	Retry *float64 `json:"retry,omitempty" tf:"retry,omitempty"`

	// The sound associated with the notification.
	// +kubebuilder:validation:Optional
	Sound *string `json:"sound,omitempty" tf:"sound,omitempty"`

	// The Pushover user key.
	// +kubebuilder:validation:Required
	UserKeySecretRef v1.SecretKeySelector `json:"userKeySecretRef" tf:"-"`
}

type SensugoObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type SensugoParameters struct {

	// The SensuGo API key.
	// +kubebuilder:validation:Required
	APIKeySecretRef v1.SecretKeySelector `json:"apiKeySecretRef" tf:"-"`

	// The SensuGo check to which the event should be routed.
	// +kubebuilder:validation:Optional
	Check *string `json:"check,omitempty" tf:"check,omitempty"`

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The entity being monitored.
	// +kubebuilder:validation:Optional
	Entity *string `json:"entity,omitempty" tf:"entity,omitempty"`

	// A custom handler to execute in addition to the check.
	// +kubebuilder:validation:Optional
	Handler *string `json:"handler,omitempty" tf:"handler,omitempty"`

	// Templated message content describing the alert.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The namespace in which the check resides.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The SensuGo URL to send requests to.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type SlackObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type SlackParameters struct {

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// Use this to override the Slack API endpoint URL to send requests to.
	// +kubebuilder:validation:Optional
	EndpointURL *string `json:"endpointUrl,omitempty" tf:"endpoint_url,omitempty"`

	// The name of a Slack workspace emoji to use as the bot icon.
	// +kubebuilder:validation:Optional
	IconEmoji *string `json:"iconEmoji,omitempty" tf:"icon_emoji,omitempty"`

	// A URL of an image to use as the bot icon.
	// +kubebuilder:validation:Optional
	IconURL *string `json:"iconUrl,omitempty" tf:"icon_url,omitempty"`

	// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
	// +kubebuilder:validation:Optional
	MentionChannel *string `json:"mentionChannel,omitempty" tf:"mention_channel,omitempty"`

	// Comma-separated list of groups to mention in the message.
	// +kubebuilder:validation:Optional
	MentionGroups *string `json:"mentionGroups,omitempty" tf:"mention_groups,omitempty"`

	// Comma-separated list of users to mention in the message.
	// +kubebuilder:validation:Optional
	MentionUsers *string `json:"mentionUsers,omitempty" tf:"mention_users,omitempty"`

	// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
	// +kubebuilder:validation:Optional
	Recipient *string `json:"recipient,omitempty" tf:"recipient,omitempty"`

	// Templated content of the message.
	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// Templated title of the message.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// A Slack API token,for sending messages directly without the webhook method.
	// +kubebuilder:validation:Optional
	TokenSecretRef *v1.SecretKeySelector `json:"tokenSecretRef,omitempty" tf:"-"`

	// A Slack webhook URL,for sending messages via the webhook method.
	// +kubebuilder:validation:Optional
	URLSecretRef *v1.SecretKeySelector `json:"urlSecretRef,omitempty" tf:"-"`

	// Username for the bot to use.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type TeamsObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type TeamsParameters struct {

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The templated message content to send.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The templated subtitle for each message section.
	// +kubebuilder:validation:Optional
	SectionTitle *string `json:"sectionTitle,omitempty" tf:"section_title,omitempty"`

	// The templated title of the message.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// A Teams webhook URL.
	// +kubebuilder:validation:Required
	URLSecretRef v1.SecretKeySelector `json:"urlSecretRef" tf:"-"`
}

type TelegramObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type TelegramParameters struct {

	// The chat ID to send messages to.
	// +kubebuilder:validation:Required
	ChatID *string `json:"chatId" tf:"chat_id,omitempty"`

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The templated content of the message.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The Telegram bot token.
	// +kubebuilder:validation:Required
	TokenSecretRef v1.SecretKeySelector `json:"tokenSecretRef" tf:"-"`
}

type ThreemaObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type ThreemaParameters struct {

	// The Threema API key.
	// +kubebuilder:validation:Required
	APISecretSecretRef v1.SecretKeySelector `json:"apiSecretSecretRef" tf:"-"`

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The Threema gateway ID.
	// +kubebuilder:validation:Required
	GatewayID *string `json:"gatewayId" tf:"gateway_id,omitempty"`

	// The ID of the recipient of the message.
	// +kubebuilder:validation:Required
	RecipientID *string `json:"recipientId" tf:"recipient_id,omitempty"`
}

type VictoropsObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type VictoropsParameters struct {

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
	// +kubebuilder:validation:Optional
	MessageType *string `json:"messageType,omitempty" tf:"message_type,omitempty"`

	// The VictorOps webhook URL.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type WebhookObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type WebhookParameters struct {

	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	// +kubebuilder:validation:Optional
	AuthorizationCredentialsSecretRef *v1.SecretKeySelector `json:"authorizationCredentialsSecretRef,omitempty" tf:"-"`

	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	// +kubebuilder:validation:Optional
	AuthorizationScheme *string `json:"authorizationScheme,omitempty" tf:"authorization_scheme,omitempty"`

	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	// +kubebuilder:validation:Optional
	BasicAuthPasswordSecretRef *v1.SecretKeySelector `json:"basicAuthPasswordSecretRef,omitempty" tf:"-"`

	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	// +kubebuilder:validation:Optional
	BasicAuthUser *string `json:"basicAuthUser,omitempty" tf:"basic_auth_user,omitempty"`

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The HTTP method to use in the request. Defaults to `POST`.
	// +kubebuilder:validation:Optional
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	// +kubebuilder:validation:Optional
	MaxAlerts *float64 `json:"maxAlerts,omitempty" tf:"max_alerts,omitempty"`

	// The URL to send webhook requests to.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type WecomObservation struct {

	// The UID of the contact point.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type WecomParameters struct {

	// Whether to disable sending resolve messages. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty" tf:"disable_resolve_message,omitempty"`

	// The templated content of the message to send.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The templated title of the message to send.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The WeCom webhook URL.
	// +kubebuilder:validation:Required
	URLSecretRef v1.SecretKeySelector `json:"urlSecretRef" tf:"-"`
}

// ContactPointSpec defines the desired state of ContactPoint
type ContactPointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContactPointParameters `json:"forProvider"`
}

// ContactPointStatus defines the observed state of ContactPoint.
type ContactPointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContactPointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ContactPoint is the Schema for the ContactPoints API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type ContactPoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContactPointSpec   `json:"spec"`
	Status            ContactPointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContactPointList contains a list of ContactPoints
type ContactPointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContactPoint `json:"items"`
}

// Repository type metadata.
var (
	ContactPoint_Kind             = "ContactPoint"
	ContactPoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContactPoint_Kind}.String()
	ContactPoint_KindAPIVersion   = ContactPoint_Kind + "." + CRDGroupVersion.String()
	ContactPoint_GroupVersionKind = CRDGroupVersion.WithKind(ContactPoint_Kind)
)

func init() {
	SchemeBuilder.Register(&ContactPoint{}, &ContactPointList{})
}
