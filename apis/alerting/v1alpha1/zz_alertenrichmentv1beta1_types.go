/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertenrichmentV1Beta1InitParameters struct {

	// The metadata of the resource.
	Metadata []MetadataInitParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Options for applying the resource.
	Options []OptionsInitParameters `json:"options,omitempty" tf:"options,omitempty"`

	// The spec of the resource.
	Spec []SpecInitParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type AlertenrichmentV1Beta1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The metadata of the resource.
	Metadata []MetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Options for applying the resource.
	Options []OptionsObservation `json:"options,omitempty" tf:"options,omitempty"`

	// The spec of the resource.
	Spec []SpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`
}

type AlertenrichmentV1Beta1Parameters struct {

	// The metadata of the resource.
	// +kubebuilder:validation:Optional
	Metadata []MetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Options for applying the resource.
	// +kubebuilder:validation:Optional
	Options []OptionsParameters `json:"options,omitempty" tf:"options,omitempty"`

	// The spec of the resource.
	// +kubebuilder:validation:Optional
	Spec []SpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type AnnotationMatchersInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name"`

	Type *string `json:"type,omitempty" tf:"type"`

	Value *string `json:"value,omitempty" tf:"value"`
}

type AnnotationMatchersObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AnnotationMatchersParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type AssertsInitParameters struct {

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type AssertsObservation struct {

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type AssertsParameters struct {

	// Maximum execution time (e.g., '30s', '1m')
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type AssignInitParameters struct {

	// Map of annotation names to values to set on matching alerts.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type AssignObservation struct {

	// Map of annotation names to values to set on matching alerts.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type AssignParameters struct {

	// Map of annotation names to values to set on matching alerts.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Maximum execution time (e.g., '30s', '1m')
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type AssistantInvestigationsInitParameters struct {

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type AssistantInvestigationsObservation struct {

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type AssistantInvestigationsParameters struct {

	// Maximum execution time (e.g., '30s', '1m')
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type DataSourceInitParameters struct {

	// Logs query configuration for querying log data sources.
	LogsQuery []LogsQueryInitParameters `json:"logsQuery,omitempty" tf:"logs_query,omitempty"`

	// Raw query configuration for advanced data source queries.
	RawQuery []RawQueryInitParameters `json:"rawQuery,omitempty" tf:"raw_query,omitempty"`

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type DataSourceObservation struct {

	// Logs query configuration for querying log data sources.
	LogsQuery []LogsQueryObservation `json:"logsQuery,omitempty" tf:"logs_query,omitempty"`

	// Raw query configuration for advanced data source queries.
	RawQuery []RawQueryObservation `json:"rawQuery,omitempty" tf:"raw_query,omitempty"`

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type DataSourceParameters struct {

	// Logs query configuration for querying log data sources.
	// +kubebuilder:validation:Optional
	LogsQuery []LogsQueryParameters `json:"logsQuery,omitempty" tf:"logs_query,omitempty"`

	// Raw query configuration for advanced data source queries.
	// +kubebuilder:validation:Optional
	RawQuery []RawQueryParameters `json:"rawQuery,omitempty" tf:"raw_query,omitempty"`

	// Maximum execution time (e.g., '30s', '1m')
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type ExplainInitParameters struct {

	// Annotation name to set the explanation in. Defaults to 'ai_explanation'.
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type ExplainObservation struct {

	// Annotation name to set the explanation in. Defaults to 'ai_explanation'.
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type ExplainParameters struct {

	// Annotation name to set the explanation in. Defaults to 'ai_explanation'.
	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// Maximum execution time (e.g., '30s', '1m')
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type ExternalInitParameters struct {

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// HTTP endpoint URL to call for enrichment
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ExternalObservation struct {

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// HTTP endpoint URL to call for enrichment
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ExternalParameters struct {

	// Maximum execution time (e.g., '30s', '1m')
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// HTTP endpoint URL to call for enrichment
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type LabelMatchersInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name"`

	Type *string `json:"type,omitempty" tf:"type"`

	Value *string `json:"value,omitempty" tf:"value"`
}

type LabelMatchersObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LabelMatchersParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type LogsQueryInitParameters struct {

	// Data source type (e.g., 'loki').
	DataSourceType *string `json:"dataSourceType,omitempty" tf:"data_source_type,omitempty"`

	// UID of the data source to query.
	DataSourceUID *string `json:"dataSourceUid,omitempty" tf:"data_source_uid,omitempty"`

	// Log query expression to execute.
	Expr *string `json:"expr,omitempty" tf:"expr,omitempty"`

	// Maximum number of log lines to include. Defaults to 3.
	MaxLines *float64 `json:"maxLines,omitempty" tf:"max_lines,omitempty"`
}

type LogsQueryObservation struct {

	// Data source type (e.g., 'loki').
	DataSourceType *string `json:"dataSourceType,omitempty" tf:"data_source_type,omitempty"`

	// UID of the data source to query.
	DataSourceUID *string `json:"dataSourceUid,omitempty" tf:"data_source_uid,omitempty"`

	// Log query expression to execute.
	Expr *string `json:"expr,omitempty" tf:"expr,omitempty"`

	// Maximum number of log lines to include. Defaults to 3.
	MaxLines *float64 `json:"maxLines,omitempty" tf:"max_lines,omitempty"`
}

type LogsQueryParameters struct {

	// Data source type (e.g., 'loki').
	// +kubebuilder:validation:Optional
	DataSourceType *string `json:"dataSourceType,omitempty" tf:"data_source_type,omitempty"`

	// UID of the data source to query.
	// +kubebuilder:validation:Optional
	DataSourceUID *string `json:"dataSourceUid,omitempty" tf:"data_source_uid,omitempty"`

	// Log query expression to execute.
	// +kubebuilder:validation:Optional
	Expr *string `json:"expr,omitempty" tf:"expr,omitempty"`

	// Maximum number of log lines to include. Defaults to 3.
	// +kubebuilder:validation:Optional
	MaxLines *float64 `json:"maxLines,omitempty" tf:"max_lines,omitempty"`
}

type MetadataInitParameters struct {

	// The UID of the folder to save the resource in.
	FolderUID *string `json:"folderUid,omitempty" tf:"folder_uid,omitempty"`

	// The unique identifier of the resource.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type MetadataObservation struct {

	// The UID of the folder to save the resource in.
	FolderUID *string `json:"folderUid,omitempty" tf:"folder_uid,omitempty"`

	// The unique identifier of the resource.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The full URL of the resource.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The globally unique identifier of a resource, used by the API for tracking.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// The version of the resource.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type MetadataParameters struct {

	// The UID of the folder to save the resource in.
	// +kubebuilder:validation:Optional
	FolderUID *string `json:"folderUid,omitempty" tf:"folder_uid,omitempty"`

	// The unique identifier of the resource.
	// +kubebuilder:validation:Optional
	UID *string `json:"uid" tf:"uid,omitempty"`
}

type OptionsInitParameters struct {

	// Set to true if you want to overwrite existing resource with newer version, same resource title in folder or same resource uid.
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`
}

type OptionsObservation struct {

	// Set to true if you want to overwrite existing resource with newer version, same resource title in folder or same resource uid.
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`
}

type OptionsParameters struct {

	// Set to true if you want to overwrite existing resource with newer version, same resource title in folder or same resource uid.
	// +kubebuilder:validation:Optional
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`
}

type RawQueryInitParameters struct {

	// Reference ID for correlating queries.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Raw request payload for the data source query.
	Request *string `json:"request,omitempty" tf:"request,omitempty"`
}

type RawQueryObservation struct {

	// Reference ID for correlating queries.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Raw request payload for the data source query.
	Request *string `json:"request,omitempty" tf:"request,omitempty"`
}

type RawQueryParameters struct {

	// Reference ID for correlating queries.
	// +kubebuilder:validation:Optional
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Raw request payload for the data source query.
	// +kubebuilder:validation:Optional
	Request *string `json:"request,omitempty" tf:"request,omitempty"`
}

type SiftInitParameters struct {

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type SiftObservation struct {

	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type SiftParameters struct {

	// Maximum execution time (e.g., '30s', '1m')
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type SpecInitParameters struct {

	// UIDs of alert rules this enrichment applies to. If empty, applies to all alert rules.
	AlertRuleUids []*string `json:"alertRuleUids,omitempty" tf:"alert_rule_uids,omitempty"`

	// Annotation matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, annotation key to match), 'value' (string, annotation value to compare against, supports regex for =~/!~ operators).
	AnnotationMatchers []AnnotationMatchersInitParameters `json:"annotationMatchers,omitempty" tf:"annotation_matchers,omitempty"`

	// Description of the alert enrichment.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Label matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, label key to match), 'value' (string, label value to compare against, supports regex for =~/!~ operators).
	LabelMatchers []LabelMatchersInitParameters `json:"labelMatchers,omitempty" tf:"label_matchers,omitempty"`

	// Receiver names to match. If empty, applies to all receivers.
	Receivers []*string `json:"receivers,omitempty" tf:"receivers,omitempty"`

	// Enrichment step. Can be repeated multiple times to define a sequence of steps. Each step must contain exactly one enrichment block.
	Step []StepInitParameters `json:"step,omitempty" tf:"step,omitempty"`

	// The title of the alert enrichment.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type SpecObservation struct {

	// UIDs of alert rules this enrichment applies to. If empty, applies to all alert rules.
	AlertRuleUids []*string `json:"alertRuleUids,omitempty" tf:"alert_rule_uids,omitempty"`

	// Annotation matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, annotation key to match), 'value' (string, annotation value to compare against, supports regex for =~/!~ operators).
	AnnotationMatchers []AnnotationMatchersObservation `json:"annotationMatchers,omitempty" tf:"annotation_matchers,omitempty"`

	// Description of the alert enrichment.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Label matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, label key to match), 'value' (string, label value to compare against, supports regex for =~/!~ operators).
	LabelMatchers []LabelMatchersObservation `json:"labelMatchers,omitempty" tf:"label_matchers,omitempty"`

	// Receiver names to match. If empty, applies to all receivers.
	Receivers []*string `json:"receivers,omitempty" tf:"receivers,omitempty"`

	// Enrichment step. Can be repeated multiple times to define a sequence of steps. Each step must contain exactly one enrichment block.
	Step []StepObservation `json:"step,omitempty" tf:"step,omitempty"`

	// The title of the alert enrichment.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type SpecParameters struct {

	// UIDs of alert rules this enrichment applies to. If empty, applies to all alert rules.
	// +kubebuilder:validation:Optional
	AlertRuleUids []*string `json:"alertRuleUids,omitempty" tf:"alert_rule_uids,omitempty"`

	// Annotation matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, annotation key to match), 'value' (string, annotation value to compare against, supports regex for =~/!~ operators).
	// +kubebuilder:validation:Optional
	AnnotationMatchers []AnnotationMatchersParameters `json:"annotationMatchers,omitempty" tf:"annotation_matchers,omitempty"`

	// Description of the alert enrichment.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Label matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, label key to match), 'value' (string, label value to compare against, supports regex for =~/!~ operators).
	// +kubebuilder:validation:Optional
	LabelMatchers []LabelMatchersParameters `json:"labelMatchers,omitempty" tf:"label_matchers,omitempty"`

	// Receiver names to match. If empty, applies to all receivers.
	// +kubebuilder:validation:Optional
	Receivers []*string `json:"receivers,omitempty" tf:"receivers,omitempty"`

	// Enrichment step. Can be repeated multiple times to define a sequence of steps. Each step must contain exactly one enrichment block.
	// +kubebuilder:validation:Optional
	Step []StepParameters `json:"step,omitempty" tf:"step,omitempty"`

	// The title of the alert enrichment.
	// +kubebuilder:validation:Optional
	Title *string `json:"title" tf:"title,omitempty"`
}

type StepInitParameters struct {

	// Integrate with Grafana Asserts for enrichment.
	Asserts []AssertsInitParameters `json:"asserts,omitempty" tf:"asserts,omitempty"`

	// Assign annotations to an alert.
	Assign []AssignInitParameters `json:"assign,omitempty" tf:"assign,omitempty"`

	// Use AI assistant to investigate alerts and add insights.
	AssistantInvestigations []AssistantInvestigationsInitParameters `json:"assistantInvestigations,omitempty" tf:"assistant_investigations,omitempty"`

	// Query Grafana data sources and add results to alerts.
	DataSource []DataSourceInitParameters `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Generate AI explanation and store in an annotation.
	Explain []ExplainInitParameters `json:"explain,omitempty" tf:"explain,omitempty"`

	// Call an external HTTP service for enrichment.
	External []ExternalInitParameters `json:"external,omitempty" tf:"external,omitempty"`

	// Analyze alerts for patterns and insights.
	Sift []SiftInitParameters `json:"sift,omitempty" tf:"sift,omitempty"`
}

type StepObservation struct {

	// Integrate with Grafana Asserts for enrichment.
	Asserts []AssertsObservation `json:"asserts,omitempty" tf:"asserts,omitempty"`

	// Assign annotations to an alert.
	Assign []AssignObservation `json:"assign,omitempty" tf:"assign,omitempty"`

	// Use AI assistant to investigate alerts and add insights.
	AssistantInvestigations []AssistantInvestigationsObservation `json:"assistantInvestigations,omitempty" tf:"assistant_investigations,omitempty"`

	// Query Grafana data sources and add results to alerts.
	DataSource []DataSourceObservation `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Generate AI explanation and store in an annotation.
	Explain []ExplainObservation `json:"explain,omitempty" tf:"explain,omitempty"`

	// Call an external HTTP service for enrichment.
	External []ExternalObservation `json:"external,omitempty" tf:"external,omitempty"`

	// Analyze alerts for patterns and insights.
	Sift []SiftObservation `json:"sift,omitempty" tf:"sift,omitempty"`
}

type StepParameters struct {

	// Integrate with Grafana Asserts for enrichment.
	// +kubebuilder:validation:Optional
	Asserts []AssertsParameters `json:"asserts,omitempty" tf:"asserts,omitempty"`

	// Assign annotations to an alert.
	// +kubebuilder:validation:Optional
	Assign []AssignParameters `json:"assign,omitempty" tf:"assign,omitempty"`

	// Use AI assistant to investigate alerts and add insights.
	// +kubebuilder:validation:Optional
	AssistantInvestigations []AssistantInvestigationsParameters `json:"assistantInvestigations,omitempty" tf:"assistant_investigations,omitempty"`

	// Query Grafana data sources and add results to alerts.
	// +kubebuilder:validation:Optional
	DataSource []DataSourceParameters `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Generate AI explanation and store in an annotation.
	// +kubebuilder:validation:Optional
	Explain []ExplainParameters `json:"explain,omitempty" tf:"explain,omitempty"`

	// Call an external HTTP service for enrichment.
	// +kubebuilder:validation:Optional
	External []ExternalParameters `json:"external,omitempty" tf:"external,omitempty"`

	// Analyze alerts for patterns and insights.
	// +kubebuilder:validation:Optional
	Sift []SiftParameters `json:"sift,omitempty" tf:"sift,omitempty"`
}

// AlertenrichmentV1Beta1Spec defines the desired state of AlertenrichmentV1Beta1
type AlertenrichmentV1Beta1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlertenrichmentV1Beta1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AlertenrichmentV1Beta1InitParameters `json:"initProvider,omitempty"`
}

// AlertenrichmentV1Beta1Status defines the observed state of AlertenrichmentV1Beta1.
type AlertenrichmentV1Beta1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlertenrichmentV1Beta1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AlertenrichmentV1Beta1 is the Schema for the AlertenrichmentV1Beta1s API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type AlertenrichmentV1Beta1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metadata) || (has(self.initProvider) && has(self.initProvider.metadata))",message="spec.forProvider.metadata is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	Spec   AlertenrichmentV1Beta1Spec   `json:"spec"`
	Status AlertenrichmentV1Beta1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlertenrichmentV1Beta1List contains a list of AlertenrichmentV1Beta1s
type AlertenrichmentV1Beta1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlertenrichmentV1Beta1 `json:"items"`
}

// Repository type metadata.
var (
	AlertenrichmentV1Beta1_Kind             = "AlertenrichmentV1Beta1"
	AlertenrichmentV1Beta1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlertenrichmentV1Beta1_Kind}.String()
	AlertenrichmentV1Beta1_KindAPIVersion   = AlertenrichmentV1Beta1_Kind + "." + CRDGroupVersion.String()
	AlertenrichmentV1Beta1_GroupVersionKind = CRDGroupVersion.WithKind(AlertenrichmentV1Beta1_Kind)
)

func init() {
	SchemeBuilder.Register(&AlertenrichmentV1Beta1{}, &AlertenrichmentV1Beta1List{})
}
