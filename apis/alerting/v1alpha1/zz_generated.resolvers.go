/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/grafana/crossplane-provider-grafana/apis/oss/v1alpha1"
	grafana "github.com/grafana/crossplane-provider-grafana/config/grafana"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ContactPoint.
func (mg *ContactPoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MessageTemplate.
func (mg *MessageTemplate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MuteTiming.
func (mg *MuteTiming) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NotificationPolicy.
func (mg *NotificationPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ContactPoint),
		Extract:      grafana.NameExtractor(),
		Reference:    mg.Spec.ForProvider.ContactPointRef,
		Selector:     mg.Spec.ForProvider.ContactPointSelector,
		To: reference.To{
			List:    &ContactPointList{},
			Managed: &ContactPoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContactPoint")
	}
	mg.Spec.ForProvider.ContactPoint = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContactPointRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Policy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Policy[i3].ContactPoint),
			Extract:      grafana.NameExtractor(),
			Reference:    mg.Spec.ForProvider.Policy[i3].ContactPointRef,
			Selector:     mg.Spec.ForProvider.Policy[i3].ContactPointSelector,
			To: reference.To{
				List:    &ContactPointList{},
				Managed: &ContactPoint{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Policy[i3].ContactPoint")
		}
		mg.Spec.ForProvider.Policy[i3].ContactPoint = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Policy[i3].ContactPointRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Policy); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Policy[i3].MuteTimings),
			Extract:       grafana.NameExtractor(),
			References:    mg.Spec.ForProvider.Policy[i3].MuteTimingRef,
			Selector:      mg.Spec.ForProvider.Policy[i3].MuteTimingSelector,
			To: reference.To{
				List:    &MuteTimingList{},
				Managed: &MuteTiming{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Policy[i3].MuteTimings")
		}
		mg.Spec.ForProvider.Policy[i3].MuteTimings = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Policy[i3].MuteTimingRef = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Policy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Policy[i3].Policy); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Policy[i3].Policy[i4].ContactPoint),
				Extract:      grafana.NameExtractor(),
				Reference:    mg.Spec.ForProvider.Policy[i3].Policy[i4].ContactPointRef,
				Selector:     mg.Spec.ForProvider.Policy[i3].Policy[i4].ContactPointSelector,
				To: reference.To{
					List:    &ContactPointList{},
					Managed: &ContactPoint{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Policy[i3].Policy[i4].ContactPoint")
			}
			mg.Spec.ForProvider.Policy[i3].Policy[i4].ContactPoint = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Policy[i3].Policy[i4].ContactPointRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Policy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Policy[i3].Policy); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Policy[i3].Policy[i4].MuteTimings),
				Extract:       grafana.NameExtractor(),
				References:    mg.Spec.ForProvider.Policy[i3].Policy[i4].MuteTimingRef,
				Selector:      mg.Spec.ForProvider.Policy[i3].Policy[i4].MuteTimingSelector,
				To: reference.To{
					List:    &MuteTimingList{},
					Managed: &MuteTiming{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Policy[i3].Policy[i4].MuteTimings")
			}
			mg.Spec.ForProvider.Policy[i3].Policy[i4].MuteTimings = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.Policy[i3].Policy[i4].MuteTimingRef = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Policy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Policy[i3].Policy); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].ContactPoint),
					Extract:      grafana.NameExtractor(),
					Reference:    mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].ContactPointRef,
					Selector:     mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].ContactPointSelector,
					To: reference.To{
						List:    &ContactPointList{},
						Managed: &ContactPoint{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].ContactPoint")
				}
				mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].ContactPoint = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].ContactPointRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Policy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Policy[i3].Policy); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy); i5++ {
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].MuteTimings),
					Extract:       grafana.NameExtractor(),
					References:    mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].MuteTimingRef,
					Selector:      mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].MuteTimingSelector,
					To: reference.To{
						List:    &MuteTimingList{},
						Managed: &MuteTiming{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].MuteTimings")
				}
				mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].MuteTimings = reference.ToPtrValues(mrsp.ResolvedValues)
				mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].MuteTimingRef = mrsp.ResolvedReferences

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Policy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Policy[i3].Policy); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].ContactPoint),
						Extract:      grafana.NameExtractor(),
						Reference:    mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].ContactPointRef,
						Selector:     mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].ContactPointSelector,
						To: reference.To{
							List:    &ContactPointList{},
							Managed: &ContactPoint{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].ContactPoint")
					}
					mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].ContactPoint = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].ContactPointRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Policy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Policy[i3].Policy); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy); i6++ {
					mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
						CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].MuteTimings),
						Extract:       grafana.NameExtractor(),
						References:    mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].MuteTimingRef,
						Selector:      mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].MuteTimingSelector,
						To: reference.To{
							List:    &MuteTimingList{},
							Managed: &MuteTiming{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].MuteTimings")
					}
					mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].MuteTimings = reference.ToPtrValues(mrsp.ResolvedValues)
					mg.Spec.ForProvider.Policy[i3].Policy[i4].Policy[i5].Policy[i6].MuteTimingRef = mrsp.ResolvedReferences

				}
			}
		}
	}

	return nil
}

// ResolveReferences of this RuleGroup.
func (mg *RuleGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderUID),
		Extract:      grafana.UIDExtractor(),
		Reference:    mg.Spec.ForProvider.FolderRef,
		Selector:     mg.Spec.ForProvider.FolderSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderUID")
	}
	mg.Spec.ForProvider.FolderUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}
