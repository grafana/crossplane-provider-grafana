// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PluginInstallationInitParameters struct {

	// Reference to a Stack in cloud to populate stackSlug.
	// +kubebuilder:validation:Optional
	CloudStackRef *v1.Reference `json:"cloudStackRef,omitempty" tf:"-"`

	// Selector for a Stack in cloud to populate stackSlug.
	// +kubebuilder:validation:Optional
	CloudStackSelector *v1.Selector `json:"cloudStackSelector,omitempty" tf:"-"`

	// (String) Slug of the plugin to be installed.
	// Slug of the plugin to be installed.
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// (String) The stack id to which the plugin should be installed.
	// The stack id to which the plugin should be installed.
	// +crossplane:generate:reference:type=github.com/grafana/crossplane-provider-grafana/apis/cloud/v1alpha1.Stack
	// +crossplane:generate:reference:extractor=github.com/grafana/crossplane-provider-grafana/config/grafana.CloudStackSlugExtractor()
	// +crossplane:generate:reference:refFieldName=CloudStackRef
	// +crossplane:generate:reference:selectorFieldName=CloudStackSelector
	StackSlug *string `json:"stackSlug,omitempty" tf:"stack_slug,omitempty"`

	// (String) Version of the plugin to be installed.
	// Version of the plugin to be installed.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PluginInstallationObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Slug of the plugin to be installed.
	// Slug of the plugin to be installed.
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// (String) The stack id to which the plugin should be installed.
	// The stack id to which the plugin should be installed.
	StackSlug *string `json:"stackSlug,omitempty" tf:"stack_slug,omitempty"`

	// (String) Version of the plugin to be installed.
	// Version of the plugin to be installed.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PluginInstallationParameters struct {

	// Reference to a Stack in cloud to populate stackSlug.
	// +kubebuilder:validation:Optional
	CloudStackRef *v1.Reference `json:"cloudStackRef,omitempty" tf:"-"`

	// Selector for a Stack in cloud to populate stackSlug.
	// +kubebuilder:validation:Optional
	CloudStackSelector *v1.Selector `json:"cloudStackSelector,omitempty" tf:"-"`

	// (String) Slug of the plugin to be installed.
	// Slug of the plugin to be installed.
	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// (String) The stack id to which the plugin should be installed.
	// The stack id to which the plugin should be installed.
	// +crossplane:generate:reference:type=github.com/grafana/crossplane-provider-grafana/apis/cloud/v1alpha1.Stack
	// +crossplane:generate:reference:extractor=github.com/grafana/crossplane-provider-grafana/config/grafana.CloudStackSlugExtractor()
	// +crossplane:generate:reference:refFieldName=CloudStackRef
	// +crossplane:generate:reference:selectorFieldName=CloudStackSelector
	// +kubebuilder:validation:Optional
	StackSlug *string `json:"stackSlug,omitempty" tf:"stack_slug,omitempty"`

	// (String) Version of the plugin to be installed.
	// Version of the plugin to be installed.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// PluginInstallationSpec defines the desired state of PluginInstallation
type PluginInstallationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PluginInstallationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PluginInstallationInitParameters `json:"initProvider,omitempty"`
}

// PluginInstallationStatus defines the observed state of PluginInstallation.
type PluginInstallationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PluginInstallationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PluginInstallation is the Schema for the PluginInstallations API. Manages Grafana Cloud Plugin Installations. Plugin Catalog https://grafana.com/grafana/plugins/
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type PluginInstallation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.slug) || (has(self.initProvider) && has(self.initProvider.slug))",message="spec.forProvider.slug is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   PluginInstallationSpec   `json:"spec"`
	Status PluginInstallationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PluginInstallationList contains a list of PluginInstallations
type PluginInstallationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PluginInstallation `json:"items"`
}

// Repository type metadata.
var (
	PluginInstallation_Kind             = "PluginInstallation"
	PluginInstallation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PluginInstallation_Kind}.String()
	PluginInstallation_KindAPIVersion   = PluginInstallation_Kind + "." + CRDGroupVersion.String()
	PluginInstallation_GroupVersionKind = CRDGroupVersion.WithKind(PluginInstallation_Kind)
)

func init() {
	SchemeBuilder.Register(&PluginInstallation{}, &PluginInstallationList{})
}
