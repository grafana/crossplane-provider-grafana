/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StackServiceAccountObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StackServiceAccountParameters struct {

	// Reference to a Stack in cloud to populate stackSlug.
	// +kubebuilder:validation:Optional
	CloudStackRef *v1.Reference `json:"cloudStackRef,omitempty" tf:"-"`

	// Selector for a Stack in cloud to populate stackSlug.
	// +kubebuilder:validation:Optional
	CloudStackSelector *v1.Selector `json:"cloudStackSelector,omitempty" tf:"-"`

	// The disabled status for the service account. Defaults to `false`.
	// +kubebuilder:validation:Optional
	IsDisabled *bool `json:"isDisabled,omitempty" tf:"is_disabled,omitempty"`

	// The name of the service account.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The basic role of the service account in the organization.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// +crossplane:generate:reference:type=github.com/grafana/crossplane-provider-grafana/apis/cloud/v1alpha1.Stack
	// +crossplane:generate:reference:extractor=github.com/grafana/crossplane-provider-grafana/config/grafana.CloudStackSlugExtractor()
	// +crossplane:generate:reference:refFieldName=CloudStackRef
	// +crossplane:generate:reference:selectorFieldName=CloudStackSelector
	// +kubebuilder:validation:Optional
	StackSlug *string `json:"stackSlug,omitempty" tf:"stack_slug,omitempty"`
}

// StackServiceAccountSpec defines the desired state of StackServiceAccount
type StackServiceAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StackServiceAccountParameters `json:"forProvider"`
}

// StackServiceAccountStatus defines the observed state of StackServiceAccount.
type StackServiceAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StackServiceAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StackServiceAccount is the Schema for the StackServiceAccounts API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type StackServiceAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackServiceAccountSpec   `json:"spec"`
	Status            StackServiceAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StackServiceAccountList contains a list of StackServiceAccounts
type StackServiceAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StackServiceAccount `json:"items"`
}

// Repository type metadata.
var (
	StackServiceAccount_Kind             = "StackServiceAccount"
	StackServiceAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StackServiceAccount_Kind}.String()
	StackServiceAccount_KindAPIVersion   = StackServiceAccount_Kind + "." + CRDGroupVersion.String()
	StackServiceAccount_GroupVersionKind = CRDGroupVersion.WithKind(StackServiceAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&StackServiceAccount{}, &StackServiceAccountList{})
}
