/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsCloudwatchScrapeJobInitParameters struct {

	// (String) The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the resource_id attribute of the grafana_cloud_provider_aws_account resource.
	// The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resource_id` attribute of the `grafana_cloud_provider_aws_account` resource.
	AwsAccountResourceID *string `json:"awsAccountResourceId,omitempty" tf:"aws_account_resource_id,omitempty"`

	// (Block List) Zero or more configuration blocks to configure custom namespaces for the CloudWatch Scrape Job to scrape. Each block must have a distinct name attribute. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// Zero or more configuration blocks to configure custom namespaces for the CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	CustomNamespace []CustomNamespaceInitParameters `json:"customNamespace,omitempty" tf:"custom_namespace,omitempty"`

	// (Boolean) Whether the CloudWatch Scrape Job is enabled or not.
	// Whether the CloudWatch Scrape Job is enabled or not.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as aws_<service_name>_info.
	// When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`.
	ExportTags *bool `json:"exportTags,omitempty" tf:"export_tags,omitempty"`

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the CloudWatch Scrape Job.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
	// A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
	// +listType=set
	RegionsSubsetOverride []*string `json:"regionsSubsetOverride,omitempty" tf:"regions_subset_override,omitempty"`

	// (Block List) One or more configuration blocks to configure AWS services for the CloudWatch Scrape Job to scrape. Each block must have a distinct name attribute. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure AWS services for the CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	Service []ServiceInitParameters `json:"service,omitempty" tf:"service,omitempty"`

	// (String) The Stack ID of the Grafana Cloud instance.
	// The Stack ID of the Grafana Cloud instance.
	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`

	// (Map of String) A set of static labels to add to all metrics exported by this scrape job.
	// A set of static labels to add to all metrics exported by this scrape job.
	// +mapType=granular
	StaticLabels map[string]*string `json:"staticLabels,omitempty" tf:"static_labels,omitempty"`
}

type AwsCloudwatchScrapeJobObservation struct {

	// (String) The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the resource_id attribute of the grafana_cloud_provider_aws_account resource.
	// The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resource_id` attribute of the `grafana_cloud_provider_aws_account` resource.
	AwsAccountResourceID *string `json:"awsAccountResourceId,omitempty" tf:"aws_account_resource_id,omitempty"`

	// (Block List) Zero or more configuration blocks to configure custom namespaces for the CloudWatch Scrape Job to scrape. Each block must have a distinct name attribute. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// Zero or more configuration blocks to configure custom namespaces for the CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	CustomNamespace []CustomNamespaceObservation `json:"customNamespace,omitempty" tf:"custom_namespace,omitempty"`

	// (String) When the CloudWatch Scrape Job is disabled, this will show the reason that it is in that state.
	// When the CloudWatch Scrape Job is disabled, this will show the reason that it is in that state.
	DisabledReason *string `json:"disabledReason,omitempty" tf:"disabled_reason,omitempty"`

	// (Boolean) Whether the CloudWatch Scrape Job is enabled or not.
	// Whether the CloudWatch Scrape Job is enabled or not.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as aws_<service_name>_info.
	// When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`.
	ExportTags *bool `json:"exportTags,omitempty" tf:"export_tags,omitempty"`

	// This has the format "{{ stack_id }}:{{ name }}".
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the CloudWatch Scrape Job.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
	// A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
	// +listType=set
	RegionsSubsetOverride []*string `json:"regionsSubsetOverride,omitempty" tf:"regions_subset_override,omitempty"`

	// (Block List) One or more configuration blocks to configure AWS services for the CloudWatch Scrape Job to scrape. Each block must have a distinct name attribute. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure AWS services for the CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	Service []ServiceObservation `json:"service,omitempty" tf:"service,omitempty"`

	// (String) The Stack ID of the Grafana Cloud instance.
	// The Stack ID of the Grafana Cloud instance.
	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`

	// (Map of String) A set of static labels to add to all metrics exported by this scrape job.
	// A set of static labels to add to all metrics exported by this scrape job.
	// +mapType=granular
	StaticLabels map[string]*string `json:"staticLabels,omitempty" tf:"static_labels,omitempty"`
}

type AwsCloudwatchScrapeJobParameters struct {

	// (String) The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the resource_id attribute of the grafana_cloud_provider_aws_account resource.
	// The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resource_id` attribute of the `grafana_cloud_provider_aws_account` resource.
	// +kubebuilder:validation:Optional
	AwsAccountResourceID *string `json:"awsAccountResourceId,omitempty" tf:"aws_account_resource_id,omitempty"`

	// (Block List) Zero or more configuration blocks to configure custom namespaces for the CloudWatch Scrape Job to scrape. Each block must have a distinct name attribute. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// Zero or more configuration blocks to configure custom namespaces for the CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	// +kubebuilder:validation:Optional
	CustomNamespace []CustomNamespaceParameters `json:"customNamespace,omitempty" tf:"custom_namespace,omitempty"`

	// (Boolean) Whether the CloudWatch Scrape Job is enabled or not.
	// Whether the CloudWatch Scrape Job is enabled or not.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as aws_<service_name>_info.
	// When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`.
	// +kubebuilder:validation:Optional
	ExportTags *bool `json:"exportTags,omitempty" tf:"export_tags,omitempty"`

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the CloudWatch Scrape Job.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
	// A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
	// +kubebuilder:validation:Optional
	// +listType=set
	RegionsSubsetOverride []*string `json:"regionsSubsetOverride,omitempty" tf:"regions_subset_override,omitempty"`

	// (Block List) One or more configuration blocks to configure AWS services for the CloudWatch Scrape Job to scrape. Each block must have a distinct name attribute. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure AWS services for the CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	// +kubebuilder:validation:Optional
	Service []ServiceParameters `json:"service,omitempty" tf:"service,omitempty"`

	// (String) The Stack ID of the Grafana Cloud instance.
	// The Stack ID of the Grafana Cloud instance.
	// +kubebuilder:validation:Optional
	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`

	// (Map of String) A set of static labels to add to all metrics exported by this scrape job.
	// A set of static labels to add to all metrics exported by this scrape job.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	StaticLabels map[string]*string `json:"staticLabels,omitempty" tf:"static_labels,omitempty"`
}

type CustomNamespaceInitParameters struct {

	// (Block List) One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
	Metric []MetricInitParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the custom namespace to scrape.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The interval in seconds to scrape the custom namespace.
	// The interval in seconds to scrape the custom namespace.
	ScrapeIntervalSeconds *float64 `json:"scrapeIntervalSeconds,omitempty" tf:"scrape_interval_seconds,omitempty"`
}

type CustomNamespaceObservation struct {

	// (Block List) One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
	Metric []MetricObservation `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the custom namespace to scrape.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The interval in seconds to scrape the custom namespace.
	// The interval in seconds to scrape the custom namespace.
	ScrapeIntervalSeconds *float64 `json:"scrapeIntervalSeconds,omitempty" tf:"scrape_interval_seconds,omitempty"`
}

type CustomNamespaceParameters struct {

	// (Block List) One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
	// +kubebuilder:validation:Optional
	Metric []MetricParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the custom namespace to scrape.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Number) The interval in seconds to scrape the custom namespace.
	// The interval in seconds to scrape the custom namespace.
	// +kubebuilder:validation:Optional
	ScrapeIntervalSeconds *float64 `json:"scrapeIntervalSeconds,omitempty" tf:"scrape_interval_seconds,omitempty"`
}

type MetricInitParameters struct {

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the metric to scrape.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) A set of statistics to scrape.
	// A set of statistics to scrape.
	// +listType=set
	Statistics []*string `json:"statistics,omitempty" tf:"statistics,omitempty"`
}

type MetricObservation struct {

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the metric to scrape.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) A set of statistics to scrape.
	// A set of statistics to scrape.
	// +listType=set
	Statistics []*string `json:"statistics,omitempty" tf:"statistics,omitempty"`
}

type MetricParameters struct {

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the metric to scrape.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) A set of statistics to scrape.
	// A set of statistics to scrape.
	// +kubebuilder:validation:Optional
	// +listType=set
	Statistics []*string `json:"statistics" tf:"statistics,omitempty"`
}

type ResourceDiscoveryTagFilterInitParameters struct {

	// (String) The key of the tag filter.
	// The key of the tag filter.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The value of the tag filter.
	// The value of the tag filter.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ResourceDiscoveryTagFilterObservation struct {

	// (String) The key of the tag filter.
	// The key of the tag filter.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The value of the tag filter.
	// The value of the tag filter.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ResourceDiscoveryTagFilterParameters struct {

	// (String) The key of the tag filter.
	// The key of the tag filter.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The value of the tag filter.
	// The value of the tag filter.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ServiceInitParameters struct {

	// (Block List) One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure metrics and their statistics to scrape. Please note that AWS metric names must be supplied, and not their PromQL counterparts. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
	Metric []ServiceMetricInitParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
	ResourceDiscoveryTagFilter []ResourceDiscoveryTagFilterInitParameters `json:"resourceDiscoveryTagFilter,omitempty" tf:"resource_discovery_tag_filter,omitempty"`

	// (Number) The interval in seconds to scrape the custom namespace.
	// The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
	ScrapeIntervalSeconds *float64 `json:"scrapeIntervalSeconds,omitempty" tf:"scrape_interval_seconds,omitempty"`

	// (Set of String) A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
	// A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
	// +listType=set
	TagsToAddToMetrics []*string `json:"tagsToAddToMetrics,omitempty" tf:"tags_to_add_to_metrics,omitempty"`
}

type ServiceMetricInitParameters struct {

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the metric to scrape.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) A set of statistics to scrape.
	// A set of statistics to scrape.
	// +listType=set
	Statistics []*string `json:"statistics,omitempty" tf:"statistics,omitempty"`
}

type ServiceMetricObservation struct {

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the metric to scrape.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) A set of statistics to scrape.
	// A set of statistics to scrape.
	// +listType=set
	Statistics []*string `json:"statistics,omitempty" tf:"statistics,omitempty"`
}

type ServiceMetricParameters struct {

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the metric to scrape.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) A set of statistics to scrape.
	// A set of statistics to scrape.
	// +kubebuilder:validation:Optional
	// +listType=set
	Statistics []*string `json:"statistics" tf:"statistics,omitempty"`
}

type ServiceObservation struct {

	// (Block List) One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure metrics and their statistics to scrape. Please note that AWS metric names must be supplied, and not their PromQL counterparts. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
	Metric []ServiceMetricObservation `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
	ResourceDiscoveryTagFilter []ResourceDiscoveryTagFilterObservation `json:"resourceDiscoveryTagFilter,omitempty" tf:"resource_discovery_tag_filter,omitempty"`

	// (Number) The interval in seconds to scrape the custom namespace.
	// The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
	ScrapeIntervalSeconds *float64 `json:"scrapeIntervalSeconds,omitempty" tf:"scrape_interval_seconds,omitempty"`

	// (Set of String) A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
	// A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
	// +listType=set
	TagsToAddToMetrics []*string `json:"tagsToAddToMetrics,omitempty" tf:"tags_to_add_to_metrics,omitempty"`
}

type ServiceParameters struct {

	// (Block List) One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure metrics and their statistics to scrape. Please note that AWS metric names must be supplied, and not their PromQL counterparts. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
	// +kubebuilder:validation:Optional
	Metric []ServiceMetricParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the CloudWatch Scrape Job.
	// The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block List) One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects. (see below for nested schema)
	// One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
	// +kubebuilder:validation:Optional
	ResourceDiscoveryTagFilter []ResourceDiscoveryTagFilterParameters `json:"resourceDiscoveryTagFilter,omitempty" tf:"resource_discovery_tag_filter,omitempty"`

	// (Number) The interval in seconds to scrape the custom namespace.
	// The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
	// +kubebuilder:validation:Optional
	ScrapeIntervalSeconds *float64 `json:"scrapeIntervalSeconds,omitempty" tf:"scrape_interval_seconds,omitempty"`

	// (Set of String) A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
	// A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
	// +kubebuilder:validation:Optional
	// +listType=set
	TagsToAddToMetrics []*string `json:"tagsToAddToMetrics,omitempty" tf:"tags_to_add_to_metrics,omitempty"`
}

// AwsCloudwatchScrapeJobSpec defines the desired state of AwsCloudwatchScrapeJob
type AwsCloudwatchScrapeJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AwsCloudwatchScrapeJobParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AwsCloudwatchScrapeJobInitParameters `json:"initProvider,omitempty"`
}

// AwsCloudwatchScrapeJobStatus defines the observed state of AwsCloudwatchScrapeJob.
type AwsCloudwatchScrapeJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AwsCloudwatchScrapeJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AwsCloudwatchScrapeJob is the Schema for the AwsCloudwatchScrapeJobs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type AwsCloudwatchScrapeJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.awsAccountResourceId) || (has(self.initProvider) && has(self.initProvider.awsAccountResourceId))",message="spec.forProvider.awsAccountResourceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.stackId) || (has(self.initProvider) && has(self.initProvider.stackId))",message="spec.forProvider.stackId is a required parameter"
	Spec   AwsCloudwatchScrapeJobSpec   `json:"spec"`
	Status AwsCloudwatchScrapeJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AwsCloudwatchScrapeJobList contains a list of AwsCloudwatchScrapeJobs
type AwsCloudwatchScrapeJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AwsCloudwatchScrapeJob `json:"items"`
}

// Repository type metadata.
var (
	AwsCloudwatchScrapeJob_Kind             = "AwsCloudwatchScrapeJob"
	AwsCloudwatchScrapeJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AwsCloudwatchScrapeJob_Kind}.String()
	AwsCloudwatchScrapeJob_KindAPIVersion   = AwsCloudwatchScrapeJob_Kind + "." + CRDGroupVersion.String()
	AwsCloudwatchScrapeJob_GroupVersionKind = CRDGroupVersion.WithKind(AwsCloudwatchScrapeJob_Kind)
)

func init() {
	SchemeBuilder.Register(&AwsCloudwatchScrapeJob{}, &AwsCloudwatchScrapeJobList{})
}
