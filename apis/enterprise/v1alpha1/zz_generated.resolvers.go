/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/grafana/crossplane-provider-grafana/apis/oss/v1alpha1"
	grafana "github.com/grafana/crossplane-provider-grafana/config/grafana"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this DataSourcePermission.
func (mg *DataSourcePermission) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatasourceUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.ForProvider.DataSourceRef,
		Selector:     mg.Spec.ForProvider.DataSourceSelector,
		To: reference.To{
			List:    &v1alpha1.DataSourceList{},
			Managed: &v1alpha1.DataSource{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatasourceUID")
	}
	mg.Spec.ForProvider.DatasourceUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataSourceRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Permissions[i3].TeamID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Permissions[i3].TeamRef,
			Selector:     mg.Spec.ForProvider.Permissions[i3].TeamSelector,
			To: reference.To{
				List:    &v1alpha1.TeamList{},
				Managed: &v1alpha1.Team{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Permissions[i3].TeamID")
		}
		mg.Spec.ForProvider.Permissions[i3].TeamID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Permissions[i3].TeamRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Permissions[i3].UserID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Permissions[i3].UserRef,
			Selector:     mg.Spec.ForProvider.Permissions[i3].UserSelector,
			To: reference.To{
				List:    &v1alpha1.UserList{},
				Managed: &v1alpha1.User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Permissions[i3].UserID")
		}
		mg.Spec.ForProvider.Permissions[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Permissions[i3].UserRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatasourceUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.InitProvider.DataSourceRef,
		Selector:     mg.Spec.InitProvider.DataSourceSelector,
		To: reference.To{
			List:    &v1alpha1.DataSourceList{},
			Managed: &v1alpha1.DataSource{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatasourceUID")
	}
	mg.Spec.InitProvider.DatasourceUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DataSourceRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Permissions[i3].TeamID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Permissions[i3].TeamRef,
			Selector:     mg.Spec.InitProvider.Permissions[i3].TeamSelector,
			To: reference.To{
				List:    &v1alpha1.TeamList{},
				Managed: &v1alpha1.Team{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Permissions[i3].TeamID")
		}
		mg.Spec.InitProvider.Permissions[i3].TeamID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Permissions[i3].TeamRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Permissions[i3].UserID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Permissions[i3].UserRef,
			Selector:     mg.Spec.InitProvider.Permissions[i3].UserSelector,
			To: reference.To{
				List:    &v1alpha1.UserList{},
				Managed: &v1alpha1.User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Permissions[i3].UserID")
		}
		mg.Spec.InitProvider.Permissions[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Permissions[i3].UserRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DataSourcePermissionItem.
func (mg *DataSourcePermissionItem) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Report.
func (mg *Report) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Role.
func (mg *Role) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RoleAssignment.
func (mg *RoleAssignment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.ForProvider.RoleRef,
		Selector:     mg.Spec.ForProvider.RoleSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleUID")
	}
	mg.Spec.ForProvider.RoleUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ServiceAccounts),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.ServiceAccountRefs,
		Selector:      mg.Spec.ForProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &v1alpha1.ServiceAccountList{},
			Managed: &v1alpha1.ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceAccounts")
	}
	mg.Spec.ForProvider.ServiceAccounts = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ServiceAccountRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Teams),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.TeamRefs,
		Selector:      mg.Spec.ForProvider.TeamSelector,
		To: reference.To{
			List:    &v1alpha1.TeamList{},
			Managed: &v1alpha1.Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Teams")
	}
	mg.Spec.ForProvider.Teams = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.TeamRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromFloatPtrValues(mg.Spec.ForProvider.Users),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.UserRefs,
		Selector:      mg.Spec.ForProvider.UserSelector,
		To: reference.To{
			List:    &v1alpha1.UserList{},
			Managed: &v1alpha1.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Users")
	}
	mg.Spec.ForProvider.Users = reference.ToFloatPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.UserRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleUID),
		Extract:      grafana.OptionalFieldExtractor("uid"),
		Reference:    mg.Spec.InitProvider.RoleRef,
		Selector:     mg.Spec.InitProvider.RoleSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleUID")
	}
	mg.Spec.InitProvider.RoleUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ServiceAccounts),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.ServiceAccountRefs,
		Selector:      mg.Spec.InitProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &v1alpha1.ServiceAccountList{},
			Managed: &v1alpha1.ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceAccounts")
	}
	mg.Spec.InitProvider.ServiceAccounts = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ServiceAccountRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Teams),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.TeamRefs,
		Selector:      mg.Spec.InitProvider.TeamSelector,
		To: reference.To{
			List:    &v1alpha1.TeamList{},
			Managed: &v1alpha1.Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Teams")
	}
	mg.Spec.InitProvider.Teams = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.TeamRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromFloatPtrValues(mg.Spec.InitProvider.Users),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.UserRefs,
		Selector:      mg.Spec.InitProvider.UserSelector,
		To: reference.To{
			List:    &v1alpha1.UserList{},
			Managed: &v1alpha1.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Users")
	}
	mg.Spec.InitProvider.Users = reference.ToFloatPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.UserRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this RoleAssignmentItem.
func (mg *RoleAssignmentItem) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &v1alpha1.OrganizationList{},
			Managed: &v1alpha1.Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TeamExternalGroup.
func (mg *TeamExternalGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TeamID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TeamRef,
		Selector:     mg.Spec.ForProvider.TeamSelector,
		To: reference.To{
			List:    &v1alpha1.TeamList{},
			Managed: &v1alpha1.Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TeamID")
	}
	mg.Spec.ForProvider.TeamID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TeamRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TeamID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.TeamRef,
		Selector:     mg.Spec.InitProvider.TeamSelector,
		To: reference.To{
			List:    &v1alpha1.TeamList{},
			Managed: &v1alpha1.Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TeamID")
	}
	mg.Spec.InitProvider.TeamID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TeamRef = rsp.ResolvedReference

	return nil
}
