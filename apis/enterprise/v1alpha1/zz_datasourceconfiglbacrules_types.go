/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataSourceConfigLbacRulesInitParameters struct {

	// The UID of the datasource.
	DatasourceUID *string `json:"datasourceUid,omitempty" tf:"datasource_uid,omitempty"`

	// JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
	Rules *string `json:"rules,omitempty" tf:"rules,omitempty"`
}

type DataSourceConfigLbacRulesObservation struct {

	// The UID of the datasource.
	DatasourceUID *string `json:"datasourceUid,omitempty" tf:"datasource_uid,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
	Rules *string `json:"rules,omitempty" tf:"rules,omitempty"`
}

type DataSourceConfigLbacRulesParameters struct {

	// The UID of the datasource.
	// +kubebuilder:validation:Optional
	DatasourceUID *string `json:"datasourceUid,omitempty" tf:"datasource_uid,omitempty"`

	// JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
	// +kubebuilder:validation:Optional
	Rules *string `json:"rules,omitempty" tf:"rules,omitempty"`
}

// DataSourceConfigLbacRulesSpec defines the desired state of DataSourceConfigLbacRules
type DataSourceConfigLbacRulesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataSourceConfigLbacRulesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DataSourceConfigLbacRulesInitParameters `json:"initProvider,omitempty"`
}

// DataSourceConfigLbacRulesStatus defines the observed state of DataSourceConfigLbacRules.
type DataSourceConfigLbacRulesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataSourceConfigLbacRulesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DataSourceConfigLbacRules is the Schema for the DataSourceConfigLbacRuless API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafana}
type DataSourceConfigLbacRules struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.datasourceUid) || (has(self.initProvider) && has(self.initProvider.datasourceUid))",message="spec.forProvider.datasourceUid is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	Spec   DataSourceConfigLbacRulesSpec   `json:"spec"`
	Status DataSourceConfigLbacRulesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataSourceConfigLbacRulesList contains a list of DataSourceConfigLbacRuless
type DataSourceConfigLbacRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataSourceConfigLbacRules `json:"items"`
}

// Repository type metadata.
var (
	DataSourceConfigLbacRules_Kind             = "DataSourceConfigLbacRules"
	DataSourceConfigLbacRules_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataSourceConfigLbacRules_Kind}.String()
	DataSourceConfigLbacRules_KindAPIVersion   = DataSourceConfigLbacRules_Kind + "." + CRDGroupVersion.String()
	DataSourceConfigLbacRules_GroupVersionKind = CRDGroupVersion.WithKind(DataSourceConfigLbacRules_Kind)
)

func init() {
	SchemeBuilder.Register(&DataSourceConfigLbacRules{}, &DataSourceConfigLbacRulesList{})
}
