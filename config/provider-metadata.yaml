name: grafana/grafana
resources:
    grafana_annotation:
        subCategory: Grafana OSS
        description: Official documentation https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/annotate-visualizations/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/annotations/
        name: grafana_annotation
        title: grafana_annotation Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "text": "basic text"
                }
        argumentDocs:
            dashboard_id: '(Number, Deprecated) The ID of the dashboard on which to create the annotation. Deprecated: Use dashboard_uid instead.'
            dashboard_uid: (String) The ID of the dashboard on which to create the annotation.
            id: (String) The ID of this resource.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            panel_id: (Number) The ID of the dashboard panel on which to create the annotation.
            tags: (Set of String) The tags to associate with the annotation.
            text: (String) The text to associate with the annotation.
            time: (String) The RFC 3339-formatted time string indicating the annotation's time.
            time_end: (String) The RFC 3339-formatted time string indicating the annotation's end time.
        importStatements: []
    grafana_api_key:
        subCategory: Grafana OSS
        description: 'Manages Grafana API Keys. HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/auth/ !> Deprecated: please use grafana_service_account and grafana_service_account_token instead, see Migrate API keys to Grafana service accounts using Terraform https://grafana.com/docs/grafana/latest/administration/api-keys/#migrate-api-keys-to-grafana-service-accounts-using-terraform for more information.'
        name: grafana_api_key
        title: grafana_api_key Resource - terraform-provider-grafana
        examples:
            - name: foo
              manifest: |-
                {
                  "name": "key_foo",
                  "role": "Viewer"
                }
            - name: bar
              manifest: |-
                {
                  "name": "key_bar",
                  "role": "Admin",
                  "seconds_to_live": 30
                }
        argumentDocs:
            expiration: (String)
            id: (String) The ID of this resource.
            key: (String, Sensitive)
            name: (String)
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            role: (String)
            seconds_to_live: (Number)
        importStatements: []
    grafana_cloud_access_policy:
        subCategory: Cloud
        description: Official documentation https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/API documentation https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#create-an-access-policy
        name: grafana_cloud_access_policy
        title: grafana_cloud_access_policy Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "display_name": "My Policy",
                  "name": "my-policy",
                  "realm": [
                    {
                      "identifier": "${data.grafana_cloud_organization.current.id}",
                      "label_policy": [
                        {
                          "selector": "{namespace=\"default\"}"
                        }
                      ],
                      "type": "org"
                    }
                  ],
                  "region": "us",
                  "scopes": [
                    "metrics:read",
                    "logs:read"
                  ]
                }
              references:
                realm.identifier: data.grafana_cloud_organization.current.id
              dependencies:
                grafana_cloud_access_policy_token.test: |-
                    {
                      "access_policy_id": "${grafana_cloud_access_policy.test.policy_id}",
                      "display_name": "My Policy Token",
                      "expires_at": "2023-01-01T00:00:00Z",
                      "name": "my-policy-token",
                      "region": "us"
                    }
        argumentDocs:
            created_at: (String) Creation date of the access policy.
            display_name: (String) Display name of the access policy. Defaults to the name.
            id: (String) The ID of this resource.
            identifier: (String) The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
            label_policy: (Block Set) (see below for nested schema)
            name: (String) Name of the access policy.
            policy_id: (String) ID of the access policy.
            realm: '(Block Set, Min: 1) (see below for nested schema)'
            region: '(String) Region where the API is deployed. Generally where the stack is deployed. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.'
            scopes: (Set of String) Scopes of the access policy. See https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/#scopes for possible values.
            selector: (String) The label selector to match in metrics or logs query. Should be in PromQL or LogQL format.
            type: (String) Whether a policy applies to a Cloud org or a specific stack. Should be one of org or stack.
            updated_at: (String) Last update date of the access policy.
        importStatements:
            - terraform import grafana_cloud_access_policy.policyname {{region}}/{{policy_id}}
    grafana_cloud_access_policy_token:
        subCategory: Cloud
        description: Official documentation https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/API documentation https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#create-a-token
        name: grafana_cloud_access_policy_token
        title: grafana_cloud_access_policy_token Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "access_policy_id": "${grafana_cloud_access_policy.test.policy_id}",
                  "display_name": "My Policy Token",
                  "expires_at": "2023-01-01T00:00:00Z",
                  "name": "my-policy-token",
                  "region": "us"
                }
              references:
                access_policy_id: grafana_cloud_access_policy.test.policy_id
              dependencies:
                grafana_cloud_access_policy.test: |-
                    {
                      "display_name": "My Policy",
                      "name": "my-policy",
                      "realm": [
                        {
                          "identifier": "${data.grafana_cloud_organization.current.id}",
                          "label_policy": [
                            {
                              "selector": "{namespace=\"default\"}"
                            }
                          ],
                          "type": "org"
                        }
                      ],
                      "region": "us",
                      "scopes": [
                        "metrics:read",
                        "logs:read"
                      ]
                    }
        argumentDocs:
            access_policy_id: (String) ID of the access policy for which to create a token.
            created_at: (String) Creation date of the access policy token.
            display_name: (String) Display name of the access policy token. Defaults to the name.
            expires_at: (String) Expiration date of the access policy token. Does not expire by default.
            id: (String) The ID of this resource.
            name: (String) Name of the access policy token.
            region: '(String) Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.'
            token: (String, Sensitive)
            updated_at: (String) Last update date of the access policy token.
        importStatements: []
    grafana_cloud_api_key:
        subCategory: Cloud
        description: Manages a single API key on the Grafana Cloud portal (on the organization level)
        name: grafana_cloud_api_key
        title: grafana_cloud_api_key Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "cloud_org_slug": "myorg",
                  "name": "my-key",
                  "role": "Admin"
                }
        argumentDocs:
            cloud_org_slug: (String) The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.
            id: (String) The ID of this resource.
            key: (String, Sensitive) The generated API key.
            name: (String) Name of the API key.
            role: (String) Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See https://grafana.com/docs/grafana-cloud/api/#create-api-key for details.
        importStatements:
            - terraform import grafana_cloud_api_key.resource_name "{{org-name}}-{{api_key_name}}"
    grafana_cloud_plugin_installation:
        subCategory: Cloud
        description: Manages Grafana Cloud Plugin Installations. Plugin Catalog https://grafana.com/grafana/plugins/
        name: grafana_cloud_plugin_installation
        title: grafana_cloud_plugin_installation Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "slug": "some-plugin",
                  "stack_slug": "stackname",
                  "version": "1.2.3"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            slug: (String) Slug of the plugin to be installed.
            stack_slug: (String) The stack id to which the plugin should be installed.
            version: (String) Version of the plugin to be installed.
        importStatements:
            - terraform import grafana_cloud_plugin_installation.plugin_name {{stack_slug}}_{{plugin_slug}}
    grafana_cloud_stack:
        subCategory: Cloud
        description: Official documentation https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#stacks/
        name: grafana_cloud_stack
        title: grafana_cloud_stack Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "description": "Test Grafana Cloud Stack",
                  "name": "gcloudstacktest",
                  "region_slug": "eu",
                  "slug": "gcloudstacktest"
                }
        argumentDocs:
            alertmanager_name: (String) Name of the Alertmanager instance configured for this stack.
            alertmanager_status: (String) Status of the Alertmanager instance configured for this stack.
            alertmanager_url: (String) Base URL of the Alertmanager instance configured for this stack.
            alertmanager_user_id: (Number) User ID of the Alertmanager instance configured for this stack.
            description: (String) Description of stack.
            graphite_name: (String)
            graphite_status: (String)
            graphite_url: (String)
            graphite_user_id: (Number)
            id: (String) The stack id assigned to this stack by Grafana.
            logs_name: (String)
            logs_status: (String)
            logs_url: (String)
            logs_user_id: (Number)
            name: (String) Name of stack. Conventionally matches the url of the instance (e.g. “<stack_slug>.grafana.net”).
            org_id: (Number) Organization id to assign to this stack.
            org_name: (String) Organization name to assign to this stack.
            org_slug: (String) Organization slug to assign to this stack.
            prometheus_name: (String) Prometheus name for this instance.
            prometheus_remote_endpoint: (String) Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
            prometheus_remote_write_endpoint: (String) Use this URL to send prometheus metrics to Grafana cloud
            prometheus_status: (String) Prometheus status for this instance.
            prometheus_url: (String) Prometheus url for this instance.
            prometheus_user_id: (Number) Prometheus user ID. Used for e.g. remote_write.
            region_slug: '(String) Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.'
            slug: |-
                (String) Subdomain that the Grafana instance will be available at (i.e. setting slug to “<stack_slug>” will make the instance
                available at “https://<stack_slug>.grafana.net".
            status: (String) Status of the stack.
            traces_name: (String)
            traces_status: (String)
            traces_url: (String) Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append /tempo to the URL.
            traces_user_id: (Number)
            url: (String) Custom URL for the Grafana instance. Must have a CNAME setup to point to .grafana.net before creating the stack
            wait_for_readiness: (Boolean) Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to true.
            wait_for_readiness_timeout: (String) How long to wait for readiness (if enabled). Defaults to 5m0s.
        importStatements:
            - |-
              terraform import grafana_cloud_stack.stack_name {{stack_id}} // import by numerical ID
              terraform import grafana_cloud_stack.stack_name {{stack_slug}} // or import by slug
    grafana_cloud_stack_api_key Resource - terraform-provider-grafana:
        subCategory: Cloud
        description: 'Manages API keys of a Grafana Cloud stack using the Cloud API This can be used to bootstrap a management API key for a new stack HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/auth/ !> Deprecated: please use grafana_cloud_stack_service_account and grafana_cloud_stack_service_account_token instead, see https://grafana.com/docs/grafana/next/administration/api-keys/#migrate-api-keys-to-grafana-service-accounts-using-terraform.'
        name: grafana_cloud_stack_api_key Resource - terraform-provider-grafana
        title: grafana_cloud_stack_api_key Resource - terraform-provider-grafana
        argumentDocs:
            expiration: (String)
            id: (String) The ID of this resource.
            key: (String, Sensitive)
            name: (String)
            role: (String)
            seconds_to_live: (Number)
            stack_slug: (String)
        importStatements: []
    grafana_cloud_stack_service_account:
        subCategory: Cloud
        description: 'Note: This resource is available only with Grafana 9.1+. Manages service accounts of a Grafana Cloud stack using the Cloud API This can be used to bootstrap a management service account for a new stack Official documentation https://grafana.com/docs/grafana/latest/administration/service-accounts/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api'
        name: grafana_cloud_stack_service_account
        title: grafana_cloud_stack_service_account Resource - terraform-provider-grafana
        examples:
            - name: cloud_sa
              manifest: |-
                {
                  "is_disabled": false,
                  "name": "cloud service account",
                  "role": "Admin",
                  "stack_slug": "\u003cyour stack slug\u003e"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            is_disabled: (Boolean) The disabled status for the service account. Defaults to false.
            name: (String) The name of the service account.
            role: (String) The basic role of the service account in the organization.
            stack_slug: (String)
        importStatements: []
    grafana_cloud_stack_service_account_token:
        subCategory: Cloud
        description: 'Note: This resource is available only with Grafana 9.1+. Manages service account tokens of a Grafana Cloud stack using the Cloud API This can be used to bootstrap a management service account token for a new stack Official documentation https://grafana.com/docs/grafana/latest/administration/service-accounts/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api'
        name: grafana_cloud_stack_service_account_token
        title: grafana_cloud_stack_service_account_token Resource - terraform-provider-grafana
        examples:
            - name: foo
              manifest: |-
                {
                  "name": "key_foo",
                  "service_account_id": "${grafana_cloud_stack_service_account.cloud_sa.id}"
                }
              references:
                service_account_id: grafana_cloud_stack_service_account.cloud_sa.id
              dependencies:
                grafana_cloud_stack_service_account.cloud_sa: |-
                    {
                      "is_disabled": false,
                      "name": "cloud service account",
                      "role": "Admin",
                      "stack_slug": "\u003cyour stack slug\u003e"
                    }
        argumentDocs:
            expiration: (String)
            has_expired: (Boolean)
            id: (String) The ID of this resource.
            key: (String, Sensitive)
            name: (String)
            seconds_to_live: (Number)
            service_account_id: (String)
            stack_slug: (String)
        importStatements: []
    grafana_contact_point:
        subCategory: Alerting
        description: Manages Grafana Alerting contact points. Official documentation https://grafana.com/docs/grafana/next/alerting/fundamentals/contact-points/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/alerting_provisioning/#contact-points This resource requires Grafana 9.1.0 or later.
        name: grafana_contact_point
        title: grafana_contact_point Resource - terraform-provider-grafana
        examples:
            - name: my_contact_point
              manifest: |-
                {
                  "email": [
                    {
                      "addresses": [
                        "one@company.org",
                        "two@company.org"
                      ],
                      "disable_resolve_message": false,
                      "message": "{{ len .Alerts.Firing }} firing.",
                      "single_email": true,
                      "subject": "{{ template \"default.title\" .}}"
                    }
                  ],
                  "name": "My Contact Point"
                }
        argumentDocs:
            access_key: (String, Sensitive) AWS access key ID used to authenticate with Amazon SNS.
            addresses: (List of String) The addresses to send emails to.
            agent_id: (String) Agent ID added to the request payload when using APIAPP.
            alertmanager: (Block Set) A contact point that sends notifications to other Alertmanager instances. (see below for nested schema)
            api_key: (String, Sensitive) The OpsGenie API key to use.
            api_secret: (String, Sensitive) The Threema API key.
            api_token: (String, Sensitive) The Pushover API token.
            api_url: (String) The URL to send webhook requests to.
            api_version: '(String) The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3. Defaults to v2.'
            assume_role_arn: (String) The Amazon Resource Name (ARN) of the role to assume to send notifications to Amazon SNS.
            auth_provider: (String) The authentication provider to use. Valid values are default, arn and keys. Default is default. Defaults to default.
            authorization_credentials: (String, Sensitive) Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
            authorization_scheme: (String) Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
            auto_close: (Boolean) Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
            avatar_url: (String) The URL of a custom avatar image to use. Defaults to ``.
            basic_auth_password: (String, Sensitive) The password component of the basic auth credentials to use.
            basic_auth_user: (String) The username component of the basic auth credentials to use.
            body: (String)
            chat_id: (String) The chat ID to send messages to.
            check: (String) The SensuGo check to which the event should be routed.
            class: (String) The class or type of event, for example ping failure.
            client: (String) The name of the monitoring client that is triggering this event.
            client_url: (String) The URL of the monitoring client that is triggering this event.
            cluster_id: (String) The Id of cluster to use when contacting the Kafka REST Server. Required api_version to be 'v3'
            component: (String) The component being affected by the event.
            corp_id: (String) Corp ID used to get token when using APIAPP.
            description: (String) The templated description of the Kafka message.
            details: (String) The templated details to include with the message.
            device: (String) Comma-separated list of devices to which the event is associated.
            dingding: (Block Set) A contact point that sends notifications to DingDing. (see below for nested schema)
            disable_notifications: (Boolean) When set users will receive a notification with no sound.
            disable_resolve_message: (Boolean) Whether to disable sending resolve messages. Defaults to false.
            disable_web_page_preview: (Boolean) When set it disables link previews for links in the message.
            discord: (Block Set) A contact point that sends notifications as Discord messages (see below for nested schema)
            email: (Block Set) A contact point that sends notifications to an email address. (see below for nested schema)
            endpoint_url: (String) Use this to override the Slack API endpoint URL to send requests to.
            entity: (String) The entity being monitored.
            expire: (Number) How many seconds for which the notification will continue to be retried by Pushover.
            external_id: (String) The external ID to use when assuming the role.
            gateway_id: (String) The Threema gateway ID.
            googlechat: (Block Set) A contact point that sends notifications to Google Chat. (see below for nested schema)
            group: (String) The group to which the provided component belongs to.
            handler: (String) A custom handler to execute in addition to the check.
            http_method: (String) The HTTP method to use in the request. Defaults to POST.
            icon_emoji: (String) The name of a Slack workspace emoji to use as the bot icon.
            icon_url: (String) A URL of an image to use as the bot icon.
            id: (String) The ID of this resource.
            integration_key: (String, Sensitive) The PagerDuty API key.
            kafka: (Block Set) A contact point that publishes notifications to Apache Kafka topics. (see below for nested schema)
            line: (Block Set) A contact point that sends notifications to LINE.me. (see below for nested schema)
            max_alerts: (Number) The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
            mention_channel: (String) Describes how to ping the slack channel that messages are being sent to. Options are here for an @here ping, channel for @channel, or empty for no ping.
            mention_groups: (String) Comma-separated list of groups to mention in the message.
            mention_users: (String) Comma-separated list of users to mention in the message.
            message: (String) The templated content of the message.
            message_format: (String) The format of the message to send. Valid values are text, body and json. Default is text. Defaults to text.
            message_type: (String) The format of message to send - either 'link' or 'actionCard'
            msg_type: '(String) The type of them message. Supported: markdown, text. Default: text.'
            name: (String) The name of the contact point.
            namespace: (String) The namespace in which the check resides.
            ok_priority: (Number) The priority level of the resolved event.
            ok_sound: (String) The sound associated with the resolved notification.
            oncall: (Block Set) A contact point that sends notifications to Grafana On-Call. (see below for nested schema)
            opsgenie: (Block Set) A contact point that sends notifications to OpsGenie. (see below for nested schema)
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            override_priority: (Boolean) Whether to allow the alert priority to be configured via the value of the og_priority annotation on the alert.
            pagerduty: (Block Set) A contact point that sends notifications to PagerDuty. (see below for nested schema)
            parse_mode: '(String) Mode for parsing entities in the message text. Supported: None, Markdown, MarkdownV2, and HTML. HTML is the default.'
            password: (String, Sensitive) The password to use when making a call to the Kafka REST Proxy
            priority: (Number) The priority level of the event.
            protect_content: (Boolean) When set it protects the contents of the message from forwarding and saving.
            pushover: (Block Set) A contact point that sends notifications to Pushover. (see below for nested schema)
            recipient: (String) Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
            recipient_id: (String) The ID of the recipient of the message.
            responders: (Block List) Teams, users, escalations and schedules that the alert will be routed to send notifications. If the API Key belongs to a team integration, this field will be overwritten with the owner team. This feature is available from Grafana 10.3+. (see below for nested schema)
            rest_proxy_url: (String, Sensitive) The URL of the Kafka REST proxy to send requests to.
            retry: (Number) How often, in seconds, the Pushover servers will send the same notification to the user.
            room_id: (String) ID of the Webex Teams room where to send the messages.
            secret: (String, Sensitive) The secret key required to obtain access token when using APIAPP. See https://work.weixin.qq.com/wework_admin/frame#apps to create APIAPP.
            secret_key: (String, Sensitive) AWS secret access key used to authenticate with Amazon SNS.
            section_title: (String) The templated subtitle for each message section.
            send_tags_as: (String) Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are tags, details, both, or empty to use the default behavior of Tags.
            sensugo: (Block Set) A contact point that sends notifications to SensuGo. (see below for nested schema)
            settings: (Map of String, Sensitive) Additional custom properties to attach to the notifier. Defaults to map[].
            severity: (String) The PagerDuty event severity level. Default is critical.
            single_email: (Boolean) Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to false.
            slack: (Block Set) A contact point that sends notifications to Slack. (see below for nested schema)
            sns: (Block Set) A contact point that sends notifications to Amazon SNS. Requires Amazon Managed Grafana. (see below for nested schema)
            sound: (String) The sound associated with the notification.
            source: (String) The unique location of the affected system.
            subject: (String) The templated subject line of the email. Defaults to ``.
            summary: (String) The templated summary message of the event.
            teams: (Block Set) A contact point that sends notifications to Microsoft Teams. (see below for nested schema)
            telegram: (Block Set) A contact point that sends notifications to Telegram. (see below for nested schema)
            text: (String) Templated content of the message.
            threema: (Block Set) A contact point that sends notifications to Threema. (see below for nested schema)
            title: (String) The templated title of the message.
            to_user: '(String) The ID of user that should receive the message. Multiple entries should be separated by ''|''. Default: @all.'
            token: (String, Sensitive) The bearer token used to authorize the client.
            topic: (String) The name of the Kafka topic to publish to.
            type: '(String) Type of the responder. Supported: team, teams, user, escalation, schedule or a template that is expanded to one of these values.'
            uid: (String) The UID of the contact point.
            upload_image: (Boolean) Whether to send images in the notification or not. Default is true. Requires Grafana to be configured to send images in notifications.
            url: (String) The URL of the Alertmanager instance.
            use_discord_username: (Boolean) Whether to use the bot account's plain username instead of "Grafana." Defaults to false.
            user_key: (String, Sensitive) The Pushover user key.
            username: (String) The user name to use when making a call to the Kafka REST Proxy
            victorops: (Block Set) A contact point that sends notifications to VictorOps (now known as Splunk OnCall). (see below for nested schema)
            webex: (Block Set) A contact point that sends notifications to Cisco Webex. (see below for nested schema)
            webhook: '(Block Set) A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config (see below for nested schema)'
            wecom: (Block Set) A contact point that sends notifications to WeCom. (see below for nested schema)
        importStatements:
            - terraform import grafana_contact_point.contact_point_name {{contact_point_name}}
    grafana_dashboard:
        subCategory: Grafana OSS
        description: Manages Grafana dashboards. Official documentation https://grafana.com/docs/grafana/latest/dashboards/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/
        name: grafana_dashboard
        title: grafana_dashboard Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "config_json": "${jsonencode({\n    \"title\" : \"My Dashboard\",\n    \"uid\" : \"my-dashboard-uid\"\n  })}",
                  "folder": "${grafana_folder.test.uid}"
                }
              references:
                folder: grafana_folder.test.uid
              dependencies:
                grafana_folder.test: |-
                    {
                      "title": "My Folder",
                      "uid": "my-folder-uid"
                    }
        argumentDocs:
            config_json: (String) The complete dashboard model JSON.
            dashboard_id: (Number) The numeric ID of the dashboard computed by Grafana.
            folder: (String) The id or UID of the folder to save the dashboard in.
            id: (String) The ID of this resource.
            message: (String) Set a commit message for the version history.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            overwrite: (Boolean) Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
            uid: (String) The unique identifier of a dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.
            url: (String) The full URL of the dashboard.
            version: (Number) Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.
        importStatements:
            - |-
              terraform import grafana_dashboard.dashboard_name {{dashboard_uid}} # To use the default provider org
              terraform import grafana_dashboard.dashboard_name {{org_id}}:{{dashboard_uid}} # When "org_id" is set on the resource
    grafana_dashboard_permission:
        subCategory: Grafana OSS
        description: Manages the entire set of permissions for a dashboard. Permissions that aren't specified when applying this resource will be removed.
        name: grafana_dashboard_permission
        title: grafana_dashboard_permission Resource - terraform-provider-grafana
        examples:
            - name: collectionPermission
              manifest: |-
                {
                  "dashboard_uid": "${grafana_dashboard.metrics.uid}",
                  "permissions": [
                    {
                      "permission": "Edit",
                      "role": "Editor"
                    },
                    {
                      "permission": "View",
                      "team_id": "${grafana_team.team.id}"
                    },
                    {
                      "permission": "Admin",
                      "user_id": "${grafana_user.user.id}"
                    }
                  ]
                }
              references:
                dashboard_uid: grafana_dashboard.metrics.uid
                permissions.team_id: grafana_team.team.id
                permissions.user_id: grafana_user.user.id
              dependencies:
                grafana_dashboard.metrics: |-
                    {
                      "config_json": "${jsonencode({\n    \"title\" : \"My Dashboard\",\n    \"uid\" : \"my-dashboard-uid\"\n  })}"
                    }
                grafana_team.team: |-
                    {
                      "name": "Team Name"
                    }
                grafana_user.user: |-
                    {
                      "email": "user.name@example.com",
                      "login": "user.name",
                      "password": "my-password"
                    }
        argumentDocs:
            dashboard_id: '(Number, Deprecated) ID of the dashboard to apply permissions to. Deprecated: use dashboard_uid instead.'
            dashboard_uid: (String) UID of the dashboard to apply permissions to.
            id: (String) The ID of this resource.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            permission: (String) Permission to associate with item. Must be one of View, Edit, or Admin.
            permissions: (Block Set) The permission items to add/update. Items that are omitted from the list will be removed. (see below for nested schema)
            role: (String) Manage permissions for Viewer or Editor roles.
            team_id: (String) ID of the team to manage permissions for. Defaults to 0.
            user_id: (String) ID of the user or service account to manage permissions for. Defaults to 0.
        importStatements:
            - terraform import grafana_dashboard_permission.dashboard_name {{dashboard_uid}}
    grafana_dashboard_public:
        subCategory: Grafana OSS
        description: 'Manages Grafana public dashboards. Note: This resource is available only with Grafana 10.2+. Official documentation https://grafana.com/docs/grafana/latest/dashboards/dashboard-public/HTTP API https://grafana.com/docs/grafana/next/developers/http_api/dashboard_public/'
        name: grafana_dashboard_public
        title: grafana_dashboard_public Resource - terraform-provider-grafana
        examples:
            - name: my_public_dashboard
              manifest: |-
                {
                  "access_token": "e99e4275da6f410d83760eefa934d8d2",
                  "annotations_enabled": true,
                  "dashboard_uid": "${grafana_dashboard.test_dash.uid}",
                  "is_enabled": true,
                  "org_id": "${grafana_organization.my_org.org_id}",
                  "share": "public",
                  "time_selection_enabled": true,
                  "uid": "my-custom-public-uid"
                }
              references:
                dashboard_uid: grafana_dashboard.test_dash.uid
                org_id: grafana_organization.my_org.org_id
              dependencies:
                grafana_dashboard.test_dash: |-
                    {
                      "config_json": "${jsonencode({\n    \"title\" : \"My Terraform Dashboard\",\n    \"uid\" : \"my-dashboard-uid\"\n  })}",
                      "folder": "${grafana_folder.my_folder.id}",
                      "org_id": "${grafana_organization.my_org.org_id}"
                    }
                grafana_dashboard.test_dash2: |-
                    {
                      "config_json": "${jsonencode({\n    \"title\" : \"My Terraform Dashboard2\",\n    \"uid\" : \"my-dashboard-uid2\"\n  })}",
                      "org_id": "${grafana_organization.my_org2.org_id}"
                    }
                grafana_folder.my_folder: |-
                    {
                      "org_id": "${grafana_organization.my_org.org_id}",
                      "title": "test Folder"
                    }
                grafana_organization.my_org: |-
                    {
                      "name": "test 1"
                    }
                grafana_organization.my_org2: |-
                    {
                      "name": "test 2"
                    }
            - name: my_public_dashboard2
              manifest: |-
                {
                  "dashboard_uid": "${grafana_dashboard.test_dash2.uid}",
                  "org_id": "${grafana_organization.my_org2.org_id}",
                  "share": "public"
                }
              references:
                dashboard_uid: grafana_dashboard.test_dash2.uid
                org_id: grafana_organization.my_org2.org_id
              dependencies:
                grafana_dashboard.test_dash: |-
                    {
                      "config_json": "${jsonencode({\n    \"title\" : \"My Terraform Dashboard\",\n    \"uid\" : \"my-dashboard-uid\"\n  })}",
                      "folder": "${grafana_folder.my_folder.id}",
                      "org_id": "${grafana_organization.my_org.org_id}"
                    }
                grafana_dashboard.test_dash2: |-
                    {
                      "config_json": "${jsonencode({\n    \"title\" : \"My Terraform Dashboard2\",\n    \"uid\" : \"my-dashboard-uid2\"\n  })}",
                      "org_id": "${grafana_organization.my_org2.org_id}"
                    }
                grafana_folder.my_folder: |-
                    {
                      "org_id": "${grafana_organization.my_org.org_id}",
                      "title": "test Folder"
                    }
                grafana_organization.my_org: |-
                    {
                      "name": "test 1"
                    }
                grafana_organization.my_org2: |-
                    {
                      "name": "test 2"
                    }
        argumentDocs:
            access_token: (String) A public unique identifier of a public dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a public dashboard.
            annotations_enabled: (Boolean) Set to true to show annotations. The default value is false.
            dashboard_uid: (String) The unique identifier of the original dashboard.
            id: (String) The ID of this resource.
            is_enabled: (Boolean) Set to true to enable the public dashboard. The default value is false.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            share: (String) Set the share mode. The default value is public.
            time_selection_enabled: (Boolean) Set to true to enable the time picker in the public dashboard. The default value is false.
            uid: (String) The unique identifier of a public dashboard. It's automatically generated if not provided when creating a public dashboard.
        importStatements:
            - |-
              terraform import grafana_dashboard_public.dashboard_name {{dashboard_uid}}:{{public_dashboard_uid}} # To use the default provider org
              terraform import grafana_dashboard_public.dashboard_name {org_id}}:{{dashboard_uid}}:{{public_dashboard_uid}} # When "org_id" is set on the resource
    grafana_data_source:
        subCategory: Grafana OSS
        description: Official documentation https://grafana.com/docs/grafana/latest/datasources/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/data_source/ The required arguments for this resource vary depending on the type of data source selected (via the 'type' argument).
        name: grafana_data_source
        title: grafana_data_source Resource - terraform-provider-grafana
        examples:
            - name: arbitrary-data
              manifest: |-
                {
                  "json_data_encoded": "${jsonencode({\n    \"tokenUri\"           = \"https://oauth2.googleapis.com/token\"\n    \"authenticationType\" = \"jwt\"\n    \"defaultProject\"     = \"default-project\"\n    \"clientEmail\"        = \"client-email@default-project.iam.gserviceaccount.com\"\n  })}",
                  "name": "sd-arbitrary-data",
                  "secure_json_data_encoded": "${jsonencode({\n    \"privateKey\" = \"-----BEGIN PRIVATE KEY-----\\nprivate-key\\n-----END PRIVATE KEY-----\\n\"\n  })}",
                  "type": "stackdriver"
                }
            - name: influxdb
              manifest: |-
                {
                  "basic_auth_enabled": true,
                  "basic_auth_username": "username",
                  "database_name": "dbname",
                  "json_data_encoded": "${jsonencode({\n    authType          = \"default\"\n    basicAuthPassword = \"mypassword\"\n  })}",
                  "name": "myapp-metrics",
                  "type": "influxdb",
                  "url": "http://influxdb.example.net:8086/"
                }
            - name: cloudwatch
              manifest: |-
                {
                  "json_data_encoded": "${jsonencode({\n    defaultRegion = \"us-east-1\"\n    authType      = \"keys\"\n  })}",
                  "name": "cw-example",
                  "secure_json_data_encoded": "${jsonencode({\n    accessKey = \"123\"\n    secretKey = \"456\"\n  })}",
                  "type": "cloudwatch"
                }
            - name: prometheus
              manifest: |-
                {
                  "basic_auth_enabled": true,
                  "basic_auth_username": "username",
                  "json_data_encoded": "${jsonencode({\n    httpMethod        = \"POST\"\n    prometheusType    = \"Mimir\"\n    prometheusVersion = \"2.4.0\"\n  })}",
                  "name": "mimir",
                  "secure_json_data_encoded": "${jsonencode({\n    basicAuthPassword = \"password\"\n  })}",
                  "type": "prometheus",
                  "url": "https://my-instances.com"
                }
        argumentDocs:
            access_mode: '(String) The method by which Grafana will access the data source: proxy or direct. Defaults to proxy.'
            basic_auth_enabled: (Boolean) Whether to enable basic auth for the data source. Defaults to false.
            basic_auth_username: (String) Basic auth username. Defaults to ``.
            database_name: (String) (Required by some data source types) The name of the database to use on the selected data source server. Defaults to ``.
            http_headers: (Map of String, Sensitive) Custom HTTP headers
            id: (String) The ID of this resource.
            is_default: (Boolean) Whether to set the data source as default. This should only be true to a single data source. Defaults to false.
            json_data_encoded: (String) Serialized JSON string containing the json data. This attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
            name: (String) A unique name for the data source.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            secure_json_data_encoded: (String, Sensitive) Serialized JSON string containing the secure json data. This attribute can be used to pass secure configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
            type: (String) The data source type. Must be one of the supported data source keywords.
            uid: (String) Unique identifier. If unset, this will be automatically generated.
            url: (String) The URL for the data source. The type of URL required varies depending on the chosen data source type.
            username: (String) (Required by some data source types) The username to use to authenticate to the data source. Defaults to ``.
        importStatements:
            - |-
              terraform import grafana_data_source.by_integer_id {{datasource_id}} # To use the default provider org
              terraform import grafana_data_source.by_uid {{datasource_uid}} # To use the default provider org

              terraform import grafana_data_source.by_integer_id {{org_id}}:{{datasource_id}} # When "org_id" is set on the resource
              terraform import grafana_data_source.by_uid {{org_id}}:{{datasource_uid}} # When "org_id" is set on the resource
    grafana_data_source_permission:
        subCategory: Grafana Enterprise
        description: Manages the entire set of permissions for a datasource. Permissions that aren't specified when applying this resource will be removed.
        name: grafana_data_source_permission
        title: grafana_data_source_permission Resource - terraform-provider-grafana
        examples:
            - name: fooPermissions
              manifest: |-
                {
                  "datasource_id": "${grafana_data_source.foo.id}",
                  "permissions": [
                    {
                      "permission": "Edit",
                      "team_id": "${grafana_team.team.id}"
                    },
                    {
                      "permission": "Edit",
                      "user_id": "${grafana_user.user.id}"
                    },
                    {
                      "built_in_role": "Viewer",
                      "permission": "Query"
                    },
                    {
                      "permission": "Query",
                      "user_id": "${grafana_service_account.sa.id}"
                    }
                  ]
                }
              references:
                datasource_id: grafana_data_source.foo.id
                permissions.team_id: grafana_team.team.id
                permissions.user_id: grafana_service_account.sa.id
              dependencies:
                grafana_data_source.foo: |-
                    {
                      "json_data_encoded": "${jsonencode({\n    defaultRegion = \"us-east-1\"\n    authType      = \"keys\"\n  })}",
                      "name": "cw-example",
                      "secure_json_data_encoded": "${jsonencode({\n    accessKey = \"123\"\n    secretKey = \"456\"\n  })}",
                      "type": "cloudwatch"
                    }
                grafana_service_account.sa: |-
                    {
                      "name": "test-ds-permissions",
                      "role": "Viewer"
                    }
                grafana_team.team: |-
                    {
                      "name": "Team Name"
                    }
                grafana_user.user: |-
                    {
                      "email": "test-ds-permissions@example.com",
                      "login": "test-ds-permissions",
                      "name": "test-ds-permissions",
                      "password": "hunter2"
                    }
        argumentDocs:
            built_in_role: '(String) Name of the basic role to manage permissions for. Options: Viewer, Editor or Admin. Can only be set from Grafana v9.2.3+. Defaults to ``.'
            datasource_id: (String) ID of the datasource to apply permissions to.
            id: (String) The ID of this resource.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            permission: '(String) Permission to associate with item. Options: Query, Edit or Admin (Admin can only be used with Grafana v10.3.0+).'
            permissions: (Block Set) The permission items to add/update. Items that are omitted from the list will be removed. (see below for nested schema)
            team_id: (String) ID of the team to manage permissions for. Defaults to 0.
            user_id: (String) ID of the user or service account to manage permissions for. Defaults to 0.
        importStatements: []
    grafana_folder:
        subCategory: Grafana OSS
        description: Official documentation https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/folder/
        name: grafana_folder
        title: grafana_folder Resource - terraform-provider-grafana
        examples:
            - name: test_folder
              manifest: |-
                {
                  "title": "Terraform Test Folder"
                }
              dependencies:
                grafana_dashboard.test_folder: |-
                    {
                      "config_json": "{\n  \"title\": \"Dashboard in folder\",\n  \"uid\": \"dashboard-in-folder\"\n}\n",
                      "folder": "${grafana_folder.test_folder.id}"
                    }
            - name: test_folder_with_uid
              manifest: |-
                {
                  "title": "Terraform Test Folder With UID",
                  "uid": "test-folder-uid"
                }
              dependencies:
                grafana_dashboard.test_folder: |-
                    {
                      "config_json": "{\n  \"title\": \"Dashboard in folder\",\n  \"uid\": \"dashboard-in-folder\"\n}\n",
                      "folder": "${grafana_folder.test_folder.id}"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            parent_folder_uid: '(String) The uid of the parent folder. If set, the folder will be nested. If not set, the folder will be created in the root folder. Note: This requires the nestedFolders feature flag to be enabled on your Grafana instance.'
            prevent_destroy_if_not_empty: (Boolean) Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to false.
            title: (String) The title of the folder.
            uid: (String) Unique identifier.
            url: (String) The full URL of the folder.
        importStatements:
            - |-
              terraform import grafana_folder.by_integer_id {{folder_id}}
              terraform import grafana_folder.by_uid {{folder_uid}}
    grafana_folder_permission:
        subCategory: Grafana OSS
        description: Manages the entire set of permissions for a folder. Permissions that aren't specified when applying this resource will be removed.
        name: grafana_folder_permission
        title: grafana_folder_permission Resource - terraform-provider-grafana
        examples:
            - name: collectionPermission
              manifest: |-
                {
                  "folder_uid": "${grafana_folder.collection.uid}",
                  "permissions": [
                    {
                      "permission": "Edit",
                      "role": "Editor"
                    },
                    {
                      "permission": "View",
                      "team_id": "${grafana_team.team.id}"
                    },
                    {
                      "permission": "Admin",
                      "user_id": "${grafana_user.user.id}"
                    }
                  ]
                }
              references:
                folder_uid: grafana_folder.collection.uid
                permissions.team_id: grafana_team.team.id
                permissions.user_id: grafana_user.user.id
              dependencies:
                grafana_folder.collection: |-
                    {
                      "title": "Folder Title"
                    }
                grafana_team.team: |-
                    {
                      "name": "Team Name"
                    }
                grafana_user.user: |-
                    {
                      "email": "user.name@example.com",
                      "login": "user.name",
                      "password": "my-password"
                    }
        argumentDocs:
            folder_uid: (String) The UID of the folder.
            id: (String) The ID of this resource.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            permission: (String) Permission to associate with item. Must be one of View, Edit, or Admin.
            permissions: (Block Set) The permission items to add/update. Items that are omitted from the list will be removed. (see below for nested schema)
            role: (String) Manage permissions for Viewer or Editor roles.
            team_id: (String) ID of the team to manage permissions for. Defaults to 0.
            user_id: (String) ID of the user or service account to manage permissions for. Defaults to 0.
        importStatements:
            - |-
              terraform import grafana_folder_permission.my_folder {{folder_uid}} # To use the default provider org
              terraform import grafana_folder_permission.my_folder {{org_id}}:{{folder_uid}} # When "org_id" is set on the resource
    grafana_library_panel:
        subCategory: Grafana OSS
        description: Manages Grafana library panels. Official documentation https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/manage-library-panels/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/library_element/
        name: grafana_library_panel
        title: grafana_library_panel Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "model_json": "${jsonencode({\n    gridPos = {\n      x = 0\n      y = 0\n      h = 10\n      w = 10\n    }\n    title   = \"panel\"\n    type    = \"text\"\n    version = 0\n  })}",
                  "name": "panel"
                }
        argumentDocs:
            created: (String) Timestamp when the library panel was created.
            dashboard_ids: (List of Number) Numerical IDs of Grafana dashboards containing the library panel.
            description: (String) Description of the library panel.
            folder_id: (String) ID of the folder where the library panel is stored.
            folder_name: (String) Name of the folder containing the library panel.
            folder_uid: (String) Unique ID (UID) of the folder containing the library panel.
            id: (String) The ID of this resource.
            model_json: (String) The JSON model for the library panel.
            name: (String) Name of the library panel.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            panel_id: (Number) The numeric ID of the library panel computed by Grafana.
            type: (String) Type of the library panel (eg. text).
            uid: (String) The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
            updated: (String) Timestamp when the library panel was last modified.
            version: (Number) Version of the library panel.
        importStatements:
            - terraform import grafana_library_panel.panel_name {{library_panel_slug}}
    grafana_machine_learning_holiday Resource - terraform-provider-grafana:
        subCategory: Machine Learning
        description: 'A holiday describes time periods where a time series is expected to behave differently to normal. To use a holiday in a job, use its id in the holidays attribute of a grafana_machine_learning_job: terraform resource "grafana_machine_learning_job" "test_job" { ... holidays = [ grafana_machine_learning_holiday.my_holiday.id ] }'
        name: grafana_machine_learning_holiday Resource - terraform-provider-grafana
        title: grafana_machine_learning_holiday Resource - terraform-provider-grafana
        argumentDocs:
            custom_periods: (Block List) A list of custom periods for the holiday. (see below for nested schema)
            description: (String) A description of the holiday.
            end_time: (String)
            ical_timezone: (String) The timezone to use for events in the iCal file pointed to by ical_url.
            ical_url: (String) A URL to an iCal file containing all occurrences of the holiday.
            id: (String) The ID of the holiday.
            name: (String) The name of the holiday.
            start_time: (String)
        importStatements: []
    grafana_machine_learning_job Resource - terraform-provider-grafana:
        subCategory: Machine Learning
        description: A job defines the queries and model parameters for a machine learning task.
        name: grafana_machine_learning_job Resource - terraform-provider-grafana
        title: grafana_machine_learning_job Resource - terraform-provider-grafana
        argumentDocs:
            custom_labels: (Map of String) An object representing the custom labels added on the forecast.
            datasource_id: (Number) The id of the datasource to query.
            datasource_type: (String) The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
            datasource_uid: (String) The uid of the datasource to query.
            description: (String) A description of the job.
            holidays: (List of String) A list of holiday IDs or names to take into account when training the model.
            hyper_params: (Map of String) The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/ for the full list of available hyperparameters. Defaults to map[].
            id: (String) The ID of the job.
            interval: (Number) The data interval in seconds to train the data on. Defaults to 300.
            metric: (String) The metric used to query the job results.
            name: (String) The name of the job.
            query_params: (Map of String) An object representing the query params to query Grafana with.
            training_window: (Number) The data interval in seconds to train the data on. Defaults to 7776000.
        importStatements: []
    grafana_machine_learning_outlier_detector Resource - terraform-provider-grafana:
        subCategory: Machine Learning
        description: An outlier detector monitors the results of a query and reports when its values are outside normal bands. The normal band is configured by choice of algorithm, its sensitivity and other configuration. Visit https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for more details.
        name: grafana_machine_learning_outlier_detector Resource - terraform-provider-grafana
        title: grafana_machine_learning_outlier_detector Resource - terraform-provider-grafana
        argumentDocs:
            algorithm: '(Block Set, Min: 1, Max: 1) The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details. (see below for nested schema)'
            config: '(Block Set, Max: 1) For DBSCAN only, specify the configuration map (see below for nested schema)'
            datasource_id: (Number) The id of the datasource to query.
            datasource_type: (String) The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
            datasource_uid: (String) The uid of the datasource to query.
            description: (String) A description of the outlier detector.
            epsilon: (Number) Specify the epsilon parameter (positive float)
            id: (String) The ID of the outlier detector.
            interval: (Number) The data interval in seconds to monitor. Defaults to 300.
            metric: (String) The metric used to query the outlier detector results.
            name: (String) The name of the outlier detector.
            query_params: (Map of String) An object representing the query params to query Grafana with.
            sensitivity: (Number) Specify the sensitivity of the detector (in range [0,1]).
        importStatements: []
    grafana_message_template:
        subCategory: Alerting
        description: Manages Grafana Alerting message templates. Official documentation https://grafana.com/docs/grafana/latest/alerting/manage-notifications/template-notifications/create-notification-templates/HTTP API https://grafana.com/docs/grafana/next/developers/http_api/alerting_provisioning/#templates This resource requires Grafana 9.1.0 or later.
        name: grafana_message_template
        title: grafana_message_template Resource - terraform-provider-grafana
        examples:
            - name: my_template
              manifest: |-
                {
                  "name": "My Reusable Template",
                  "template": "{{define \"My Reusable Template\" }}\n template content\n{{ end }}"
                }
        argumentDocs:
            disable_provenance: (Boolean) Allow modifying the message template from other sources than Terraform or the Grafana API. Defaults to false.
            id: (String) The ID of this resource.
            name: (String) The name of the message template.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            template: (String) The content of the message template.
        importStatements:
            - terraform import grafana_message_template.message_template_name {{message_template_name}}
    grafana_mute_timing:
        subCategory: Alerting
        description: Manages Grafana Alerting mute timings. Official documentation https://grafana.com/docs/grafana/latest/alerting/manage-notifications/mute-timings/HTTP API https://grafana.com/docs/grafana/next/developers/http_api/alerting_provisioning/#mute-timings This resource requires Grafana 9.1.0 or later.
        name: grafana_mute_timing
        title: grafana_mute_timing Resource - terraform-provider-grafana
        examples:
            - name: my_mute_timing
              manifest: |-
                {
                  "intervals": [
                    {
                      "days_of_month": [
                        "1:7",
                        "-1"
                      ],
                      "location": "America/New_York",
                      "months": [
                        "1:3",
                        "december"
                      ],
                      "times": [
                        {
                          "end": "14:17",
                          "start": "04:56"
                        }
                      ],
                      "weekdays": [
                        "monday",
                        "tuesday:thursday"
                      ],
                      "years": [
                        "2030",
                        "2025:2026"
                      ]
                    }
                  ],
                  "name": "My Mute Timing"
                }
        argumentDocs:
            days_of_month: (List of String) An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
            end: (String) The time, in hh:mm format, of when the interval should end exclusively.
            id: (String) The ID of this resource.
            intervals: (Block List) The time intervals at which to mute notifications. Use an empty block to mute all the time. (see below for nested schema)
            location: (String) Provides the time zone for the time interval. Must be a location in the IANA time zone database, e.g "America/New_York"
            months: (List of String) An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
            name: (String) The name of the mute timing.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            start: (String) The time, in hh:mm format, of when the interval should begin inclusively.
            times: (Block List) The time ranges, represented in minutes, during which to mute in a given day. (see below for nested schema)
            weekdays: (List of String) An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
            years: (List of String) A positive inclusive range of years, e.g. "2030" or "2025:2026".
        importStatements:
            - terraform import grafana_mute_timing.mute_timing_name {{mute_timing_name}}
    grafana_notification_policy:
        subCategory: Alerting
        description: Sets the global notification policy for Grafana. !> This resource manages the entire notification policy tree, and will overwrite any existing policies. Official documentation https://grafana.com/docs/grafana/latest/alerting/manage-notifications/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/alerting_provisioning/ This resource requires Grafana 9.1.0 or later.
        name: grafana_notification_policy
        title: grafana_notification_policy Resource - terraform-provider-grafana
        examples:
            - name: my_notification_policy
              manifest: |-
                {
                  "contact_point": "${grafana_contact_point.a_contact_point.name}",
                  "group_by": [
                    "..."
                  ],
                  "group_interval": "6m",
                  "group_wait": "45s",
                  "policy": [
                    {
                      "contact_point": "${grafana_contact_point.a_contact_point.name}",
                      "continue": true,
                      "group_interval": "6m",
                      "group_wait": "45s",
                      "matcher": [
                        {
                          "label": "mylabel",
                          "match": "=",
                          "value": "myvalue"
                        },
                        {
                          "label": "alertname",
                          "match": "=",
                          "value": "CPU Usage"
                        },
                        {
                          "label": "Name",
                          "match": "=~",
                          "value": "host.*|host-b.*"
                        }
                      ],
                      "mute_timings": [
                        "${grafana_mute_timing.a_mute_timing.name}"
                      ],
                      "policy": [
                        {
                          "contact_point": "${grafana_contact_point.a_contact_point.name}",
                          "group_by": [
                            "..."
                          ],
                          "matcher": [
                            {
                              "label": "sublabel",
                              "match": "=",
                              "value": "subvalue"
                            }
                          ]
                        }
                      ],
                      "repeat_interval": "3h"
                    },
                    {
                      "contact_point": "${grafana_contact_point.a_contact_point.name}",
                      "group_by": [
                        "..."
                      ],
                      "matcher": [
                        {
                          "label": "anotherlabel",
                          "match": "=~",
                          "value": "another value.*"
                        }
                      ]
                    }
                  ],
                  "repeat_interval": "3h"
                }
              references:
                contact_point: grafana_contact_point.a_contact_point.name
                policy.contact_point: grafana_contact_point.a_contact_point.name
                policy.policy.contact_point: grafana_contact_point.a_contact_point.name
              dependencies:
                grafana_contact_point.a_contact_point: |-
                    {
                      "email": [
                        {
                          "addresses": [
                            "one@company.org",
                            "two@company.org"
                          ],
                          "message": "{{ len .Alerts.Firing }} firing."
                        }
                      ],
                      "name": "A Contact Point"
                    }
                grafana_mute_timing.a_mute_timing: |-
                    {
                      "intervals": [
                        {
                          "weekdays": [
                            "monday"
                          ]
                        }
                      ],
                      "name": "Some Mute Timing"
                    }
        argumentDocs:
            contact_point: (String) The default contact point to route all unmatched notifications to.
            continue: (Boolean) Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
            disable_provenance: (Boolean) Allow modifying the notification policy from other sources than Terraform or the Grafana API. Defaults to false.
            group_by: (List of String) A list of alert labels to group alerts into notifications by. Use the special label ... to group alerts by all labels, effectively disabling grouping.
            group_interval: (String) Minimum time interval between two notifications for the same group. Default is 5 minutes.
            group_wait: (String) Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
            id: (String) The ID of this resource.
            label: (String) The name of the label to match against.
            match: (String) The operator to apply when matching values of the given label. Allowed operators are = for equality, != for negated equality, =~ for regex equality, and !~ for negated regex equality.
            matcher: (Block Set) Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances. (see below for nested schema)
            mute_timings: (List of String) A list of mute timing names to apply to alerts that match this policy.
            policy: (Block List) Routing rules for specific label sets. (see below for nested schema)
            repeat_interval: (String) Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
            value: (String) The label value to match against.
        importStatements:
            - |-
              # The policy is a singleton, so the ID is a constant "policy" value.
              terraform import grafana_notification_policy.notification_policy_name "policy"
    grafana_oncall_escalation:
        subCategory: OnCall
        description: Official documentation https://grafana.com/docs/oncall/latest/escalation-chains-and-routes/HTTP API https://grafana.com/docs/oncall/latest/oncall-api-reference/escalation_policies/
        name: grafana_oncall_escalation
        title: grafana_oncall_escalation Resource - terraform-provider-grafana
        examples:
            - name: example_notify_step
              manifest: |-
                {
                  "escalation_chain_id": "${grafana_oncall_escalation_chain.default.id}",
                  "persons_to_notify": [
                    "${data.grafana_oncall_user.alex.id}"
                  ],
                  "position": 0,
                  "type": "notify_persons"
                }
              references:
                escalation_chain_id: grafana_oncall_escalation_chain.default.id
              dependencies:
                grafana_oncall_escalation_chain.default: |-
                    {
                      "name": "default",
                      "provider": "${grafana.oncall}"
                    }
            - name: example_notify_step
              manifest: |-
                {
                  "duration": 300,
                  "escalation_chain_id": "${grafana_oncall_escalation_chain.default.id}",
                  "position": 1,
                  "type": "wait"
                }
              references:
                escalation_chain_id: grafana_oncall_escalation_chain.default.id
              dependencies:
                grafana_oncall_escalation_chain.default: |-
                    {
                      "name": "default",
                      "provider": "${grafana.oncall}"
                    }
            - name: example_notify_step
              manifest: |-
                {
                  "escalation_chain_id": "${grafana_oncall_escalation_chain.default.id}",
                  "important": true,
                  "persons_to_notify": [
                    "${data.grafana_oncall_user.alex.id}"
                  ],
                  "position": 0,
                  "type": "notify_persons"
                }
              references:
                escalation_chain_id: grafana_oncall_escalation_chain.default.id
              dependencies:
                grafana_oncall_escalation_chain.default: |-
                    {
                      "name": "default",
                      "provider": "${grafana.oncall}"
                    }
        argumentDocs:
            action_to_trigger: (String) The ID of an Action for trigger_action type step.
            duration: (Number) The duration of delay for wait type step.
            escalation_chain_id: (String) The ID of the escalation chain.
            group_to_notify: (String) The ID of a User Group for notify_user_group type step.
            id: (String) The ID of this resource.
            important: '(Boolean) Will activate "important" personal notification rules. Actual for steps: notify_persons, notify_on_call_from_schedule and notify_user_group'
            notify_if_time_from: (String) The beginning of the time interval for notify_if_time_from_to type step in UTC (for example 08:00:00Z).
            notify_if_time_to: (String) The end of the time interval for notify_if_time_from_to type step in UTC (for example 18:00:00Z).
            notify_on_call_from_schedule: (String) ID of a Schedule for notify_on_call_from_schedule type step.
            persons_to_notify: (Set of String) The list of ID's of users for notify_persons type step.
            persons_to_notify_next_each_time: (Set of String) The list of ID's of users for notify_person_next_each_time type step.
            position: (Number) The position of the escalation step (starts from 0).
            type: (String) The type of escalation policy. Can be wait, notify_persons, notify_person_next_each_time, notify_on_call_from_schedule, trigger_action, notify_user_group, resolve, notify_whole_channel, notify_if_time_from_to, repeat_escalation
        importStatements:
            - terraform import grafana_oncall_escalation.escalation_name {{escalation_id}}
    grafana_oncall_escalation_chain:
        subCategory: OnCall
        description: HTTP API https://grafana.com/docs/oncall/latest/oncall-api-reference/escalation_chains/
        name: grafana_oncall_escalation_chain
        title: grafana_oncall_escalation_chain Resource - terraform-provider-grafana
        examples:
            - name: default
              manifest: |-
                {
                  "name": "default",
                  "provider": "${grafana.oncall}"
                }
              references:
                provider: grafana.oncall
        argumentDocs:
            id: (String) The ID of this resource.
            name: (String) The name of the escalation chain.
            team_id: (String) The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the grafana_oncall_team datasource.
        importStatements:
            - terraform import grafana_oncall_escakation_chain.escalation_chain_name {{escalation_chain_id}}
    grafana_oncall_integration:
        subCategory: OnCall
        description: Official documentation https://grafana.com/docs/oncall/latest/integrations/HTTP API https://grafana.com/docs/oncall/latest/oncall-api-reference/
        name: grafana_oncall_integration
        title: grafana_oncall_integration Resource - terraform-provider-grafana
        examples:
            - name: test-acc-integration
              manifest: |-
                {
                  "default_route": [
                    {}
                  ],
                  "name": "my integration",
                  "provider": "${grafana.oncall}",
                  "type": "grafana"
                }
              references:
                provider: grafana.oncall
            - name: integration_with_templates
              manifest: |-
                {
                  "default_route": [
                    {}
                  ],
                  "name": "integration_with_templates",
                  "provider": "${grafana.oncall}",
                  "templates": [
                    {
                      "grouping_key": "{{ payload.group_id }}",
                      "slack": [
                        {
                          "image_url": "{{ payload.image_url }}",
                          "message": "This is example of multiline template\n{{ payload.message }}\n",
                          "title": "Slack title"
                        }
                      ]
                    }
                  ],
                  "type": "webhook"
                }
              references:
                provider: grafana.oncall
        argumentDocs:
            acknowledge_signal: (String) Template for sending a signal to acknowledge the Incident.
            channel_id: (String) Slack channel id. Alerts will be directed to this channel in Slack.
            default_route: '(Block List, Min: 1, Max: 1) The Default route for all alerts from the given integration (see below for nested schema)'
            email: '(Block List, Max: 1) Templates for Email. (see below for nested schema)'
            enabled: (Boolean) Enable notification in MS teams. Defaults to true.
            escalation_chain_id: (String) The ID of the escalation chain.
            grouping_key: (String) Template for the key by which alerts are grouped.
            id: (String) The ID of this resource.
            image_url: (String) Template for Alert image url.
            link: (String) The link for using in an integrated tool.
            message: (String) Template for Alert message.
            microsoft_teams: '(Block List, Max: 1) Templates for Microsoft Teams. (see below for nested schema)'
            msteams: '(Block List, Max: 1) MS teams-specific settings for a route. (see below for nested schema)'
            name: (String) The name of the service integration.
            phone_call: '(Block List, Max: 1) Templates for Phone Call. (see below for nested schema)'
            resolve_signal: (String) Template for sending a signal to resolve the Incident.
            slack: '(Block List, Max: 1) Slack-specific settings for a route. (see below for nested schema)'
            sms: '(Block List, Max: 1) Templates for SMS. (see below for nested schema)'
            source_link: (String) Template for a source link.
            team_id: (String) The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the grafana_oncall_team datasource.
            telegram: '(Block List, Max: 1) Telegram-specific settings for a route. (see below for nested schema)'
            templates: '(Block List, Max: 1) Jinja2 templates for Alert payload. An empty templates block will be ignored. (see below for nested schema)'
            title: (String) Template for Alert title.
            type: (String) The type of integration. Can be grafana, grafana_alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon_sns, curler, sentry, formatted_webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry_platform, zabbix, prtg, slack_channel, inbound_email, direct_paging, jira.
            web: '(Block List, Max: 1) Templates for Web. (see below for nested schema)'
        importStatements:
            - terraform import grafana_oncall_integration.integration_name {{integration_id}}
    grafana_oncall_on_call_shift:
        subCategory: OnCall
        description: HTTP API https://grafana.com/docs/oncall/latest/oncall-api-reference/on_call_shifts/
        name: grafana_oncall_on_call_shift
        title: grafana_oncall_on_call_shift Resource - terraform-provider-grafana
        examples:
            - name: example_shift
              manifest: |-
                {
                  "by_day": [
                    "MO",
                    "FR"
                  ],
                  "duration": "${60 * 30}",
                  "frequency": "weekly",
                  "interval": 2,
                  "name": "Example Shift",
                  "start": "2020-09-07T14:00:00",
                  "time_zone": "UTC",
                  "type": "recurrent_event",
                  "users": [
                    "${data.grafana_oncall_user.alex.id}"
                  ],
                  "week_start": "MO"
                }
            - name: emea_weekday_shift
              manifest: |-
                {
                  "by_day": [
                    "MO",
                    "TU",
                    "WE",
                    "TH",
                    "FR"
                  ],
                  "duration": "${60 * 60 * 12}",
                  "frequency": "weekly",
                  "name": "EMEA Weekday Shift",
                  "rolling_users": "${[for k in flatten([\n    local.teams_map_of_user_id.emea,\n  ]) : [k]]}",
                  "start": "2022-02-28T03:00:00",
                  "start_rotation_from_user_index": 0,
                  "type": "rolling_users",
                  "week_start": "MO"
                }
        argumentDocs:
            by_day: (Set of String) This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
            by_month: (Set of Number) This parameter takes a list of months. Valid values are 1 to 12
            by_monthday: (Set of Number) This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
            duration: (Number) The duration of the event.
            frequency: (String) The frequency of the event. Can be daily, weekly, monthly
            id: (String) The ID of this resource.
            interval: (Number) The positive integer representing at which intervals the recurrence rule repeats.
            level: (Number) The priority level. The higher the value, the higher the priority.
            name: (String) The shift's name.
            rolling_users: (List of Set of String) The list of lists with on-call users (for rolling_users event type)
            start: (String) The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example "2020-09-05T08:00:00")
            start_rotation_from_user_index: (Number) The index of the list of users in rolling_users, from which on-call rotation starts.
            team_id: (String) The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the grafana_oncall_team datasource.
            time_zone: (String) The shift's timezone.  Overrides schedule's timezone.
            type: (String) The shift's type. Can be rolling_users, recurrent_event, single_event
            users: (Set of String) The list of on-call users (for single_event and recurrent_event event type).
            week_start: (String) Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
        importStatements:
            - terraform import grafana_oncall_on_call_shift.on_call_shift_name {{on_call_shift_id}}
    grafana_oncall_outgoing_webhook:
        subCategory: OnCall
        description: HTTP API https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/
        name: grafana_oncall_outgoing_webhook
        title: grafana_oncall_outgoing_webhook Resource - terraform-provider-grafana
        examples:
            - name: test-acc-outgoing_webhook
              manifest: |-
                {
                  "name": "my outgoing webhook",
                  "provider": "${grafana.oncall}",
                  "url": "https://example.com/"
                }
              references:
                provider: grafana.oncall
        argumentDocs:
            authorization_header: (String, Sensitive) The auth data of the webhook. Used in Authorization header instead of user/password auth.
            data: (String) The data of the webhook.
            forward_whole_payload: (Boolean) Toggle to send the entire webhook payload instead of using the values in the Data field.
            headers: (String) Headers to add to the outgoing webhook request.
            http_method: (String) The HTTP method used in the request made by the outgoing webhook. Defaults to POST.
            id: (String) The ID of this resource.
            integration_filter: (List of String) Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are selected the outgoing webhook will trigger for any integration.
            is_webhook_enabled: (Boolean) Controls whether the outgoing webhook will trigger or is ignored. The default is true.
            name: (String) The name of the outgoing webhook.
            password: (String, Sensitive) The auth data of the webhook. Used for Basic authentication
            team_id: (String) The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the grafana_oncall_team datasource.
            trigger_template: (String) A template used to dynamically determine whether the webhook should execute based on the content of the payload.
            trigger_type: '(String) The type of event that will cause this outgoing webhook to execute. The types of triggers are: escalation, alert group created, acknowledge, resolve, silence, unsilence, unresolve, unacknowledge. Defaults to escalation.'
            url: (String) The webhook URL.
            user: (String) Username to use when making the outgoing webhook request.
        importStatements:
            - terraform import grafana_oncall_outgoing_webhook.outgoing_webhook_name {{outgoing_webhook_id}}
    grafana_oncall_route:
        subCategory: OnCall
        description: HTTP API https://grafana.com/docs/oncall/latest/oncall-api-reference/routes/
        name: grafana_oncall_route
        title: grafana_oncall_route Resource - terraform-provider-grafana
        examples:
            - name: example_route
              manifest: |-
                {
                  "escalation_chain_id": "${grafana_oncall_escalation_chain.default.id}",
                  "integration_id": "${grafana_oncall_integration.example_integration.id}",
                  "msteams": [
                    {
                      "enabled": false,
                      "id": "ONCALLMSTEAMSID"
                    }
                  ],
                  "position": 0,
                  "routing_regex": "us-(east|west)",
                  "slack": [
                    {
                      "channel_id": "${data.grafana_oncall_slack_channel.example_slack_channel.slack_id}",
                      "enabled": true
                    }
                  ],
                  "telegram": [
                    {
                      "enabled": true,
                      "id": "ONCALLTELEGRAMID"
                    }
                  ]
                }
              references:
                escalation_chain_id: grafana_oncall_escalation_chain.default.id
                integration_id: grafana_oncall_integration.example_integration.id
                slack.channel_id: data.grafana_oncall_slack_channel.example_slack_channel.slack_id
              dependencies:
                grafana_oncall_escalation_chain.default: |-
                    {
                      "name": "default"
                    }
                grafana_oncall_integration.example_integration: |-
                    {
                      "name": "Grafana Integration",
                      "type": "grafana"
                    }
        argumentDocs:
            channel_id: (String) Slack channel id. Alerts will be directed to this channel in Slack.
            enabled: (Boolean) Enable notification in MS teams. Defaults to true.
            escalation_chain_id: (String) The ID of the escalation chain.
            id: (String) The ID of this resource.
            integration_id: (String) The ID of the integration.
            msteams: '(Block List, Max: 1) MS teams-specific settings for a route. (see below for nested schema)'
            position: (Number) The position of the route (starts from 0).
            routing_regex: (String) Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
            routing_type: (String) The type of route. Can be jinja2, regex Defaults to regex.
            slack: '(Block List, Max: 1) Slack-specific settings for a route. (see below for nested schema)'
            telegram: '(Block List, Max: 1) Telegram-specific settings for a route. (see below for nested schema)'
        importStatements:
            - terraform import grafana_oncall_route.route_name {{route_id}}
    grafana_oncall_schedule:
        subCategory: OnCall
        description: HTTP API https://grafana.com/docs/oncall/latest/oncall-api-reference/schedules/
        name: grafana_oncall_schedule
        title: grafana_oncall_schedule Resource - terraform-provider-grafana
        examples:
            - name: example_schedule
              manifest: |-
                {
                  "ical_url_overrides": "https://example.com/example_overrides_ical.ics",
                  "ical_url_primary": "https://example.com/example_ical.ics",
                  "name": "Example Ical Schadule",
                  "slack": [
                    {
                      "channel_id": "${data.grafana_oncall_slack_channel.example_slack_channel.slack_id}",
                      "user_group_id": "${data.grafana_oncall_user_group.example_user_group.slack_id}"
                    }
                  ],
                  "type": "ical"
                }
              references:
                slack.channel_id: data.grafana_oncall_slack_channel.example_slack_channel.slack_id
                slack.user_group_id: data.grafana_oncall_user_group.example_user_group.slack_id
            - name: example_schedule
              manifest: |-
                {
                  "ical_url_overrides": "https://example.com/example_overrides_ical.ics",
                  "name": "Example Calendar Schadule",
                  "shifts": [],
                  "time_zone": "America/New_York",
                  "type": "calendar"
                }
        argumentDocs:
            channel_id: (String) Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
            enable_web_overrides: (Boolean) Enable overrides via web UI (it will ignore ical_url_overrides).
            ical_url_overrides: (String) The URL of external iCal calendar which override primary events.
            ical_url_primary: (String) The URL of the external calendar iCal file.
            id: (String) The ID of this resource.
            name: (String) The schedule's name.
            shifts: (Set of String) The list of ID's of on-call shifts.
            slack: '(Block List, Max: 1) The Slack-specific settings for a schedule. (see below for nested schema)'
            team_id: (String) The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the grafana_oncall_team datasource.
            time_zone: (String) The schedule's time zone.
            type: (String) The schedule's type.
            user_group_id: (String) Slack user group id. Members of user group will be updated when on-call users change.
        importStatements:
            - terraform import grafana_oncall_schedule.schedule_name {{schedule_id}}
    grafana_organization:
        subCategory: Grafana OSS
        description: Official documentation https://grafana.com/docs/grafana/latest/administration/organization-management/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/org/ This resource represents an instance-scoped resource and uses Grafana's admin APIs. It does not work with API tokens or service accounts which are org-scoped. You must use basic auth.
        name: grafana_organization
        title: grafana_organization Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "admin_user": "admin",
                  "admins": [
                    "admin@example.com"
                  ],
                  "create_users": true,
                  "editors": [
                    "editor-01@example.com",
                    "editor-02@example.com"
                  ],
                  "name": "Test Organization",
                  "viewers": [
                    "viewer-01@example.com",
                    "viewer-02@example.com"
                  ]
                }
        argumentDocs:
            admin_user: |-
                (String) The login name of the configured default admin user for the Grafana
                installation. If unset, this value defaults to admin, the Grafana default.
                Grafana adds the default admin user to all organizations automatically upon
                creation, and this parameter keeps Terraform from removing it from
                organizations.
                Defaults to admin.
            admins: |-
                (Set of String) A list of email addresses corresponding to users who should be given admin
                access to the organization. Note: users specified here must already exist in
                Grafana unless 'create_users' is set to true.
            create_users: |-
                (Boolean) Whether or not to create Grafana users specified in the organization's
                membership if they don't already exist in Grafana. If unspecified, this
                parameter defaults to true, creating placeholder users with the name, login,
                and email set to the email of the user, and a random password. Setting this
                option to false will cause an error to be thrown for any users that do not
                already exist in Grafana.
                Defaults to true.
            editors: |-
                (Set of String) A list of email addresses corresponding to users who should be given editor
                access to the organization. Note: users specified here must already exist in
                Grafana unless 'create_users' is set to true.
            id: (String) The ID of this resource.
            name: (String) The display name for the Grafana organization created.
            org_id: (Number) The organization id assigned to this organization by Grafana.
            users_without_access: |-
                (Set of String) A list of email addresses corresponding to users who should be given none access to the organization.
                Note: users specified here must already exist in Grafana, unless 'create_users' is
                set to true. This feature is only available in Grafana 10.2+.
            viewers: |-
                (Set of String) A list of email addresses corresponding to users who should be given viewer
                access to the organization. Note: users specified here must already exist in
                Grafana unless 'create_users' is set to true.
        importStatements:
            - terraform import grafana_organization.org_name {{org_id}}
    grafana_organization_preferences:
        subCategory: Grafana OSS
        description: Official documentation https://grafana.com/docs/grafana/latest/administration/organization-management/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/preferences/#get-current-org-prefs
        name: grafana_organization_preferences
        title: grafana_organization_preferences Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "theme": "light",
                  "timezone": "utc",
                  "week_start": "sunday"
                }
        argumentDocs:
            home_dashboard_id: '(Number, Deprecated) The Organization home dashboard ID. Deprecated: Use home_dashboard_uid instead.'
            home_dashboard_uid: (String) The Organization home dashboard UID. This is only available in Grafana 9.0+.
            id: (String) The ID of this resource.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            theme: (String) The Organization theme. Available values are light, dark, system, or an empty string for the default.
            timezone: (String) The Organization timezone. Available values are utc, browser, or an empty string for the default.
            week_start: (String) The Organization week start day. Available values are sunday, monday, saturday, or an empty string for the default. Defaults to ``.
        importStatements: []
    grafana_playlist:
        subCategory: Grafana OSS
        description: Official documentation https://grafana.com/docs/grafana/latest/dashboards/create-manage-playlists/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/playlist/
        name: grafana_playlist
        title: grafana_playlist Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "interval": "5m",
                  "item": [
                    {
                      "order": 2,
                      "title": "Terraform Dashboard By Tag",
                      "type": "dashboard_by_tag",
                      "value": "terraform"
                    },
                    {
                      "order": 1,
                      "title": "Terraform Dashboard By ID",
                      "type": "dashboard_by_id",
                      "value": "3"
                    }
                  ],
                  "name": "My Playlist!"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            interval: (String)
            item: '(Block Set, Min: 1) (see below for nested schema)'
            name: (String) The name of the playlist.
            order: (Number)
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            title: (String)
            type: (String)
            value: (String)
        importStatements: []
    grafana_report:
        subCategory: Grafana Enterprise
        description: 'Note: This resource is available only with Grafana Enterprise 7.+. Official documentation https://grafana.com/docs/grafana/latest/dashboards/create-reports/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/reporting/'
        name: grafana_report
        title: grafana_report Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "dashboard_uid": "${grafana_dashboard.test.uid}",
                  "name": "my report",
                  "recipients": [
                    "some@email.com"
                  ],
                  "schedule": [
                    {
                      "frequency": "hourly"
                    }
                  ]
                }
              references:
                dashboard_uid: grafana_dashboard.test.uid
              dependencies:
                grafana_dashboard.test: |-
                    {
                      "config_json": "{\n  \"title\": \"Dashboard for report\",\n  \"uid\": \"report\"\n}\n",
                      "message": "inital commit."
                    }
        argumentDocs:
            custom_interval: |-
                (String) Custom interval of the report.
                Note: This field is only available when frequency is set to custom.
            dashboard_id: (Number, Deprecated) Dashboard to be sent in the report. This field is deprecated, use dashboard_uid instead.
            dashboard_uid: (String, Deprecated) Dashboard to be sent in the report.
            dashboards: (Block List) List of dashboards to render into the report (see below for nested schema)
            end_time: (String) End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
            formats: '(Set of String) Specifies what kind of attachment to generate for the report. Allowed values: pdf, csv, image.'
            frequency: '(String) Frequency of the report. Allowed values: never, once, hourly, daily, weekly, monthly, custom.'
            from: (String) Start of the time range.
            id: (String) Generated identifier of the report.
            include_dashboard_link: (Boolean) Whether to include a link to the dashboard in the report. Defaults to true.
            include_table_csv: (Boolean) Whether to include a CSV file of table panel data. Defaults to false.
            last_day_of_month: (Boolean) Send the report on the last day of the month Defaults to false.
            layout: '(String) Layout of the report. Allowed values: simple, grid. Defaults to grid.'
            message: (String) Message to be sent in the report.
            name: (String) Name of the report.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            orientation: '(String) Orientation of the report. Allowed values: landscape, portrait. Defaults to landscape.'
            recipients: (List of String) List of recipients of the report.
            reply_to: (String) Reply-to email address of the report.
            schedule: '(Block List, Min: 1, Max: 1) Schedule of the report. (see below for nested schema)'
            start_time: (String) Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
            time_range: '(Block List, Max: 1, Deprecated) Time range of the report. (see below for nested schema)'
            to: (String) End of the time range.
            uid: (String) Dashboard uid.
            workdays_only: (Boolean) Whether to send the report only on work days. Defaults to false.
        importStatements: []
    grafana_role:
        subCategory: Grafana Enterprise
        description: 'Note: This resource is available only with Grafana Enterprise 8.+. Official documentation https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/access_control/'
        name: grafana_role
        title: grafana_role Resource - terraform-provider-grafana
        examples:
            - name: super_user
              manifest: |-
                {
                  "description": "My Super User description",
                  "global": true,
                  "name": "Super User",
                  "permissions": [
                    {
                      "action": "org.users:add",
                      "scope": "users:*"
                    },
                    {
                      "action": "org.users:write",
                      "scope": "users:*"
                    },
                    {
                      "action": "org.users:read",
                      "scope": "users:*"
                    }
                  ],
                  "uid": "superuseruid",
                  "version": 1
                }
        argumentDocs:
            action: '(String) Specific action users granted with the role will be allowed to perform (for example: users:read)'
            auto_increment_version: (Boolean) Whether the role version should be incremented automatically on updates (and set to 1 on creation). This field or version should be set.
            description: (String) Description of the role.
            display_name: (String) Display name of the role. Available with Grafana 8.5+.
            global: (Boolean) Boolean to state whether the role is available across all organizations or not. Defaults to false.
            group: (String) Group of the role. Available with Grafana 8.5+.
            hidden: (Boolean) Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to false.
            id: (String) The ID of this resource.
            name: (String) Name of the role
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            permissions: (Block Set) Specific set of actions granted by the role. (see below for nested schema)
            scope: '(String) Scope to restrict the action to a set of resources (for example: users:* or roles:customrole1) Defaults to ``.'
            uid: (String) Unique identifier of the role. Used for assignments.
            version: (Number) Version of the role. A role is updated only on version increase. This field or auto_increment_version should be set.
        importStatements:
            - terraform import grafana_role.role_name {{uid}}
    grafana_role_assignment:
        subCategory: Grafana Enterprise
        description: 'Manages the entire set of assignments for a role. Assignments that aren''t specified when applying this resource will be removed. Note: This resource is available only with Grafana Enterprise 9.2+.'
        name: grafana_role_assignment
        title: grafana_role_assignment Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "role_uid": "${grafana_role.test_role.uid}",
                  "service_accounts": [
                    "${grafana_service_account.test_sa.id}"
                  ],
                  "teams": [
                    "${grafana_team.test_team.id}"
                  ],
                  "users": [
                    "${grafana_user.test_user.id}"
                  ]
                }
              references:
                role_uid: grafana_role.test_role.uid
              dependencies:
                grafana_role.test_role: |-
                    {
                      "global": true,
                      "name": "Test Role",
                      "permissions": [
                        {
                          "action": "org.users:add",
                          "scope": "users:*"
                        }
                      ],
                      "uid": "testrole",
                      "version": 1
                    }
                grafana_service_account.test_sa: |-
                    {
                      "name": "terraform_test_sa",
                      "role": "Viewer"
                    }
                grafana_team.test_team: |-
                    {
                      "name": "terraform_test_team"
                    }
                grafana_user.test_user: |-
                    {
                      "email": "terraform_user@test.com",
                      "login": "terraform_user@test.com",
                      "password": "password"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            role_uid: (String) Grafana RBAC role UID.
            service_accounts: (Set of String) IDs of service accounts that the role should be assigned to.
            teams: (Set of String) IDs of teams that the role should be assigned to.
            users: (Set of Number) IDs of users that the role should be assigned to.
        importStatements: []
    grafana_rule_group:
        subCategory: Alerting
        description: Manages Grafana Alerting rule groups. Official documentation https://grafana.com/docs/grafana/latest/alerting/alerting-rules/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/alerting_provisioning/#alert-rules This resource requires Grafana 9.1.0 or later.
        name: grafana_rule_group
        title: grafana_rule_group Resource - terraform-provider-grafana
        examples:
            - name: my_alert_rule
              manifest: |-
                {
                  "folder_uid": "${grafana_folder.rule_folder.uid}",
                  "interval_seconds": 240,
                  "name": "My Rule Group",
                  "org_id": 1,
                  "rule": [
                    {
                      "annotations": {
                        "a": "b",
                        "c": "d"
                      },
                      "condition": "B",
                      "data": [
                        {
                          "datasource_uid": "PD8C576611E62080A",
                          "model": "${jsonencode({\n        hide          = false\n        intervalMs    = 1000\n        maxDataPoints = 43200\n        refId         = \"A\"\n      })}",
                          "query_type": "",
                          "ref_id": "A",
                          "relative_time_range": [
                            {
                              "from": 600,
                              "to": 0
                            }
                          ]
                        },
                        {
                          "datasource_uid": "-100",
                          "model": "{\n    \"conditions\": [\n        {\n        \"evaluator\": {\n            \"params\": [\n            3\n            ],\n            \"type\": \"gt\"\n        },\n        \"operator\": {\n            \"type\": \"and\"\n        },\n        \"query\": {\n            \"params\": [\n            \"A\"\n            ]\n        },\n        \"reducer\": {\n            \"params\": [],\n            \"type\": \"last\"\n        },\n        \"type\": \"query\"\n        }\n    ],\n    \"datasource\": {\n        \"type\": \"__expr__\",\n        \"uid\": \"-100\"\n    },\n    \"hide\": false,\n    \"intervalMs\": 1000,\n    \"maxDataPoints\": 43200,\n    \"refId\": \"B\",\n    \"type\": \"classic_conditions\"\n}\n",
                          "query_type": "",
                          "ref_id": "B",
                          "relative_time_range": [
                            {
                              "from": 0,
                              "to": 0
                            }
                          ]
                        }
                      ],
                      "exec_err_state": "Alerting",
                      "for": "2m",
                      "is_paused": false,
                      "labels": {
                        "e": "f",
                        "g": "h"
                      },
                      "name": "My Alert Rule 1",
                      "no_data_state": "NoData"
                    }
                  ]
                }
              references:
                folder_uid: grafana_folder.rule_folder.uid
              dependencies:
                grafana_folder.rule_folder: |-
                    {
                      "title": "My Alert Rule Folder"
                    }
        argumentDocs:
            annotations: (Map of String) Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to map[].
            condition: (String) The ref_id of the query node in the data field to use as the alert condition.
            data: '(Block List, Min: 1) A sequence of stages that describe the contents of the rule. (see below for nested schema)'
            datasource_uid: (String) The UID of the datasource being queried, or "-100" if this stage is an expression stage.
            disable_provenance: (Boolean) Allow modifying the rule group from other sources than Terraform or the Grafana API. Defaults to false.
            exec_err_state: (String) Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, and Alerting. Defaults to Alerting.
            folder_uid: (String) The UID of the folder that the group belongs to.
            for: (String) The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to 0.
            from: (Number) The number of seconds in the past, relative to when the rule is evaluated, at which the time range begins.
            id: (String) The ID of this resource.
            interval_seconds: (Number) The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
            is_paused: (Boolean) Sets whether the alert should be paused or not. Defaults to false.
            labels: (Map of String) Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to map[].
            model: (String) Custom JSON data to send to the specified datasource when querying.
            name: (String) The name of the rule group.
            no_data_state: (String) Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, and Alerting. Defaults to NoData.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            query_type: (String) An optional identifier for the type of query being executed. Defaults to ``.
            ref_id: (String) A unique string to identify this query stage within a rule.
            relative_time_range: '(Block List, Min: 1, Max: 1) The time range, relative to when the query is executed, across which to query. (see below for nested schema)'
            rule: '(Block List, Min: 1) The rules within the group. (see below for nested schema)'
            to: (Number) The number of seconds in the past, relative to when the rule is evaluated, at which the time range ends.
            uid: (String) The unique identifier of the alert rule.
        importStatements:
            - terraform import grafana_rule_group.rule_group_name {{folder_uid}};{{rule_group_name}}
    grafana_service_account:
        subCategory: Grafana OSS
        description: 'Note: This resource is available only with Grafana 9.1+. Official documentation https://grafana.com/docs/grafana/latest/administration/service-accounts/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api'
        name: grafana_service_account
        title: grafana_service_account Resource - terraform-provider-grafana
        examples:
            - name: admin
              manifest: |-
                {
                  "is_disabled": false,
                  "name": "admin sa",
                  "role": "Admin"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            is_disabled: (Boolean) The disabled status for the service account. Defaults to false.
            name: (String) The name of the service account.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            role: (String) The basic role of the service account in the organization.
        importStatements: []
    grafana_service_account_permission:
        subCategory: Grafana OSS
        description: 'Manages the entire set of permissions for a service account. Permissions that aren''t specified when applying this resource will be removed. Note: This resource is available from Grafana 9.2.4 onwards. Official documentation https://grafana.com/docs/grafana/latest/administration/service-accounts/#manage-users-and-teams-permissions-for-a-service-account-in-grafana'
        name: grafana_service_account_permission
        title: grafana_service_account_permission Resource - terraform-provider-grafana
        examples:
            - name: test_permissions
              manifest: |-
                {
                  "permissions": [
                    {
                      "permission": "Edit",
                      "user_id": "${grafana_user.test_user.id}"
                    },
                    {
                      "permission": "Admin",
                      "team_id": "${grafana_team.test_team.id}"
                    }
                  ],
                  "service_account_id": "${grafana_service_account.test.id}"
                }
              references:
                permissions.team_id: grafana_team.test_team.id
                permissions.user_id: grafana_user.test_user.id
                service_account_id: grafana_service_account.test.id
              dependencies:
                grafana_service_account.test: |-
                    {
                      "is_disabled": false,
                      "name": "sa-terraform-test",
                      "role": "Editor"
                    }
                grafana_team.test_team: |-
                    {
                      "name": "tf_test_team"
                    }
                grafana_user.test_user: |-
                    {
                      "email": "tf_user@test.com",
                      "login": "tf_user@test.com",
                      "password": "password"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            permission: (String) Permission to associate with item. Must be Edit or Admin.
            permissions: (Block Set) The permission items to add/update. Items that are omitted from the list will be removed. (see below for nested schema)
            service_account_id: (String) The id of the service account.
            team_id: (String) ID of the team to manage permissions for. Specify either this or user_id. Defaults to 0.
            user_id: (String) ID of the user or service account to manage permissions for. Specify either this or team_id. Defaults to 0.
        importStatements: []
    grafana_service_account_token:
        subCategory: Grafana OSS
        description: 'Note: This resource is available only with Grafana 9.1+. Official documentation https://grafana.com/docs/grafana/latest/administration/service-accounts/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api'
        name: grafana_service_account_token
        title: grafana_service_account_token Resource - terraform-provider-grafana
        examples:
            - name: foo
              manifest: |-
                {
                  "name": "key_foo",
                  "service_account_id": "${grafana_service_account.test.id}"
                }
              references:
                service_account_id: grafana_service_account.test.id
              dependencies:
                grafana_service_account.test: |-
                    {
                      "name": "test-service-account",
                      "role": "Viewer"
                    }
            - name: bar
              manifest: |-
                {
                  "name": "key_bar",
                  "seconds_to_live": 30,
                  "service_account_id": "${grafana_service_account.test.id}"
                }
              references:
                service_account_id: grafana_service_account.test.id
              dependencies:
                grafana_service_account.test: |-
                    {
                      "name": "test-service-account",
                      "role": "Viewer"
                    }
        argumentDocs:
            expiration: (String)
            has_expired: (Boolean)
            id: (String) The ID of this resource.
            key: (String, Sensitive)
            name: (String)
            seconds_to_live: (Number)
            service_account_id: (String)
        importStatements: []
    grafana_slo:
        subCategory: SLO
        description: Resource manages Grafana SLOs. Official documentation https://grafana.com/docs/grafana-cloud/alerting-and-irm/slo/API documentation https://grafana.com/docs/grafana-cloud/alerting-and-irm/slo/api/Additional Information On Alerting Rule Annotations and Labels https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/#templating/
        name: grafana_slo
        title: grafana_slo Resource - terraform-provider-grafana
        examples:
            - name: test
              manifest: |-
                {
                  "alerting": [
                    {
                      "fastburn": [
                        {
                          "annotation": [
                            {
                              "key": "name",
                              "value": "SLO Burn Rate Very High"
                            },
                            {
                              "key": "description",
                              "value": "Error budget is burning too fast"
                            }
                          ]
                        }
                      ],
                      "slowburn": [
                        {
                          "annotation": [
                            {
                              "key": "name",
                              "value": "SLO Burn Rate High"
                            },
                            {
                              "key": "description",
                              "value": "Error budget is burning too fast"
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "description": "Terraform Description",
                  "destination_datasource": [
                    {
                      "uid": "grafanacloud-prom"
                    }
                  ],
                  "label": [
                    {
                      "key": "slo",
                      "value": "terraform"
                    }
                  ],
                  "name": "Terraform Testing",
                  "objectives": [
                    {
                      "value": 0.995,
                      "window": "30d"
                    }
                  ],
                  "query": [
                    {
                      "freeform": [
                        {
                          "query": "sum(rate(apiserver_request_total{code!=\"500\"}[$__rate_interval])) / sum(rate(apiserver_request_total[$__rate_interval]))"
                        }
                      ],
                      "type": "freeform"
                    }
                  ]
                }
            - name: test
              manifest: |-
                {
                  "alerting": [
                    {
                      "fastburn": [
                        {
                          "annotation": [
                            {
                              "key": "name",
                              "value": "SLO Burn Rate Very High"
                            },
                            {
                              "key": "description",
                              "value": "Error budget is burning too fast"
                            }
                          ],
                          "label": [
                            {
                              "key": "type",
                              "value": "slo"
                            }
                          ]
                        }
                      ],
                      "slowburn": [
                        {
                          "annotation": [
                            {
                              "key": "name",
                              "value": "SLO Burn Rate High"
                            },
                            {
                              "key": "description",
                              "value": "Error budget is burning too fast"
                            }
                          ],
                          "label": [
                            {
                              "key": "type",
                              "value": "slo"
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "description": "Complex Resource - Terraform Ratio Query Description",
                  "destination_datasource": [
                    {
                      "uid": "grafanacloud-prom"
                    }
                  ],
                  "label": [
                    {
                      "key": "slo",
                      "value": "terraform"
                    }
                  ],
                  "name": "Complex Resource - Terraform Ratio Query Example",
                  "objectives": [
                    {
                      "value": 0.995,
                      "window": "30d"
                    }
                  ],
                  "query": [
                    {
                      "ratio": [
                        {
                          "group_by_labels": [
                            "job",
                            "instance"
                          ],
                          "success_metric": "kubelet_http_requests_total{status!~\"5..\"}",
                          "total_metric": "kubelet_http_requests_total"
                        }
                      ],
                      "type": "ratio"
                    }
                  ]
                }
        argumentDocs:
            alerting: |-
                (Block List, Max: 1) Configures the alerting rules that will be generated for each
                time window associated with the SLO. Grafana SLOs can generate
                alerts when the short-term error budget burn is very high, the
                long-term error budget burn rate is high, or when the remaining
                error budget is below a certain threshold. Annotations and Labels support templating. (see below for nested schema)
            annotation: (Block List) Annotations will be attached to all alerts generated by any of these rules. (see below for nested schema)
            description: (String) Description is a free-text field that can provide more context to an SLO.
            destination_datasource: '(Block List, Max: 1) Destination Datasource sets the datasource defined for an SLO (see below for nested schema)'
            fastburn: '(Block List, Max: 1) Alerting Rules generated for Fast Burn alerts (see below for nested schema)'
            freeform: '(Block List, Max: 1) (see below for nested schema)'
            group_by_labels: (List of String) Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
            id: (String) The ID of this resource.
            key: (String)
            label: (Block List) Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$" (see below for nested schema)
            name: (String) Name should be a short description of your indicator. Consider names like "API Availability"
            objectives: '(Block List, Min: 1) Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget. (see below for nested schema)'
            query: '(Block List, Min: 1) Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported. (see below for nested schema)'
            ratio: '(Block List, Max: 1) (see below for nested schema)'
            slowburn: '(Block List, Max: 1) Alerting Rules generated for Slow Burn alerts (see below for nested schema)'
            success_metric: (String) Counter metric for success events (numerator)
            total_metric: (String) Metric for total events (denominator)
            type: '(String) Query type must be one of: "freeform", "query", "ratio", or "threshold"'
            uid: (String) UID for the Mimir Datasource
            value: (Number) Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
            window: (String) A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
        importStatements: []
    grafana_synthetic_monitoring_check:
        subCategory: Synthetic Monitoring
        description: Synthetic Monitoring checks are tests that run on selected probes at defined intervals and report metrics and logs back to your Grafana Cloud account. The target for checks can be a domain name, a server, or a website, depending on what information you would like to gather about your endpoint. You can define multiple checks for a single endpoint to check different capabilities. Official documentation https://grafana.com/docs/grafana-cloud/monitor-public-endpoints/checks/
        name: grafana_synthetic_monitoring_check
        title: grafana_synthetic_monitoring_check Resource - terraform-provider-grafana
        examples:
            - name: dns
              manifest: |-
                {
                  "enabled": false,
                  "job": "DNS Defaults",
                  "labels": {
                    "foo": "bar"
                  },
                  "probes": [
                    "${data.grafana_synthetic_monitoring_probes.main.probes.Atlanta}"
                  ],
                  "settings": [
                    {
                      "dns": [
                        {}
                      ]
                    }
                  ],
                  "target": "grafana.com"
                }
            - name: dns
              manifest: |-
                {
                  "enabled": false,
                  "job": "DNS Updated",
                  "labels": {
                    "foo": "baz"
                  },
                  "probes": [
                    "${data.grafana_synthetic_monitoring_probes.main.probes.Frankfurt}",
                    "${data.grafana_synthetic_monitoring_probes.main.probes.London}"
                  ],
                  "settings": [
                    {
                      "dns": [
                        {
                          "ip_version": "Any",
                          "port": 8600,
                          "protocol": "TCP",
                          "record_type": "CNAME",
                          "server": "8.8.4.4",
                          "valid_r_codes": [
                            "NOERROR",
                            "NOTAUTH"
                          ],
                          "validate_additional_rrs": [
                            {
                              "fail_if_matches_regexp": [
                                ".+-bad-stuff*"
                              ],
                              "fail_if_not_matches_regexp": [
                                ".+-good-stuff*"
                              ]
                            }
                          ],
                          "validate_answer_rrs": [
                            {
                              "fail_if_matches_regexp": [
                                ".+-bad-stuff*"
                              ],
                              "fail_if_not_matches_regexp": [
                                ".+-good-stuff*"
                              ]
                            }
                          ],
                          "validate_authority_rrs": [
                            {
                              "fail_if_matches_regexp": [
                                ".+-bad-stuff*"
                              ],
                              "fail_if_not_matches_regexp": [
                                ".+-good-stuff*"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "target": "grafana.net"
                }
            - name: http
              manifest: |-
                {
                  "enabled": false,
                  "job": "HTTP Defaults",
                  "labels": {
                    "foo": "bar"
                  },
                  "probes": [
                    "${data.grafana_synthetic_monitoring_probes.main.probes.Atlanta}"
                  ],
                  "settings": [
                    {
                      "http": [
                        {}
                      ]
                    }
                  ],
                  "target": "https://grafana.com"
                }
            - name: http
              manifest: |-
                {
                  "enabled": false,
                  "job": "HTTP Defaults",
                  "labels": {
                    "foo": "bar"
                  },
                  "probes": [
                    "${data.grafana_synthetic_monitoring_probes.main.probes.Bangalore}",
                    "${data.grafana_synthetic_monitoring_probes.main.probes.Mumbai}"
                  ],
                  "settings": [
                    {
                      "http": [
                        {
                          "basic_auth": [
                            {
                              "password": "sesame",
                              "username": "open"
                            }
                          ],
                          "bearer_token": "asdfjkl;",
                          "body": "and spirit",
                          "cache_busting_query_param_name": "pineapple",
                          "fail_if_body_matches_regexp": [
                            "*bad stuff*"
                          ],
                          "fail_if_body_not_matches_regexp": [
                            "*good stuff*"
                          ],
                          "fail_if_header_matches_regexp": [
                            {
                              "allow_missing": true,
                              "header": "Content-Type",
                              "regexp": "application/soap*"
                            }
                          ],
                          "fail_if_not_ssl": true,
                          "fail_if_ssl": true,
                          "headers": [
                            "Content-Type: multipart/form-data; boundary=something"
                          ],
                          "ip_version": "V6",
                          "method": "TRACE",
                          "no_follow_redirects": true,
                          "proxy_url": "https://almost-there",
                          "tls_config": [
                            {
                              "client_cert": "-----BEGIN CERTIFICATE-----\nMIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\nRTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\nh1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\nBN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\niDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\na+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\nFWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\nqq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\nFTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\nZ18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\nUV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\nyzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\ne2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\nXeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\ntqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\nQxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\ntf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\nprulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\nl3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\nvuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n-----END CERTIFICATE-----\n",
                              "server_name": "grafana.org"
                            }
                          ],
                          "valid_http_versions": [
                            "HTTP/1.0",
                            "HTTP/1.1",
                            "HTTP/2.0"
                          ],
                          "valid_status_codes": [
                            200,
                            201
                          ]
                        }
                      ]
                    }
                  ],
                  "target": "https://grafana.org"
                }
            - name: ping
              manifest: |-
                {
                  "enabled": false,
                  "job": "Ping Defaults",
                  "labels": {
                    "foo": "bar"
                  },
                  "probes": [
                    "${data.grafana_synthetic_monitoring_probes.main.probes.Atlanta}"
                  ],
                  "settings": [
                    {
                      "ping": [
                        {}
                      ]
                    }
                  ],
                  "target": "grafana.com"
                }
            - name: ping
              manifest: |-
                {
                  "enabled": false,
                  "job": "Ping Updated",
                  "labels": {
                    "foo": "baz"
                  },
                  "probes": [
                    "${data.grafana_synthetic_monitoring_probes.main.probes.Frankfurt}",
                    "${data.grafana_synthetic_monitoring_probes.main.probes.London}"
                  ],
                  "settings": [
                    {
                      "ping": [
                        {
                          "dont_fragment": true,
                          "ip_version": "Any",
                          "payload_size": 20
                        }
                      ]
                    }
                  ],
                  "target": "grafana.net"
                }
            - name: tcp
              manifest: |-
                {
                  "enabled": false,
                  "job": "TCP Defaults",
                  "labels": {
                    "foo": "bar"
                  },
                  "probes": [
                    "${data.grafana_synthetic_monitoring_probes.main.probes.Atlanta}"
                  ],
                  "settings": [
                    {
                      "tcp": [
                        {}
                      ]
                    }
                  ],
                  "target": "grafana.com:80"
                }
            - name: tcp
              manifest: |-
                {
                  "enabled": false,
                  "job": "TCP Defaults",
                  "labels": {
                    "foo": "baz"
                  },
                  "probes": [
                    "${data.grafana_synthetic_monitoring_probes.main.probes.Frankfurt}",
                    "${data.grafana_synthetic_monitoring_probes.main.probes.London}"
                  ],
                  "settings": [
                    {
                      "tcp": [
                        {
                          "ip_version": "V6",
                          "query_response": [
                            {
                              "expect": "hi",
                              "send": "howdy"
                            },
                            {
                              "expect": "like that",
                              "send": "like this",
                              "start_tls": true
                            }
                          ],
                          "tls": true,
                          "tls_config": [
                            {
                              "ca_cert": "-----BEGIN CERTIFICATE-----\nMIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\nRTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\nh1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\nBN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\niDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\na+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\nFWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\nqq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\nFTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\nZ18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\nUV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\nyzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\ne2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\nXeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\ntqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\nQxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\ntf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\nprulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\nl3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\nvuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n-----END CERTIFICATE-----\n",
                              "server_name": "grafana.com"
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "target": "grafana.com:443"
                }
            - name: traceroute
              manifest: |-
                {
                  "enabled": false,
                  "frequency": 120000,
                  "job": "Traceroute defaults",
                  "labels": {
                    "foo": "bar"
                  },
                  "probes": [
                    "${data.grafana_synthetic_monitoring_probes.main.probes.Atlanta}"
                  ],
                  "settings": [
                    {
                      "traceroute": [
                        {}
                      ]
                    }
                  ],
                  "target": "grafana.com",
                  "timeout": 30000
                }
            - name: traceroute
              manifest: |-
                {
                  "enabled": false,
                  "frequency": 120000,
                  "job": "Traceroute complex",
                  "labels": {
                    "foo": "baz"
                  },
                  "probes": [
                    "${data.grafana_synthetic_monitoring_probes.main.probes.Frankfurt}",
                    "${data.grafana_synthetic_monitoring_probes.main.probes.London}"
                  ],
                  "settings": [
                    {
                      "traceroute": [
                        {
                          "max_hops": 25,
                          "max_unknown_hops": 10,
                          "ptr_lookup": false
                        }
                      ]
                    }
                  ],
                  "target": "grafana.net",
                  "timeout": 30000
                }
        argumentDocs:
            alert_sensitivity: (String) Can be set to none, low, medium, or high to correspond to the check alert levels. Defaults to none.
            allow_missing: (Boolean) Allow header to be missing from responses. Defaults to false.
            assertions: (Block List) Assertions to make on the request response (see below for nested schema)
            attribute: (String) The attribute to use when finding the variable value. Only used when type is CSS_SELECTOR
            basic_auth: '(Block Set, Max: 1) Basic auth settings. (see below for nested schema)'
            basic_metrics_only: (Boolean) Metrics are reduced by default. Set this to false if you'd like to publish all metrics. We maintain a full list of metrics collected for each. Defaults to true.
            bearer_token: (String) Token for use with bearer authorization header.
            body: (String) The body of the HTTP request used in probe.
            ca_cert: (String) CA certificate in PEM format.
            cache_busting_query_param_name: (String) The name of the query parameter used to prevent the server from using a cached response. Each probe will assign a random value to this parameter each time a request is made.
            client_cert: (String) Client certificate in PEM format.
            client_key: (String, Sensitive) Client key in PEM format.
            condition: '(String) The condition of the assertion: NOT_CONTAINS, EQUALS, STARTS_WITH, ENDS_WITH, TYPE_OF, CONTAINS'
            content_encoding: (String) The content encoding of the body
            content_type: (String) The content type of the body
            dns: '(Block Set, Max: 1) Settings for DNS check. The target must be a valid hostname (or IP address for PTR records). (see below for nested schema)'
            dont_fragment: (Boolean) Set the DF-bit in the IP-header. Only works with ipV4. Defaults to false.
            enabled: (Boolean) Whether to enable the check. Defaults to true.
            entries: (Block List) (see below for nested schema)
            expect: (String) Response to expect.
            expression: (String) The expression of the assertion. Should start with $.
            fail_if_body_matches_regexp: (Set of String) List of regexes. If any match the response body, the check will fail.
            fail_if_body_not_matches_regexp: (Set of String) List of regexes. If any do not match the response body, the check will fail.
            fail_if_header_matches_regexp: (Block Set) Check fails if headers match. (see below for nested schema)
            fail_if_header_not_matches_regexp: (Block Set) Check fails if headers do not match. (see below for nested schema)
            fail_if_matches_regexp: (Set of String) Fail if value matches regex.
            fail_if_not_matches_regexp: (Set of String) Fail if value does not match regex.
            fail_if_not_ssl: (Boolean) Fail if SSL is not present. Defaults to false.
            fail_if_ssl: (Boolean) Fail if SSL is present. Defaults to false.
            frequency: (Number) How often the check runs in milliseconds (the value is not truly a "frequency" but a "period"). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to 60000.
            header: (String) Header name.
            headers: (Set of String) The HTTP headers set for the probe.
            http: '(Block Set, Max: 1) Settings for HTTP check. The target must be a URL (http or https). (see below for nested schema)'
            id: (String) The ID of the check.
            insecure_skip_verify: (Boolean) Disable target certificate validation. Defaults to false.
            ip_version: (String) Options are V4, V6, Any. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The Any value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to V4.
            job: (String) Name used for job label.
            labels: (Map of String) Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.
            max_hops: (Number) Maximum TTL for the trace Defaults to 64.
            max_unknown_hops: (Number) Maximum number of hosts to travers that give no response Defaults to 15.
            method: (String) Request method. One of GET, CONNECT, DELETE, HEAD, OPTIONS, POST, PUT, TRACE Defaults to GET.
            multihttp: '(Block Set, Max: 1) Settings for MultiHTTP check. The target must be a URL (http or https) (see below for nested schema)'
            name: (String) Name of the header to send
            no_follow_redirects: (Boolean) Do not follow redirects. Defaults to false.
            password: (String) Basic auth password.
            payload: (String) The body payload
            payload_size: (Number) Payload size. Defaults to 0.
            ping: '(Block Set, Max: 1) Settings for ping (ICMP) check. The target must be a valid hostname or IP address. (see below for nested schema)'
            port: (Number) Port to target. Defaults to 53.
            probes: (Set of Number) List of probe location IDs where this target will be checked from.
            protocol: (String) TCP or UDP. Defaults to UDP.
            proxy_connect_headers: (Set of String) The HTTP headers sent to the proxy URL
            proxy_url: (String) Proxy URL.
            ptr_lookup: (Boolean) Reverse lookup hostnames from IP addresses Defaults to true.
            query_fields: (Block Set) Query fields to send with the request (see below for nested schema)
            query_response: (Block Set) The query sent in the TCP probe and the expected associated response. (see below for nested schema)
            record_type: (String) One of ANY, A, AAAA, CNAME, MX, NS, PTR, SOA, SRV, TXT. Defaults to A.
            regexp: (String) Regex that header value should match.
            request: '(Block Set, Max: 1) An individual MultiHTTP request (see below for nested schema)'
            send: (String) Data to send.
            server: (String) DNS server address to target. Defaults to 8.8.8.8.
            server_name: (String) Used to verify the hostname for the targets.
            settings: '(Block Set, Min: 1, Max: 1) Check settings. Should contain exactly one nested block. (see below for nested schema)'
            source_ip_address: (String) Source IP address.
            start_tls: (Boolean) Upgrade TCP connection to TLS. Defaults to false.
            subject: '(String) The subject of the assertion: RESPONSE_HEADERS, HTTP_STATUS_CODE, RESPONSE_BODY'
            target: (String) Hostname to ping.
            tcp: '(Block Set, Max: 1) Settings for TCP check. The target must be of the form <host>:<port>, where the host portion must be a valid hostname or IP address. (see below for nested schema)'
            tenant_id: (Number) The tenant ID of the check.
            timeout: (Number) Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to 3000.
            tls: (Boolean) Whether or not TLS is used when the connection is initiated. Defaults to false.
            tls_config: '(Block Set, Max: 1) TLS config. (see below for nested schema)'
            traceroute: '(Block Set, Max: 1) Settings for traceroute check. The target must be a valid hostname or IP address (see below for nested schema)'
            type: '(String) The type of assertion to make: TEXT, JSON_PATH_VALUE, JSON_PATH_ASSERTION, REGEX_ASSERTION'
            url: (String) The URL for the request
            username: (String) Basic auth username.
            valid_http_versions: (Set of String) List of valid HTTP versions. Options include HTTP/1.0, HTTP/1.1, HTTP/2.0
            valid_r_codes: (Set of String) List of valid response codes. Options include NOERROR, BADALG, BADMODE, BADKEY, BADCOOKIE, BADNAME, BADSIG, BADTIME, BADTRUNC, BADVERS, FORMERR, NOTIMP, NOTAUTH, NOTZONE, NXDOMAIN, NXRRSET, REFUSED, SERVFAIL, YXDOMAIN, YXRRSET.
            valid_status_codes: (Set of Number) Accepted status codes. If unset, defaults to 2xx.
            validate_additional_rrs: (Block Set) Validate additional matches. (see below for nested schema)
            validate_answer_rrs: '(Block Set, Max: 1) Validate response answer. (see below for nested schema)'
            validate_authority_rrs: '(Block Set, Max: 1) Validate response authority. (see below for nested schema)'
            value: (String) The value of the assertion
            variables: (Block List) Variables to extract from the request response (see below for nested schema)
        importStatements:
            - terraform import grafana_synthetic_monitoring_check.check {{check-id}}
    grafana_synthetic_monitoring_installation:
        subCategory: Synthetic Monitoring
        description: Sets up Synthetic Monitoring on a Grafana cloud stack and generates a token. Once a Grafana Cloud stack is created, a user can either use this resource or go into the UI to install synthetic monitoring. This resource cannot be imported but it can be used on an existing Synthetic Monitoring installation without issues. Note that this resource must be used on a provider configured with Grafana Cloud credentials. Official documentation https://grafana.com/docs/grafana-cloud/monitor-public-endpoints/installation/API documentation https://github.com/grafana/synthetic-monitoring-api-go-client/blob/main/docs/API.md#apiv1registerinstall
        name: grafana_synthetic_monitoring_installation
        title: grafana_synthetic_monitoring_installation Resource - terraform-provider-grafana
        examples:
            - name: sm_stack
              manifest: |-
                {
                  "stack_id": "${grafana_cloud_stack.sm_stack.id}"
                }
              references:
                stack_id: grafana_cloud_stack.sm_stack.id
              dependencies:
                grafana_cloud_api_key.metrics_publish: |-
                    {
                      "cloud_org_slug": "\u003corg-slug\u003e",
                      "name": "MetricsPublisherForSM",
                      "role": "MetricsPublisher"
                    }
                grafana_cloud_stack.sm_stack: |-
                    {
                      "name": "\u003cstack-name\u003e",
                      "region_slug": "us",
                      "slug": "\u003cstack-slug\u003e"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            metrics_publisher_key: (String, Sensitive) The Cloud API Key with the MetricsPublisher role used to publish metrics to the SM API
            sm_access_token: (String) Generated token to access the SM API.
            stack_id: (String) The ID or slug of the stack to install SM on.
            stack_sm_api_url: '(String) The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/monitor-public-endpoints/private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack''s region, this field is computed automatically and readable.'
        importStatements: []
    grafana_synthetic_monitoring_probe:
        subCategory: Synthetic Monitoring
        description: Besides the public probes run by Grafana Labs, you can also install your own private probes. These are only accessible to you and only write data to your Grafana Cloud account. Private probes are instances of the open source Grafana Synthetic Monitoring Agent. Official documentation https://grafana.com/docs/grafana-cloud/monitor-public-endpoints/private-probes/
        name: grafana_synthetic_monitoring_probe
        title: grafana_synthetic_monitoring_probe Resource - terraform-provider-grafana
        examples:
            - name: main
              manifest: |-
                {
                  "labels": {
                    "type": "mountain"
                  },
                  "latitude": 27.98606,
                  "longitude": 86.92262,
                  "name": "Mount Everest",
                  "region": "APAC"
                }
        argumentDocs:
            auth_token: (String, Sensitive) The probe authentication token. Your probe must use this to authenticate with Grafana Cloud.
            id: (String) The ID of the probe.
            labels: (Map of String) Custom labels to be included with collected metrics and logs.
            latitude: (Number) Latitude coordinates.
            longitude: (Number) Longitude coordinates.
            name: (String) Name of the probe.
            public: (Boolean) Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to true. Defaults to false.
            region: (String) Region of the probe.
            tenant_id: (Number) The tenant ID of the probe.
        importStatements:
            - |-
              terraform import grafana_synthetic_monitoring_probe.probe {{probe-id}}
              terraform import grafana_synthetic_monitoring_probe.probe {{probe-id}}:{{auth_token}}
    grafana_team:
        subCategory: Grafana OSS
        description: Official documentation https://grafana.com/docs/grafana/latest/administration/team-management/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/team/
        name: grafana_team
        title: grafana_team Resource - terraform-provider-grafana
        examples:
            - name: test-team
              manifest: |-
                {
                  "email": "teamemail@example.com",
                  "members": [
                    "${grafana_user.viewer.email}"
                  ],
                  "name": "Test Team"
                }
              dependencies:
                grafana_user.viewer: |-
                    {
                      "email": "viewer@example.com",
                      "login": "viewer",
                      "name": "Viewer",
                      "password": "my-password"
                    }
        argumentDocs:
            email: (String) An email address for the team.
            groups: (Set of String)
            home_dashboard_uid: (String) The UID of the dashboard to display when a team member logs in. Defaults to ``.
            id: (String) The ID of this resource.
            ignore_externally_synced_members: |-
                (Boolean) Ignores team members that have been added to team by Team Sync.
                Team Sync can be provisioned using grafana_team_external_group resource.
                Defaults to true.
            members: |-
                (Set of String) A set of email addresses corresponding to users who should be given membership
                to the team. Note: users specified here must already exist in Grafana.
            name: (String) The display name for the Grafana team created.
            org_id: (String) The Organization ID. If not set, the Org ID defined in the provider block will be used.
            preferences: '(Block List, Max: 1) (see below for nested schema)'
            team_id: (Number) The team id assigned to this team by Grafana.
            team_sync: '(Block List, Max: 1) Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise.'
            theme: (String) The default theme for this team. Available themes are light, dark, system, or an empty string for the default theme. Defaults to ``.
            timezone: (String) The default timezone for this team. Available values are utc, browser, or an empty string for the default. Defaults to ``.
            week_start: (String) The default week start day for this team. Available values are sunday, monday, saturday, or an empty string for the default. Defaults to ``.
        importStatements:
            - |-
              terraform import grafana_team.team_name {{team_id}} # To use the default provider org
              terraform import grafana_team.team_name {{org_id}}:{{team_id}} # When "org_id" is set on the resource
    grafana_team_external_group:
        subCategory: Grafana Enterprise
        description: Equivalent to the the team_sync attribute of the grafana_team resource. Use one or the other to configure a team's external groups syncing config.
        name: grafana_team_external_group
        title: grafana_team_external_group Resource - terraform-provider-grafana
        examples:
            - name: test-team-group
              manifest: |-
                {
                  "groups": [
                    "test-group-1",
                    "test-group-2"
                  ],
                  "team_id": "${grafana_team.my_team.id}"
                }
              references:
                team_id: grafana_team.my_team.id
              dependencies:
                grafana_team.my_team: |-
                    {
                      "name": "My Team"
                    }
        argumentDocs:
            groups: (Set of String) The team external groups list
            id: (String) The ID of this resource.
            team_id: (String) The Team ID
        importStatements:
            - terraform import grafana_team_external_group.main {{team_id}}
    grafana_user:
        subCategory: Grafana OSS
        description: Official documentation https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/HTTP API https://grafana.com/docs/grafana/latest/developers/http_api/user/ This resource represents an instance-scoped resource and uses Grafana's admin APIs. It does not work with API tokens or service accounts which are org-scoped. You must use basic auth.
        name: grafana_user
        title: grafana_user Resource - terraform-provider-grafana
        examples:
            - name: staff
              manifest: |-
                {
                  "email": "staff.name@example.com",
                  "is_admin": false,
                  "login": "staff",
                  "name": "Staff Name",
                  "password": "my-password"
                }
        argumentDocs:
            email: (String) The email address of the Grafana user.
            id: (String) The ID of this resource.
            is_admin: (Boolean) Whether to make user an admin. Defaults to false.
            login: (String) The username for the Grafana user.
            name: (String) The display name for the Grafana user.
            password: (String, Sensitive) The password for the Grafana user.
            user_id: (Number) The numerical ID of the Grafana user.
        importStatements:
            - terraform import grafana_user.user_name {{user_id}}
